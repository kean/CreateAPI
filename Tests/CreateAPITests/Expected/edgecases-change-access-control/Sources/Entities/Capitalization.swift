// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

struct Capitalization: Codable {
    var smallCamel: String?
    var capitalCamel: String?
    var smallSnake: String?
    var capitalSnake: String?
    var sCAETHFlowPoints: String?
    /// Name of the pet
    var attName: String?

    init(smallCamel: String? = nil, capitalCamel: String? = nil, smallSnake: String? = nil, capitalSnake: String? = nil, sCAETHFlowPoints: String? = nil, attName: String? = nil) {
        self.smallCamel = smallCamel
        self.capitalCamel = capitalCamel
        self.smallSnake = smallSnake
        self.capitalSnake = capitalSnake
        self.sCAETHFlowPoints = sCAETHFlowPoints
        self.attName = attName
    }

    init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.smallCamel = try values.decodeIfPresent(String.self, forKey: "smallCamel")
        self.capitalCamel = try values.decodeIfPresent(String.self, forKey: "CapitalCamel")
        self.smallSnake = try values.decodeIfPresent(String.self, forKey: "small_Snake")
        self.capitalSnake = try values.decodeIfPresent(String.self, forKey: "Capital_Snake")
        self.sCAETHFlowPoints = try values.decodeIfPresent(String.self, forKey: "SCA_ETH_Flow_Points")
        self.attName = try values.decodeIfPresent(String.self, forKey: "ATT_NAME")
    }

    func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(smallCamel, forKey: "smallCamel")
        try values.encodeIfPresent(capitalCamel, forKey: "CapitalCamel")
        try values.encodeIfPresent(smallSnake, forKey: "small_Snake")
        try values.encodeIfPresent(capitalSnake, forKey: "Capital_Snake")
        try values.encodeIfPresent(sCAETHFlowPoints, forKey: "SCA_ETH_Flow_Points")
        try values.encodeIfPresent(attName, forKey: "ATT_NAME")
    }
}
