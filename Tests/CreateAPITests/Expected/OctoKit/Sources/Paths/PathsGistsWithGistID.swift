// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Gists {
    public func gistID(_ gistID: String) -> WithGistID {
        WithGistID(path: "\(path)/\(gistID)")
    }

    public struct WithGistID {
        /// Path: `/gists/{gist_id}`
        public let path: String

        /// Get a gist
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/gists#get-a-gist)
        public var get: Request<OctoKit.GistSimple> {
            Request(method: "GET", url: path, id: "gists/get")
        }

        /// Update a gist
        ///
        /// Allows you to update or delete a gist file and rename gist files. Files from the previous version of the gist that aren't explicitly changed during an edit are unchanged.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/gists/#update-a-gist)
        public func patch(_ body: PatchRequest) -> Request<OctoKit.GistSimple> {
            Request(method: "PATCH", url: path, body: body, id: "gists/update")
        }

        public struct PatchRequest: Encodable {
            /// Description of the gist
            ///
            /// Example: "Example Ruby script"
            public var description: String?
            /// Names of files to be updated
            ///
            /// Example:
            ///
            /// {
            ///   "hello.rb" : {
            ///     "content" : "blah",
            ///     "filename" : "goodbye.rb"
            ///   }
            /// }
            public var files: [String: File]?

            public struct File: Encodable {
                /// The new content of the file
                public var content: String
                /// The new filename for the file
                public var filename: String?

                public init(content: String, filename: String? = nil) {
                    self.content = content
                    self.filename = filename
                }

                public func encode(to encoder: Encoder) throws {
                    var values = encoder.container(keyedBy: StringCodingKey.self)
                    try values.encode(content, forKey: "content")
                    try values.encodeIfPresent(filename, forKey: "filename")
                }
            }

            public init(description: String? = nil, files: [String: File]? = nil) {
                self.description = description
                self.files = files
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(description, forKey: "description")
                try values.encodeIfPresent(files, forKey: "files")
            }
        }

        /// Delete a gist
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/gists#delete-a-gist)
        public var delete: Request<Void> {
            Request(method: "DELETE", url: path, id: "gists/delete")
        }
    }
}
