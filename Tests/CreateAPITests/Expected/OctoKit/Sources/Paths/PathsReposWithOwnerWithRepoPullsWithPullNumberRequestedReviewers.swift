// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Repos.WithOwner.WithRepo.Pulls.WithPullNumber {
    public var requestedReviewers: RequestedReviewers {
        RequestedReviewers(path: path + "/requested_reviewers")
    }

    public struct RequestedReviewers {
        /// Path: `/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers`
        public let path: String

        /// List requested reviewers for a pull request
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#list-requested-reviewers-for-a-pull-request)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<OctoKit.PullRequestReviewRequest> {
            Request(method: "GET", url: path, query: makeGetQuery(perPage, page), id: "pulls/list-requested-reviewers")
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }

        /// Request reviewers for a pull request
        ///
        /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#request-reviewers-for-a-pull-request)
        public func post(_ body: PostRequest? = nil) -> Request<OctoKit.PullRequestSimple> {
            Request(method: "POST", url: path, body: body, id: "pulls/request-reviewers")
        }

        public struct PostRequest: Encodable {
            /// An array of user `login`s that will be requested.
            public var reviewers: [String]?
            /// An array of team `slug`s that will be requested.
            public var teamReviewers: [String]?

            public init(reviewers: [String]? = nil, teamReviewers: [String]? = nil) {
                self.reviewers = reviewers
                self.teamReviewers = teamReviewers
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(reviewers, forKey: "reviewers")
                try values.encodeIfPresent(teamReviewers, forKey: "team_reviewers")
            }
        }

        /// Remove requested reviewers from a pull request
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/pulls#remove-requested-reviewers-from-a-pull-request)
        public func delete(_ body: DeleteRequest) -> Request<OctoKit.PullRequestSimple> {
            Request(method: "DELETE", url: path, body: body, id: "pulls/remove-requested-reviewers")
        }

        public struct DeleteRequest: Encodable {
            /// An array of user `login`s that will be removed.
            public var reviewers: [String]
            /// An array of team `slug`s that will be removed.
            public var teamReviewers: [String]?

            public init(reviewers: [String], teamReviewers: [String]? = nil) {
                self.reviewers = reviewers
                self.teamReviewers = teamReviewers
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encode(reviewers, forKey: "reviewers")
                try values.encodeIfPresent(teamReviewers, forKey: "team_reviewers")
            }
        }
    }
}
