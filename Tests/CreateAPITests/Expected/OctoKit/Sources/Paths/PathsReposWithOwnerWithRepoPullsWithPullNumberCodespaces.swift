// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Repos.WithOwner.WithRepo.Pulls.WithPullNumber {
    public var codespaces: Codespaces {
        Codespaces(path: path + "/codespaces")
    }

    public struct Codespaces {
        /// Path: `/repos/{owner}/{repo}/pulls/{pull_number}/codespaces`
        public let path: String

        /// Create a codespace from a pull request
        ///
        /// Creates a codespace owned by the authenticated user for the specified pull request.
        /// 
        /// You must authenticate using an access token with the `codespace` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codespaces#create-a-codespace-from-a-pull-request)
        public func post(_ body: PostRequest) -> Request<OctoKit.Codespace> {
            Request(method: "POST", url: path, body: body, id: "codespaces/create-with-pr-for-authenticated-user")
        }

        public struct PostRequest: Encodable {
            /// Location for this codespace
            public var location: String
            /// Machine type to use for this codespace
            public var machine: String?
            /// Working directory for this codespace
            public var workingDirectory: String?
            /// Time in minutes before codespace stops from inactivity
            public var idleTimeoutMinutes: Int?

            public init(location: String, machine: String? = nil, workingDirectory: String? = nil, idleTimeoutMinutes: Int? = nil) {
                self.location = location
                self.machine = machine
                self.workingDirectory = workingDirectory
                self.idleTimeoutMinutes = idleTimeoutMinutes
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encode(location, forKey: "location")
                try values.encodeIfPresent(machine, forKey: "machine")
                try values.encodeIfPresent(workingDirectory, forKey: "working_directory")
                try values.encodeIfPresent(idleTimeoutMinutes, forKey: "idle_timeout_minutes")
            }
        }
    }
}
