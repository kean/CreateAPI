// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Repos.WithOwner.WithRepo.SecretScanning.Alerts {
    public func alertNumber(_ alertNumber: Int) -> WithAlertNumber {
        WithAlertNumber(path: "\(path)/\(alertNumber)")
    }

    public struct WithAlertNumber {
        /// Path: `/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}`
        public let path: String

        /// Get a secret scanning alert
        ///
        /// Gets a single secret scanning alert detected in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
        /// 
        /// GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/secret-scanning#get-a-secret-scanning-alert)
        public var get: Request<OctoKit.SecretScanningAlert> {
            Request(method: "GET", url: path, id: "secret-scanning/get-alert")
        }

        /// Update a secret scanning alert
        ///
        /// Updates the status of a secret scanning alert in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
        /// 
        /// GitHub Apps must have the `secret_scanning_alerts` write permission to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/secret-scanning#update-a-secret-scanning-alert)
        public func patch(_ body: PatchRequest) -> Request<OctoKit.SecretScanningAlert> {
            Request(method: "PATCH", url: path, body: body, id: "secret-scanning/update-alert")
        }

        public struct PatchRequest: Encodable {
            /// Sets the state of the secret scanning alert. Can be either `open` or `resolved`. You must provide `resolution` when you set the state to `resolved`.
            public var state: OctoKit.SecretScanningAlertState
            /// **Required when the `state` is `resolved`.** The reason for resolving the alert. Can be one of `false_positive`, `wont_fix`, `revoked`, or `used_in_tests`.
            public var resolution: OctoKit.SecretScanningAlertResolution?

            public init(state: OctoKit.SecretScanningAlertState, resolution: OctoKit.SecretScanningAlertResolution? = nil) {
                self.state = state
                self.resolution = resolution
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encode(state, forKey: "state")
                try values.encodeIfPresent(resolution, forKey: "resolution")
            }
        }
    }
}
