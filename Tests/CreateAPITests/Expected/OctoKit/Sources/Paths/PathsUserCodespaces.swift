// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.User {
    public var codespaces: Codespaces {
        Codespaces(path: path + "/codespaces")
    }

    public struct Codespaces {
        /// Path: `/user/codespaces`
        public let path: String

        /// List codespaces for the authenticated user
        ///
        /// Lists the authenticated user's codespaces.
        /// 
        /// You must authenticate using an access token with the `codespace` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codespaces#list-codespaces-for-the-authenticated-user)
        public func get(parameters: GetParameters? = nil) -> Request<GetResponse> {
            Request(method: "GET", url: path, query: parameters?.asQuery, id: "codespaces/list-for-authenticated-user")
        }

        public struct GetResponse: Decodable {
            public var totalCount: Int
            public var codespaces: [OctoKit.Codespace]

            public init(totalCount: Int, codespaces: [OctoKit.Codespace]) {
                self.totalCount = totalCount
                self.codespaces = codespaces
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case codespaces
            }
        }

        public struct GetParameters {
            public var perPage: Int?
            public var page: Int?
            public var repositoryID: Int?

            public init(perPage: Int? = nil, page: Int? = nil, repositoryID: Int? = nil) {
                self.perPage = perPage
                self.page = page
                self.repositoryID = repositoryID
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                encoder.encode(repositoryID, forKey: "repository_id")
                return encoder.items
            }
        }

        /// Create a codespace for the authenticated user
        ///
        /// Creates a new codespace, owned by the authenticated user.
        /// 
        /// This endpoint requires either a `repository_id` OR a `pull_request` but not both.
        /// 
        /// You must authenticate using an access token with the `codespace` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codespaces#create-a-codespace-for-the-authenticated-user)
        public func post(_ body: PostRequest) -> Request<OctoKit.Codespace> {
            Request(method: "POST", url: path, body: body, id: "codespaces/create-for-authenticated-user")
        }

        public enum PostRequest: Encodable {
            case a(A)
            case b(B)

            public struct A: Encodable {
                /// Repository id for this codespace
                public var repositoryID: Int
                /// Git ref (typically a branch name) for this codespace
                public var ref: String?
                /// Location for this codespace
                public var location: String
                /// Machine type to use for this codespace
                public var machine: String?
                /// Working directory for this codespace
                public var workingDirectory: String?
                /// Time in minutes before codespace stops from inactivity
                public var idleTimeoutMinutes: Int?

                public init(repositoryID: Int, ref: String? = nil, location: String, machine: String? = nil, workingDirectory: String? = nil, idleTimeoutMinutes: Int? = nil) {
                    self.repositoryID = repositoryID
                    self.ref = ref
                    self.location = location
                    self.machine = machine
                    self.workingDirectory = workingDirectory
                    self.idleTimeoutMinutes = idleTimeoutMinutes
                }

                private enum CodingKeys: String, CodingKey {
                    case repositoryID = "repository_id"
                    case ref
                    case location
                    case machine
                    case workingDirectory = "working_directory"
                    case idleTimeoutMinutes = "idle_timeout_minutes"
                }
            }

            public struct B: Encodable {
                /// Pull request number for this codespace
                public var pullRequest: PullRequest
                /// Location for this codespace
                public var location: String
                /// Machine type to use for this codespace
                public var machine: String?
                /// Working directory for this codespace
                public var workingDirectory: String?
                /// Time in minutes before codespace stops from inactivity
                public var idleTimeoutMinutes: Int?

                /// Pull request number for this codespace
                public struct PullRequest: Encodable {
                    /// Pull request number
                    public var pullRequestNumber: Int
                    /// Repository id for this codespace
                    public var repositoryID: Int

                    public init(pullRequestNumber: Int, repositoryID: Int) {
                        self.pullRequestNumber = pullRequestNumber
                        self.repositoryID = repositoryID
                    }

                    private enum CodingKeys: String, CodingKey {
                        case pullRequestNumber = "pull_request_number"
                        case repositoryID = "repository_id"
                    }
                }

                public init(pullRequest: PullRequest, location: String, machine: String? = nil, workingDirectory: String? = nil, idleTimeoutMinutes: Int? = nil) {
                    self.pullRequest = pullRequest
                    self.location = location
                    self.machine = machine
                    self.workingDirectory = workingDirectory
                    self.idleTimeoutMinutes = idleTimeoutMinutes
                }

                private enum CodingKeys: String, CodingKey {
                    case pullRequest = "pull_request"
                    case location
                    case machine
                    case workingDirectory = "working_directory"
                    case idleTimeoutMinutes = "idle_timeout_minutes"
                }
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                switch self {
                case .a(let value): try container.encode(value)
                case .b(let value): try container.encode(value)
                }
            }
        }
    }
}
