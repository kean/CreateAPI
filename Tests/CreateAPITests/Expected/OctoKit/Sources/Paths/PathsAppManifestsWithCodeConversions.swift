// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.AppManifests.WithCode {
    public var conversions: Conversions {
        Conversions(path: path + "/conversions")
    }

    public struct Conversions {
        /// Path: `/app-manifests/{code}/conversions`
        public let path: String

        /// Create a GitHub App from a manifest
        ///
        /// Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/apps#create-a-github-app-from-a-manifest)
        public var post: Request<PostResponse> {
            Request(method: "POST", url: path, id: "apps/create-from-manifest")
        }

        public struct PostResponse: Decodable {
            /// GitHub app
            ///
            /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
            public var integration: OctoKit.Integration
            public var clientID: String
            public var clientSecret: String
            public var webhookSecret: String?
            public var pem: String

            public init(integration: OctoKit.Integration, clientID: String, clientSecret: String, webhookSecret: String? = nil, pem: String) {
                self.integration = integration
                self.clientID = clientID
                self.clientSecret = clientSecret
                self.webhookSecret = webhookSecret
                self.pem = pem
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.integration = try OctoKit.Integration(from: decoder)
                self.clientID = try values.decode(String.self, forKey: "client_id")
                self.clientSecret = try values.decode(String.self, forKey: "client_secret")
                self.webhookSecret = try values.decodeIfPresent(String.self, forKey: "webhook_secret")
                self.pem = try values.decode(String.self, forKey: "pem")
            }
        }
    }
}
