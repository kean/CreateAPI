// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swiftlint:disable all

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Orgs.WithOrg {
    public var migrations: Migrations {
        Migrations(path: path + "/migrations")
    }

    public struct Migrations {
        /// Path: `/orgs/{org}/migrations`
        public let path: String

        /// List organization migrations
        ///
        /// Lists the most recent migrations.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/migrations#list-organization-migrations)
        public func get(parameters: GetParameters? = nil) -> Request<[OctoKit.Migration]> {
            Request(method: "GET", url: path, query: parameters?.asQuery, id: "migrations/list-for-org")
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var perPage: Int?
            public var page: Int?
            public var exclude: [Exclude]?

            /// Allowed values that can be passed to the exclude param.
            ///
            /// Example: "repositories"
            public enum Exclude: String, Codable, CaseIterable {
                case repositories
            }

            public init(perPage: Int? = nil, page: Int? = nil, exclude: [Exclude]? = nil) {
                self.perPage = perPage
                self.page = page
                self.exclude = exclude
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(perPage, forKey: "per_page")
                encoder.encode(page, forKey: "page")
                encoder.encode(exclude, forKey: "exclude")
                return encoder.items
            }
        }

        /// Start an organization migration
        ///
        /// Initiates the generation of a migration archive.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/migrations#start-an-organization-migration)
        public func post(_ body: PostRequest) -> Request<OctoKit.Migration> {
            Request(method: "POST", url: path, body: body, id: "migrations/start-for-org")
        }

        public struct PostRequest: Encodable {
            /// A list of arrays indicating which repositories should be migrated.
            public var repositories: [String]
            /// Indicates whether repositories should be locked (to prevent manipulation) while migrating data.
            ///
            /// Example: true
            public var lockRepositories: Bool
            /// Indicates whether attachments should be excluded from the migration (to reduce migration archive file size).
            ///
            /// Example: true
            public var excludeAttachments: Bool
            /// Indicates whether releases should be excluded from the migration (to reduce migration archive file size).
            ///
            /// Example: true
            public var excludeReleases: Bool
            /// Indicates whether projects owned by the organization or users should be excluded. from the migration.
            ///
            /// Example: true
            public var excludeOwnerProjects: Bool
            public var exclude: [ExcludeItem]?

            public enum ExcludeItem: String, Codable, CaseIterable {
                case repositories
            }

            public init(repositories: [String], lockRepositories: Bool? = nil, excludeAttachments: Bool? = nil, excludeReleases: Bool? = nil, excludeOwnerProjects: Bool? = nil, exclude: [ExcludeItem]? = nil) {
                self.repositories = repositories
                self.lockRepositories = lockRepositories ?? false
                self.excludeAttachments = excludeAttachments ?? false
                self.excludeReleases = excludeReleases ?? false
                self.excludeOwnerProjects = excludeOwnerProjects ?? false
                self.exclude = exclude
            }

            private enum CodingKeys: String, CodingKey {
                case repositories
                case lockRepositories = "lock_repositories"
                case excludeAttachments = "exclude_attachments"
                case excludeReleases = "exclude_releases"
                case excludeOwnerProjects = "exclude_owner_projects"
                case exclude
            }
        }
    }
}
