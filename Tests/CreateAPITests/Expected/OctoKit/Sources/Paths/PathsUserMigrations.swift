// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.User {
    public var migrations: Migrations {
        Migrations(path: path + "/migrations")
    }

    public struct Migrations {
        /// Path: `/user/migrations`
        public let path: String

        /// List user migrations
        ///
        /// Lists all migrations a user has started.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/migrations#list-user-migrations)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<[OctoKit.Migration]> {
            Request(method: "GET", url: path, query: makeGetQuery(perPage, page), id: "migrations/list-for-authenticated-user")
        }

        public enum GetResponseHeaders {
            public static let link = HTTPHeader<String>(field: "Link")
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }

        /// Start a user migration
        ///
        /// Initiates the generation of a user migration archive.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/migrations#start-a-user-migration)
        public func post(_ body: PostRequest) -> Request<OctoKit.Migration> {
            Request(method: "POST", url: path, body: body, id: "migrations/start-for-authenticated-user")
        }

        public struct PostRequest: Encodable {
            /// Lock the repositories being migrated at the start of the migration
            ///
            /// Example: true
            public var lockRepositories: Bool?
            /// Do not include attachments in the migration
            ///
            /// Example: true
            public var excludeAttachments: Bool?
            /// Do not include releases in the migration
            ///
            /// Example: true
            public var excludeReleases: Bool?
            /// Indicates whether projects owned by the organization or users should be excluded.
            ///
            /// Example: true
            public var excludeOwnerProjects: Bool?
            /// Exclude attributes from the API response to improve performance
            ///
            /// Example: ["repositories"]
            public var exclude: [ExcludeItem]?
            public var repositories: [String]

            /// Allowed values that can be passed to the exclude param.
            ///
            /// Example: "repositories"
            public enum ExcludeItem: String, Codable, CaseIterable {
                case repositories
            }

            public init(lockRepositories: Bool? = nil, excludeAttachments: Bool? = nil, excludeReleases: Bool? = nil, excludeOwnerProjects: Bool? = nil, exclude: [ExcludeItem]? = nil, repositories: [String]) {
                self.lockRepositories = lockRepositories
                self.excludeAttachments = excludeAttachments
                self.excludeReleases = excludeReleases
                self.excludeOwnerProjects = excludeOwnerProjects
                self.exclude = exclude
                self.repositories = repositories
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(lockRepositories, forKey: "lock_repositories")
                try values.encodeIfPresent(excludeAttachments, forKey: "exclude_attachments")
                try values.encodeIfPresent(excludeReleases, forKey: "exclude_releases")
                try values.encodeIfPresent(excludeOwnerProjects, forKey: "exclude_owner_projects")
                try values.encodeIfPresent(exclude, forKey: "exclude")
                try values.encode(repositories, forKey: "repositories")
            }
        }
    }
}
