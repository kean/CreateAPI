// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swiftlint:disable all

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Orgs.WithOrg.Actions {
    public var runnerGroups: RunnerGroups {
        RunnerGroups(path: path + "/runner-groups")
    }

    public struct RunnerGroups {
        /// Path: `/orgs/{org}/actions/runner-groups`
        public let path: String

        /// List self-hosted runner groups for an organization
        ///
        /// The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
        /// 
        /// Lists all self-hosted runner groups configured in an organization and inherited from an enterprise.
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#list-self-hosted-runner-groups-for-an-organization)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<GetResponse> {
            Request(method: "GET", url: path, query: makeGetQuery(perPage, page), id: "actions/list-self-hosted-runner-groups-for-org")
        }

        public struct GetResponse: Decodable {
            public var totalCount: Double
            public var runnerGroups: [OctoKit.RunnerGroupsOrg]

            public init(totalCount: Double, runnerGroups: [OctoKit.RunnerGroupsOrg]) {
                self.totalCount = totalCount
                self.runnerGroups = runnerGroups
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case runnerGroups = "runner_groups"
            }
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }

        /// Create a self-hosted runner group for an organization
        ///
        /// The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
        /// 
        /// Creates a new self-hosted runner group for an organization.
        /// 
        /// You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/actions#create-a-self-hosted-runner-group-for-an-organization)
        public func post(_ body: PostRequest) -> Request<OctoKit.RunnerGroupsOrg> {
            Request(method: "POST", url: path, body: body, id: "actions/create-self-hosted-runner-group-for-org")
        }

        public struct PostRequest: Encodable {
            /// Name of the runner group.
            public var name: String
            /// Visibility of a runner group. You can select all repositories, select individual repositories, or limit access to private repositories. Can be one of: `all`, `selected`, or `private`.
            public var visibility: Visibility?
            /// List of repository IDs that can access the runner group.
            public var selectedRepositoryIDs: [Int]?
            /// List of runner IDs to add to the runner group.
            public var runners: [Int]?
            /// Whether the runner group can be used by `public` repositories.
            public var allowsPublicRepositories: Bool

            /// Visibility of a runner group. You can select all repositories, select individual repositories, or limit access to private repositories. Can be one of: `all`, `selected`, or `private`.
            public enum Visibility: String, Codable, CaseIterable {
                case selected
                case all
                case `private`
            }

            public init(name: String, visibility: Visibility? = nil, selectedRepositoryIDs: [Int]? = nil, runners: [Int]? = nil, allowsPublicRepositories: Bool? = nil) {
                self.name = name
                self.visibility = visibility
                self.selectedRepositoryIDs = selectedRepositoryIDs
                self.runners = runners
                self.allowsPublicRepositories = allowsPublicRepositories ?? false
            }

            private enum CodingKeys: String, CodingKey {
                case name
                case visibility
                case selectedRepositoryIDs = "selected_repository_ids"
                case runners
                case allowsPublicRepositories = "allows_public_repositories"
            }
        }
    }
}
