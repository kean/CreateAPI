// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Repos.WithOwner.WithRepo {
    public var codespaces: Codespaces {
        Codespaces(path: path + "/codespaces")
    }

    public struct Codespaces {
        /// Path: `/repos/{owner}/{repo}/codespaces`
        public let path: String

        /// List codespaces in a repository for the authenticated user
        ///
        /// Lists the codespaces associated to a specified repository and the authenticated user.
        /// 
        /// You must authenticate using an access token with the `codespace` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codespaces#list-codespaces-in-a-repository-for-the-authenticated-user)
        public func get(perPage: Int? = nil, page: Int? = nil) -> Request<GetResponse> {
            Request(method: "GET", url: path, query: makeGetQuery(perPage, page), id: "codespaces/list-in-repository-for-authenticated-user")
        }

        public struct GetResponse: Decodable {
            public var totalCount: Int
            public var codespaces: [OctoKit.Codespace]

            public init(totalCount: Int, codespaces: [OctoKit.Codespace]) {
                self.totalCount = totalCount
                self.codespaces = codespaces
            }

            private enum CodingKeys: String, CodingKey {
                case totalCount = "total_count"
                case codespaces
            }
        }

        private func makeGetQuery(_ perPage: Int?, _ page: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(perPage, forKey: "per_page")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }

        /// Create a codespace in a repository
        ///
        /// Creates a codespace owned by the authenticated user in the specified repository.
        /// 
        /// You must authenticate using an access token with the `codespace` scope to use this endpoint.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/codespaces#create-a-codespace-in-a-repository)
        public func post(_ body: PostRequest) -> Request<OctoKit.Codespace> {
            Request(method: "POST", url: path, body: body, id: "codespaces/create-with-repo-for-authenticated-user")
        }

        public struct PostRequest: Encodable {
            /// Git ref (typically a branch name) for this codespace
            public var ref: String?
            /// Location for this codespace
            public var location: String
            /// Machine type to use for this codespace
            public var machine: String?
            /// Working directory for this codespace
            public var workingDirectory: String?
            /// Time in minutes before codespace stops from inactivity
            public var idleTimeoutMinutes: Int?

            public init(ref: String? = nil, location: String, machine: String? = nil, workingDirectory: String? = nil, idleTimeoutMinutes: Int? = nil) {
                self.ref = ref
                self.location = location
                self.machine = machine
                self.workingDirectory = workingDirectory
                self.idleTimeoutMinutes = idleTimeoutMinutes
            }

            private enum CodingKeys: String, CodingKey {
                case ref
                case location
                case machine
                case workingDirectory = "working_directory"
                case idleTimeoutMinutes = "idle_timeout_minutes"
            }
        }
    }
}
