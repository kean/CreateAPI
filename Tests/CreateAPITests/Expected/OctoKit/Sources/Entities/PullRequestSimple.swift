// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct PullRequestSimple: Codable {
    /// Example: "https://api.github.com/repos/octocat/Hello-World/pulls/1347"
    public var url: URL
    public var id: Int
    /// Example: "MDExOlB1bGxSZXF1ZXN0MQ=="
    public var nodeID: String
    /// Example: "https://github.com/octocat/Hello-World/pull/1347"
    public var htmlURL: URL
    /// Example: "https://github.com/octocat/Hello-World/pull/1347.diff"
    public var diffURL: URL
    /// Example: "https://github.com/octocat/Hello-World/pull/1347.patch"
    public var patchURL: URL
    /// Example: "https://api.github.com/repos/octocat/Hello-World/issues/1347"
    public var issueURL: URL
    /// Example: "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits"
    public var commitsURL: URL
    /// Example: "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments"
    public var reviewCommentsURL: URL
    /// Example: "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}"
    public var reviewCommentURL: String
    /// Example: "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments"
    public var commentsURL: URL
    /// Example: "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e"
    public var statusesURL: URL
    /// Example: 1347
    public var number: Int
    /// Example: "open"
    public var state: String
    /// Example: true
    public var isLocked: Bool
    /// Example: "new-feature"
    public var title: String
    /// Simple User
    public var user: SimpleUser?
    /// Example: "Please pull these awesome changes"
    public var body: String?
    public var labels: [Label]
    /// A collection of related issues and pull requests.
    public var milestone: Milestone?
    /// Example: "too heated"
    public var activeLockReason: String?
    /// Example: "2011-01-26T19:01:12Z"
    public var createdAt: Date
    /// Example: "2011-01-26T19:01:12Z"
    public var updatedAt: Date
    /// Example: "2011-01-26T19:01:12Z"
    public var closedAt: Date?
    /// Example: "2011-01-26T19:01:12Z"
    public var mergedAt: Date?
    /// Example: "e5bd3914e2e596debea16f433f57875b5b90bcd6"
    public var mergeCommitSha: String?
    /// Simple User
    public var assignee: SimpleUser?
    public var assignees: [SimpleUser]?
    public var requestedReviewers: [SimpleUser]?
    public var requestedTeams: [Team]?
    public var head: Head
    public var base: Base
    public var links: Links
    /// Author_association
    ///
    /// How the author is associated with the repository.
    ///
    /// Example: "OWNER"
    public var authorAssociation: AuthorAssociation
    /// The status of auto merging a pull request.
    public var autoMerge: AutoMerge?
    /// Indicates whether or not the pull request is a draft.
    ///
    /// Example: false
    public var isDraft: Bool?

    public struct Label: Codable {
        public var id: Int
        public var nodeID: String
        public var url: String
        public var name: String
        public var description: String
        public var color: String
        public var isDefault: Bool

        public init(id: Int, nodeID: String, url: String, name: String, description: String, color: String, isDefault: Bool) {
            self.id = id
            self.nodeID = nodeID
            self.url = url
            self.name = name
            self.description = description
            self.color = color
            self.isDefault = isDefault
        }

        private enum CodingKeys: String, CodingKey {
            case id
            case nodeID = "node_id"
            case url
            case name
            case description
            case color
            case isDefault = "default"
        }
    }

    public struct Head: Codable {
        public var label: String
        public var ref: String
        /// Repository
        ///
        /// A git repository
        public var repo: Repository
        public var sha: String
        /// Simple User
        public var user: SimpleUser?

        public init(label: String, ref: String, repo: Repository, sha: String, user: SimpleUser? = nil) {
            self.label = label
            self.ref = ref
            self.repo = repo
            self.sha = sha
            self.user = user
        }
    }

    public struct Base: Codable {
        public var label: String
        public var ref: String
        /// Repository
        ///
        /// A git repository
        public var repo: Repository
        public var sha: String
        /// Simple User
        public var user: SimpleUser?

        public init(label: String, ref: String, repo: Repository, sha: String, user: SimpleUser? = nil) {
            self.label = label
            self.ref = ref
            self.repo = repo
            self.sha = sha
            self.user = user
        }
    }

    public struct Links: Codable {
        /// Link
        ///
        /// Hypermedia Link
        public var comments: Link
        /// Link
        ///
        /// Hypermedia Link
        public var commits: Link
        /// Link
        ///
        /// Hypermedia Link
        public var statuses: Link
        /// Link
        ///
        /// Hypermedia Link
        public var html: Link
        /// Link
        ///
        /// Hypermedia Link
        public var issue: Link
        /// Link
        ///
        /// Hypermedia Link
        public var reviewComments: Link
        /// Link
        ///
        /// Hypermedia Link
        public var reviewComment: Link
        /// Link
        ///
        /// Hypermedia Link
        public var this: Link

        public init(comments: Link, commits: Link, statuses: Link, html: Link, issue: Link, reviewComments: Link, reviewComment: Link, this: Link) {
            self.comments = comments
            self.commits = commits
            self.statuses = statuses
            self.html = html
            self.issue = issue
            self.reviewComments = reviewComments
            self.reviewComment = reviewComment
            self.this = this
        }

        private enum CodingKeys: String, CodingKey {
            case comments
            case commits
            case statuses
            case html
            case issue
            case reviewComments = "review_comments"
            case reviewComment = "review_comment"
            case this = "self"
        }
    }

    public init(url: URL, id: Int, nodeID: String, htmlURL: URL, diffURL: URL, patchURL: URL, issueURL: URL, commitsURL: URL, reviewCommentsURL: URL, reviewCommentURL: String, commentsURL: URL, statusesURL: URL, number: Int, state: String, isLocked: Bool, title: String, user: SimpleUser? = nil, body: String? = nil, labels: [Label], milestone: Milestone? = nil, activeLockReason: String? = nil, createdAt: Date, updatedAt: Date, closedAt: Date? = nil, mergedAt: Date? = nil, mergeCommitSha: String? = nil, assignee: SimpleUser? = nil, assignees: [SimpleUser]? = nil, requestedReviewers: [SimpleUser]? = nil, requestedTeams: [Team]? = nil, head: Head, base: Base, links: Links, authorAssociation: AuthorAssociation, autoMerge: AutoMerge? = nil, isDraft: Bool? = nil) {
        self.url = url
        self.id = id
        self.nodeID = nodeID
        self.htmlURL = htmlURL
        self.diffURL = diffURL
        self.patchURL = patchURL
        self.issueURL = issueURL
        self.commitsURL = commitsURL
        self.reviewCommentsURL = reviewCommentsURL
        self.reviewCommentURL = reviewCommentURL
        self.commentsURL = commentsURL
        self.statusesURL = statusesURL
        self.number = number
        self.state = state
        self.isLocked = isLocked
        self.title = title
        self.user = user
        self.body = body
        self.labels = labels
        self.milestone = milestone
        self.activeLockReason = activeLockReason
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.closedAt = closedAt
        self.mergedAt = mergedAt
        self.mergeCommitSha = mergeCommitSha
        self.assignee = assignee
        self.assignees = assignees
        self.requestedReviewers = requestedReviewers
        self.requestedTeams = requestedTeams
        self.head = head
        self.base = base
        self.links = links
        self.authorAssociation = authorAssociation
        self.autoMerge = autoMerge
        self.isDraft = isDraft
    }

    private enum CodingKeys: String, CodingKey {
        case url
        case id
        case nodeID = "node_id"
        case htmlURL = "html_url"
        case diffURL = "diff_url"
        case patchURL = "patch_url"
        case issueURL = "issue_url"
        case commitsURL = "commits_url"
        case reviewCommentsURL = "review_comments_url"
        case reviewCommentURL = "review_comment_url"
        case commentsURL = "comments_url"
        case statusesURL = "statuses_url"
        case number
        case state
        case isLocked = "locked"
        case title
        case user
        case body
        case labels
        case milestone
        case activeLockReason = "active_lock_reason"
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case closedAt = "closed_at"
        case mergedAt = "merged_at"
        case mergeCommitSha = "merge_commit_sha"
        case assignee
        case assignees
        case requestedReviewers = "requested_reviewers"
        case requestedTeams = "requested_teams"
        case head
        case base
        case links = "_links"
        case authorAssociation = "author_association"
        case autoMerge = "auto_merge"
        case isDraft = "draft"
    }
}
