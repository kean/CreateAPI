// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct GistSimple: Codable {
    /// - warning: Deprecated.
    public var forks: [Fork]?
    /// - warning: Deprecated.
    public var history: [GistHistory]?
    /// Gist
    public var forkOf: ForkOf?
    public var url: String?
    public var forksURL: String?
    public var commitsURL: String?
    public var id: String?
    public var nodeID: String?
    public var gitPullURL: String?
    public var gitPushURL: String?
    public var htmlURL: String?
    public var files: [String: File]?
    public var isPublic: Bool?
    public var createdAt: String?
    public var updatedAt: String?
    public var description: String?
    public var comments: Int?
    public var user: String?
    public var commentsURL: String?
    /// Simple User
    public var owner: SimpleUser?
    public var isTruncated: Bool?

    public struct Fork: Codable {
        public var id: String?
        public var url: URL?
        /// Public User
        public var user: PublicUser?
        public var createdAt: Date?
        public var updatedAt: Date?

        public init(id: String? = nil, url: URL? = nil, user: PublicUser? = nil, createdAt: Date? = nil, updatedAt: Date? = nil) {
            self.id = id
            self.url = url
            self.user = user
            self.createdAt = createdAt
            self.updatedAt = updatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case id
            case url
            case user
            case createdAt = "created_at"
            case updatedAt = "updated_at"
        }
    }

    /// Gist
    public struct ForkOf: Codable {
        public var url: URL
        public var forksURL: URL
        public var commitsURL: URL
        public var id: String
        public var nodeID: String
        public var gitPullURL: URL
        public var gitPushURL: URL
        public var htmlURL: URL
        public var files: [String: File]
        public var isPublic: Bool
        public var createdAt: Date
        public var updatedAt: Date
        public var description: String?
        public var comments: Int
        /// Simple User
        public var user: SimpleUser?
        public var commentsURL: URL
        /// Simple User
        public var owner: SimpleUser?
        public var isTruncated: Bool?
        public var forks: [AnyJSON]?
        public var history: [AnyJSON]?

        public struct File: Codable {
            public var filename: String?
            public var type: String?
            public var language: String?
            public var rawURL: String?
            public var size: Int?

            public init(filename: String? = nil, type: String? = nil, language: String? = nil, rawURL: String? = nil, size: Int? = nil) {
                self.filename = filename
                self.type = type
                self.language = language
                self.rawURL = rawURL
                self.size = size
            }

            private enum CodingKeys: String, CodingKey {
                case filename
                case type
                case language
                case rawURL = "raw_url"
                case size
            }
        }

        public init(url: URL, forksURL: URL, commitsURL: URL, id: String, nodeID: String, gitPullURL: URL, gitPushURL: URL, htmlURL: URL, files: [String: File], isPublic: Bool, createdAt: Date, updatedAt: Date, description: String? = nil, comments: Int, user: SimpleUser? = nil, commentsURL: URL, owner: SimpleUser? = nil, isTruncated: Bool? = nil, forks: [AnyJSON]? = nil, history: [AnyJSON]? = nil) {
            self.url = url
            self.forksURL = forksURL
            self.commitsURL = commitsURL
            self.id = id
            self.nodeID = nodeID
            self.gitPullURL = gitPullURL
            self.gitPushURL = gitPushURL
            self.htmlURL = htmlURL
            self.files = files
            self.isPublic = isPublic
            self.createdAt = createdAt
            self.updatedAt = updatedAt
            self.description = description
            self.comments = comments
            self.user = user
            self.commentsURL = commentsURL
            self.owner = owner
            self.isTruncated = isTruncated
            self.forks = forks
            self.history = history
        }

        private enum CodingKeys: String, CodingKey {
            case url
            case forksURL = "forks_url"
            case commitsURL = "commits_url"
            case id
            case nodeID = "node_id"
            case gitPullURL = "git_pull_url"
            case gitPushURL = "git_push_url"
            case htmlURL = "html_url"
            case files
            case isPublic = "public"
            case createdAt = "created_at"
            case updatedAt = "updated_at"
            case description
            case comments
            case user
            case commentsURL = "comments_url"
            case owner
            case isTruncated = "truncated"
            case forks
            case history
        }
    }

    public struct File: Codable {
        public var filename: String?
        public var type: String?
        public var language: String?
        public var rawURL: String?
        public var size: Int?
        public var isTruncated: Bool?
        public var content: String?

        public init(filename: String? = nil, type: String? = nil, language: String? = nil, rawURL: String? = nil, size: Int? = nil, isTruncated: Bool? = nil, content: String? = nil) {
            self.filename = filename
            self.type = type
            self.language = language
            self.rawURL = rawURL
            self.size = size
            self.isTruncated = isTruncated
            self.content = content
        }

        private enum CodingKeys: String, CodingKey {
            case filename
            case type
            case language
            case rawURL = "raw_url"
            case size
            case isTruncated = "truncated"
            case content
        }
    }

    public init(forks: [Fork]? = nil, history: [GistHistory]? = nil, forkOf: ForkOf? = nil, url: String? = nil, forksURL: String? = nil, commitsURL: String? = nil, id: String? = nil, nodeID: String? = nil, gitPullURL: String? = nil, gitPushURL: String? = nil, htmlURL: String? = nil, files: [String: File]? = nil, isPublic: Bool? = nil, createdAt: String? = nil, updatedAt: String? = nil, description: String? = nil, comments: Int? = nil, user: String? = nil, commentsURL: String? = nil, owner: SimpleUser? = nil, isTruncated: Bool? = nil) {
        self.forks = forks
        self.history = history
        self.forkOf = forkOf
        self.url = url
        self.forksURL = forksURL
        self.commitsURL = commitsURL
        self.id = id
        self.nodeID = nodeID
        self.gitPullURL = gitPullURL
        self.gitPushURL = gitPushURL
        self.htmlURL = htmlURL
        self.files = files
        self.isPublic = isPublic
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.description = description
        self.comments = comments
        self.user = user
        self.commentsURL = commentsURL
        self.owner = owner
        self.isTruncated = isTruncated
    }

    private enum CodingKeys: String, CodingKey {
        case forks
        case history
        case forkOf = "fork_of"
        case url
        case forksURL = "forks_url"
        case commitsURL = "commits_url"
        case id
        case nodeID = "node_id"
        case gitPullURL = "git_pull_url"
        case gitPushURL = "git_push_url"
        case htmlURL = "html_url"
        case files
        case isPublic = "public"
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case description
        case comments
        case user
        case commentsURL = "comments_url"
        case owner
        case isTruncated = "truncated"
    }
}
