// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct BaseGist: Codable {
    public var url: URL
    public var forksURL: URL
    public var commitsURL: URL
    public var id: String
    public var nodeID: String
    public var gitPullURL: URL
    public var gitPushURL: URL
    public var htmlURL: URL
    public var files: [String: File]
    public var isPublic: Bool
    public var createdAt: Date
    public var updatedAt: Date
    public var description: String?
    public var comments: Int
    /// Simple User
    public var user: SimpleUser?
    public var commentsURL: URL
    /// Simple User
    public var owner: SimpleUser?
    public var isTruncated: Bool?
    public var forks: [AnyJSON]?
    public var history: [AnyJSON]?

    public struct File: Codable {
        public var filename: String?
        public var type: String?
        public var language: String?
        public var rawURL: String?
        public var size: Int?

        public init(filename: String? = nil, type: String? = nil, language: String? = nil, rawURL: String? = nil, size: Int? = nil) {
            self.filename = filename
            self.type = type
            self.language = language
            self.rawURL = rawURL
            self.size = size
        }

        private enum CodingKeys: String, CodingKey {
            case filename
            case type
            case language
            case rawURL = "raw_url"
            case size
        }
    }

    public init(url: URL, forksURL: URL, commitsURL: URL, id: String, nodeID: String, gitPullURL: URL, gitPushURL: URL, htmlURL: URL, files: [String: File], isPublic: Bool, createdAt: Date, updatedAt: Date, description: String? = nil, comments: Int, user: SimpleUser? = nil, commentsURL: URL, owner: SimpleUser? = nil, isTruncated: Bool? = nil, forks: [AnyJSON]? = nil, history: [AnyJSON]? = nil) {
        self.url = url
        self.forksURL = forksURL
        self.commitsURL = commitsURL
        self.id = id
        self.nodeID = nodeID
        self.gitPullURL = gitPullURL
        self.gitPushURL = gitPushURL
        self.htmlURL = htmlURL
        self.files = files
        self.isPublic = isPublic
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.description = description
        self.comments = comments
        self.user = user
        self.commentsURL = commentsURL
        self.owner = owner
        self.isTruncated = isTruncated
        self.forks = forks
        self.history = history
    }

    private enum CodingKeys: String, CodingKey {
        case url
        case forksURL = "forks_url"
        case commitsURL = "commits_url"
        case id
        case nodeID = "node_id"
        case gitPullURL = "git_pull_url"
        case gitPushURL = "git_push_url"
        case htmlURL = "html_url"
        case files
        case isPublic = "public"
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case description
        case comments
        case user
        case commentsURL = "comments_url"
        case owner
        case isTruncated = "truncated"
        case forks
        case history
    }
}
