// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct OrganizationFull: Codable {
    /// Example: "github"
    public var login: String
    public var id: Int
    /// Example: "MDEyOk9yZ2FuaXphdGlvbjE="
    public var nodeID: String
    /// Example: "https://api.github.com/orgs/github"
    public var url: URL
    /// Example: "https://api.github.com/orgs/github/repos"
    public var reposURL: URL
    /// Example: "https://api.github.com/orgs/github/events"
    public var eventsURL: URL
    /// Example: "https://api.github.com/orgs/github/hooks"
    public var hooksURL: String
    /// Example: "https://api.github.com/orgs/github/issues"
    public var issuesURL: String
    /// Example: "https://api.github.com/orgs/github/members{/member}"
    public var membersURL: String
    /// Example: "https://api.github.com/orgs/github/public_members{/member}"
    public var publicMembersURL: String
    /// Example: "https://github.com/images/error/octocat_happy.gif"
    public var avatarURL: String
    /// Example: "A great organization"
    public var description: String?
    /// Example: "github"
    public var name: String?
    /// Example: "GitHub"
    public var company: String?
    /// Example: "https://github.com/blog"
    public var blog: URL?
    /// Example: "San Francisco"
    public var location: String?
    /// Example: "octocat@github.com"
    public var email: String?
    /// Example: "github"
    public var twitterUsername: String?
    /// Example: true
    public var isVerified: Bool?
    /// Example: true
    public var hasOrganizationProjects: Bool
    /// Example: true
    public var hasRepositoryProjects: Bool
    public var publicRepos: Int
    public var publicGists: Int
    /// Example: 20
    public var followers: Int
    public var following: Int
    /// Example: "https://github.com/octocat"
    public var htmlURL: URL
    /// Example: "2008-01-14T04:33:35Z"
    public var createdAt: Date
    /// Example: "Organization"
    public var type: String
    /// Example: 100
    public var totalPrivateRepos: Int?
    /// Example: 100
    public var ownedPrivateRepos: Int?
    /// Example: 81
    public var privateGists: Int?
    /// Example: 10000
    public var diskUsage: Int?
    public var collaborators: Int?
    /// Example: "org@example.com"
    public var billingEmail: String?
    public var plan: Plan?
    public var defaultRepositoryPermission: String?
    /// Example: true
    public var membersCanCreateRepositories: Bool?
    /// Example: true
    public var isTwoFactorRequirementEnabled: Bool?
    /// Example: "all"
    public var membersAllowedRepositoryCreationType: String?
    /// Example: true
    public var membersCanCreatePublicRepositories: Bool?
    /// Example: true
    public var membersCanCreatePrivateRepositories: Bool?
    /// Example: true
    public var membersCanCreateInternalRepositories: Bool?
    /// Example: true
    public var membersCanCreatePages: Bool?
    /// Example: true
    public var membersCanCreatePublicPages: Bool?
    /// Example: true
    public var membersCanCreatePrivatePages: Bool?
    /// Example: false
    public var membersCanForkPrivateRepositories: Bool?
    public var updatedAt: Date

    public struct Plan: Codable {
        public var name: String
        public var space: Int
        public var privateRepos: Int
        public var filledSeats: Int?
        public var seats: Int?

        public init(name: String, space: Int, privateRepos: Int, filledSeats: Int? = nil, seats: Int? = nil) {
            self.name = name
            self.space = space
            self.privateRepos = privateRepos
            self.filledSeats = filledSeats
            self.seats = seats
        }

        private enum CodingKeys: String, CodingKey {
            case name
            case space
            case privateRepos = "private_repos"
            case filledSeats = "filled_seats"
            case seats
        }
    }

    public init(login: String, id: Int, nodeID: String, url: URL, reposURL: URL, eventsURL: URL, hooksURL: String, issuesURL: String, membersURL: String, publicMembersURL: String, avatarURL: String, description: String? = nil, name: String? = nil, company: String? = nil, blog: URL? = nil, location: String? = nil, email: String? = nil, twitterUsername: String? = nil, isVerified: Bool? = nil, hasOrganizationProjects: Bool, hasRepositoryProjects: Bool, publicRepos: Int, publicGists: Int, followers: Int, following: Int, htmlURL: URL, createdAt: Date, type: String, totalPrivateRepos: Int? = nil, ownedPrivateRepos: Int? = nil, privateGists: Int? = nil, diskUsage: Int? = nil, collaborators: Int? = nil, billingEmail: String? = nil, plan: Plan? = nil, defaultRepositoryPermission: String? = nil, membersCanCreateRepositories: Bool? = nil, isTwoFactorRequirementEnabled: Bool? = nil, membersAllowedRepositoryCreationType: String? = nil, membersCanCreatePublicRepositories: Bool? = nil, membersCanCreatePrivateRepositories: Bool? = nil, membersCanCreateInternalRepositories: Bool? = nil, membersCanCreatePages: Bool? = nil, membersCanCreatePublicPages: Bool? = nil, membersCanCreatePrivatePages: Bool? = nil, membersCanForkPrivateRepositories: Bool? = nil, updatedAt: Date) {
        self.login = login
        self.id = id
        self.nodeID = nodeID
        self.url = url
        self.reposURL = reposURL
        self.eventsURL = eventsURL
        self.hooksURL = hooksURL
        self.issuesURL = issuesURL
        self.membersURL = membersURL
        self.publicMembersURL = publicMembersURL
        self.avatarURL = avatarURL
        self.description = description
        self.name = name
        self.company = company
        self.blog = blog
        self.location = location
        self.email = email
        self.twitterUsername = twitterUsername
        self.isVerified = isVerified
        self.hasOrganizationProjects = hasOrganizationProjects
        self.hasRepositoryProjects = hasRepositoryProjects
        self.publicRepos = publicRepos
        self.publicGists = publicGists
        self.followers = followers
        self.following = following
        self.htmlURL = htmlURL
        self.createdAt = createdAt
        self.type = type
        self.totalPrivateRepos = totalPrivateRepos
        self.ownedPrivateRepos = ownedPrivateRepos
        self.privateGists = privateGists
        self.diskUsage = diskUsage
        self.collaborators = collaborators
        self.billingEmail = billingEmail
        self.plan = plan
        self.defaultRepositoryPermission = defaultRepositoryPermission
        self.membersCanCreateRepositories = membersCanCreateRepositories
        self.isTwoFactorRequirementEnabled = isTwoFactorRequirementEnabled
        self.membersAllowedRepositoryCreationType = membersAllowedRepositoryCreationType
        self.membersCanCreatePublicRepositories = membersCanCreatePublicRepositories
        self.membersCanCreatePrivateRepositories = membersCanCreatePrivateRepositories
        self.membersCanCreateInternalRepositories = membersCanCreateInternalRepositories
        self.membersCanCreatePages = membersCanCreatePages
        self.membersCanCreatePublicPages = membersCanCreatePublicPages
        self.membersCanCreatePrivatePages = membersCanCreatePrivatePages
        self.membersCanForkPrivateRepositories = membersCanForkPrivateRepositories
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case login
        case id
        case nodeID = "node_id"
        case url
        case reposURL = "repos_url"
        case eventsURL = "events_url"
        case hooksURL = "hooks_url"
        case issuesURL = "issues_url"
        case membersURL = "members_url"
        case publicMembersURL = "public_members_url"
        case avatarURL = "avatar_url"
        case description
        case name
        case company
        case blog
        case location
        case email
        case twitterUsername = "twitter_username"
        case isVerified = "is_verified"
        case hasOrganizationProjects = "has_organization_projects"
        case hasRepositoryProjects = "has_repository_projects"
        case publicRepos = "public_repos"
        case publicGists = "public_gists"
        case followers
        case following
        case htmlURL = "html_url"
        case createdAt = "created_at"
        case type
        case totalPrivateRepos = "total_private_repos"
        case ownedPrivateRepos = "owned_private_repos"
        case privateGists = "private_gists"
        case diskUsage = "disk_usage"
        case collaborators
        case billingEmail = "billing_email"
        case plan
        case defaultRepositoryPermission = "default_repository_permission"
        case membersCanCreateRepositories = "members_can_create_repositories"
        case isTwoFactorRequirementEnabled = "two_factor_requirement_enabled"
        case membersAllowedRepositoryCreationType = "members_allowed_repository_creation_type"
        case membersCanCreatePublicRepositories = "members_can_create_public_repositories"
        case membersCanCreatePrivateRepositories = "members_can_create_private_repositories"
        case membersCanCreateInternalRepositories = "members_can_create_internal_repositories"
        case membersCanCreatePages = "members_can_create_pages"
        case membersCanCreatePublicPages = "members_can_create_public_pages"
        case membersCanCreatePrivatePages = "members_can_create_private_pages"
        case membersCanForkPrivateRepositories = "members_can_fork_private_repositories"
        case updatedAt = "updated_at"
    }
}
