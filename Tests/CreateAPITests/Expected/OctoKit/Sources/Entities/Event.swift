// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct Event: Codable {
    public var id: String
    public var type: String?
    public var actor: Actor
    public var repo: Repo
    /// Actor
    public var org: Actor?
    public var payload: Payload
    public var isPublic: Bool
    public var createdAt: Date?

    public struct Repo: Codable {
        public var id: Int
        public var name: String
        public var url: URL

        public init(id: Int, name: String, url: URL) {
            self.id = id
            self.name = name
            self.url = url
        }
    }

    public struct Payload: Codable {
        public var action: String?
        /// Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
        public var issue: Issue?
        /// Issue Comment
        ///
        /// Comments provide a way for people to collaborate on an issue.
        public var comment: IssueComment?
        public var pages: [Page]?

        public struct Page: Codable {
            public var pageName: String?
            public var title: String?
            public var summary: String?
            public var action: String?
            public var sha: String?
            public var htmlURL: String?

            public init(pageName: String? = nil, title: String? = nil, summary: String? = nil, action: String? = nil, sha: String? = nil, htmlURL: String? = nil) {
                self.pageName = pageName
                self.title = title
                self.summary = summary
                self.action = action
                self.sha = sha
                self.htmlURL = htmlURL
            }

            private enum CodingKeys: String, CodingKey {
                case pageName = "page_name"
                case title
                case summary
                case action
                case sha
                case htmlURL = "html_url"
            }
        }

        public init(action: String? = nil, issue: Issue? = nil, comment: IssueComment? = nil, pages: [Page]? = nil) {
            self.action = action
            self.issue = issue
            self.comment = comment
            self.pages = pages
        }
    }

    public init(id: String, type: String? = nil, actor: Actor, repo: Repo, org: Actor? = nil, payload: Payload, isPublic: Bool, createdAt: Date? = nil) {
        self.id = id
        self.type = type
        self.actor = actor
        self.repo = repo
        self.org = org
        self.payload = payload
        self.isPublic = isPublic
        self.createdAt = createdAt
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case type
        case actor
        case repo
        case org
        case payload
        case isPublic = "public"
        case createdAt = "created_at"
    }
}
