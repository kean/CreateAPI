// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct IssueEvent: Codable {
    public var id: Int
    /// Example: "MDEwOklzc3VlRXZlbnQx"
    public var nodeID: String
    /// Example: "https://api.github.com/repos/octocat/Hello-World/issues/events/1"
    public var url: URL
    /// Simple User
    public var actor: SimpleUser?
    /// Example: "closed"
    public var event: String
    /// Example: "6dcb09b5b57875f334f61aebed695e2e4193db5e"
    public var commitID: String?
    /// Example: "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e"
    public var commitURL: String?
    /// Example: "2011-04-14T16:00:49Z"
    public var createdAt: Date
    /// Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
    public var issue: Issue?
    /// Issue Event Label
    public var label: IssueEventLabel?
    /// Simple User
    public var assignee: SimpleUser?
    /// Simple User
    public var assigner: SimpleUser?
    /// Simple User
    public var reviewRequester: SimpleUser?
    /// Simple User
    public var requestedReviewer: SimpleUser?
    /// Team
    ///
    /// Groups of organization members that gives permissions on specified repositories.
    public var requestedTeam: Team?
    /// Issue Event Dismissed Review
    public var dismissedReview: IssueEventDismissedReview?
    /// Issue Event Milestone
    public var milestone: IssueEventMilestone?
    /// Issue Event Project Card
    public var projectCard: IssueEventProjectCard?
    /// Issue Event Rename
    public var rename: IssueEventRename?
    /// Author_association
    ///
    /// How the author is associated with the repository.
    ///
    /// Example: "OWNER"
    public var authorAssociation: AuthorAssociation?
    public var lockReason: String?
    /// GitHub app
    ///
    /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
    public var performedViaGithubApp: Integration?

    public init(id: Int, nodeID: String, url: URL, actor: SimpleUser? = nil, event: String, commitID: String? = nil, commitURL: String? = nil, createdAt: Date, issue: Issue? = nil, label: IssueEventLabel? = nil, assignee: SimpleUser? = nil, assigner: SimpleUser? = nil, reviewRequester: SimpleUser? = nil, requestedReviewer: SimpleUser? = nil, requestedTeam: Team? = nil, dismissedReview: IssueEventDismissedReview? = nil, milestone: IssueEventMilestone? = nil, projectCard: IssueEventProjectCard? = nil, rename: IssueEventRename? = nil, authorAssociation: AuthorAssociation? = nil, lockReason: String? = nil, performedViaGithubApp: Integration? = nil) {
        self.id = id
        self.nodeID = nodeID
        self.url = url
        self.actor = actor
        self.event = event
        self.commitID = commitID
        self.commitURL = commitURL
        self.createdAt = createdAt
        self.issue = issue
        self.label = label
        self.assignee = assignee
        self.assigner = assigner
        self.reviewRequester = reviewRequester
        self.requestedReviewer = requestedReviewer
        self.requestedTeam = requestedTeam
        self.dismissedReview = dismissedReview
        self.milestone = milestone
        self.projectCard = projectCard
        self.rename = rename
        self.authorAssociation = authorAssociation
        self.lockReason = lockReason
        self.performedViaGithubApp = performedViaGithubApp
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case nodeID = "node_id"
        case url
        case actor
        case event
        case commitID = "commit_id"
        case commitURL = "commit_url"
        case createdAt = "created_at"
        case issue
        case label
        case assignee
        case assigner
        case reviewRequester = "review_requester"
        case requestedReviewer = "requested_reviewer"
        case requestedTeam = "requested_team"
        case dismissedReview = "dismissed_review"
        case milestone
        case projectCard = "project_card"
        case rename
        case authorAssociation = "author_association"
        case lockReason = "lock_reason"
        case performedViaGithubApp = "performed_via_github_app"
    }
}
