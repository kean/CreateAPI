// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct Thread: Codable {
    public var id: String
    /// Minimal Repository
    public var repository: MinimalRepository
    public var subject: Subject
    public var reason: String
    public var isUnread: Bool
    public var updatedAt: String
    public var lastReadAt: String?
    public var url: String
    /// Example: "https://api.github.com/notifications/threads/2/subscription"
    public var subscriptionURL: String

    public struct Subject: Codable {
        public var title: String
        public var url: String
        public var latestCommentURL: String
        public var type: String

        public init(title: String, url: String, latestCommentURL: String, type: String) {
            self.title = title
            self.url = url
            self.latestCommentURL = latestCommentURL
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case title
            case url
            case latestCommentURL = "latest_comment_url"
            case type
        }
    }

    public init(id: String, repository: MinimalRepository, subject: Subject, reason: String, isUnread: Bool, updatedAt: String, lastReadAt: String? = nil, url: String, subscriptionURL: String) {
        self.id = id
        self.repository = repository
        self.subject = subject
        self.reason = reason
        self.isUnread = isUnread
        self.updatedAt = updatedAt
        self.lastReadAt = lastReadAt
        self.url = url
        self.subscriptionURL = subscriptionURL
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case repository
        case subject
        case reason
        case isUnread = "unread"
        case updatedAt = "updated_at"
        case lastReadAt = "last_read_at"
        case url
        case subscriptionURL = "subscription_url"
    }
}
