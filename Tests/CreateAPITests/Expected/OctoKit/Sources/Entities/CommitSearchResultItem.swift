// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct CommitSearchResultItem: Codable {
    public var url: URL
    public var sha: String
    public var htmlURL: URL
    public var commentsURL: URL
    public var commit: Commit
    /// Simple User
    public var author: SimpleUser?
    /// Git User
    ///
    /// Metaproperties for Git author/committer information.
    public var committer: GitUser?
    public var parents: [Parent]
    /// Minimal Repository
    public var repository: MinimalRepository
    public var score: Double
    public var nodeID: String
    /// Search Result Text Matches
    public var textMatches: [SearchResultTextMatch]?

    public struct Commit: Codable {
        public var author: Author
        /// Git User
        ///
        /// Metaproperties for Git author/committer information.
        public var committer: GitUser?
        public var commentCount: Int
        public var message: String
        public var tree: Tree
        public var url: URL
        public var verification: Verification?

        public struct Author: Codable {
            public var name: String
            public var email: String
            public var date: Date

            public init(name: String, email: String, date: Date) {
                self.name = name
                self.email = email
                self.date = date
            }
        }

        public struct Tree: Codable {
            public var sha: String
            public var url: URL

            public init(sha: String, url: URL) {
                self.sha = sha
                self.url = url
            }
        }

        public init(author: Author, committer: GitUser? = nil, commentCount: Int, message: String, tree: Tree, url: URL, verification: Verification? = nil) {
            self.author = author
            self.committer = committer
            self.commentCount = commentCount
            self.message = message
            self.tree = tree
            self.url = url
            self.verification = verification
        }

        private enum CodingKeys: String, CodingKey {
            case author
            case committer
            case commentCount = "comment_count"
            case message
            case tree
            case url
            case verification
        }
    }

    public struct Parent: Codable {
        public var url: String?
        public var htmlURL: String?
        public var sha: String?

        public init(url: String? = nil, htmlURL: String? = nil, sha: String? = nil) {
            self.url = url
            self.htmlURL = htmlURL
            self.sha = sha
        }

        private enum CodingKeys: String, CodingKey {
            case url
            case htmlURL = "html_url"
            case sha
        }
    }

    public init(url: URL, sha: String, htmlURL: URL, commentsURL: URL, commit: Commit, author: SimpleUser? = nil, committer: GitUser? = nil, parents: [Parent], repository: MinimalRepository, score: Double, nodeID: String, textMatches: [SearchResultTextMatch]? = nil) {
        self.url = url
        self.sha = sha
        self.htmlURL = htmlURL
        self.commentsURL = commentsURL
        self.commit = commit
        self.author = author
        self.committer = committer
        self.parents = parents
        self.repository = repository
        self.score = score
        self.nodeID = nodeID
        self.textMatches = textMatches
    }

    private enum CodingKeys: String, CodingKey {
        case url
        case sha
        case htmlURL = "html_url"
        case commentsURL = "comments_url"
        case commit
        case author
        case committer
        case parents
        case repository
        case score
        case nodeID = "node_id"
        case textMatches = "text_matches"
    }
}
