// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct TopicSearchResultItem: Codable {
    public var name: String
    public var displayName: String?
    public var shortDescription: String?
    public var description: String?
    public var createdBy: String?
    public var released: String?
    public var createdAt: Date
    public var updatedAt: Date
    public var isFeatured: Bool
    public var isCurated: Bool
    public var score: Double
    public var repositoryCount: Int?
    public var logoURL: URL?
    /// Search Result Text Matches
    public var textMatches: [SearchResultTextMatch]?
    public var related: [RelatedItem]?
    public var aliases: [Alias]?

    public struct RelatedItem: Codable {
        public var topicRelation: TopicRelation?

        public struct TopicRelation: Codable {
            public var id: Int?
            public var name: String?
            public var topicID: Int?
            public var relationType: String?

            public init(id: Int? = nil, name: String? = nil, topicID: Int? = nil, relationType: String? = nil) {
                self.id = id
                self.name = name
                self.topicID = topicID
                self.relationType = relationType
            }

            private enum CodingKeys: String, CodingKey {
                case id
                case name
                case topicID = "topic_id"
                case relationType = "relation_type"
            }
        }

        public init(topicRelation: TopicRelation? = nil) {
            self.topicRelation = topicRelation
        }

        private enum CodingKeys: String, CodingKey {
            case topicRelation = "topic_relation"
        }
    }

    public struct Alias: Codable {
        public var topicRelation: TopicRelation?

        public struct TopicRelation: Codable {
            public var id: Int?
            public var name: String?
            public var topicID: Int?
            public var relationType: String?

            public init(id: Int? = nil, name: String? = nil, topicID: Int? = nil, relationType: String? = nil) {
                self.id = id
                self.name = name
                self.topicID = topicID
                self.relationType = relationType
            }

            private enum CodingKeys: String, CodingKey {
                case id
                case name
                case topicID = "topic_id"
                case relationType = "relation_type"
            }
        }

        public init(topicRelation: TopicRelation? = nil) {
            self.topicRelation = topicRelation
        }

        private enum CodingKeys: String, CodingKey {
            case topicRelation = "topic_relation"
        }
    }

    public init(name: String, displayName: String? = nil, shortDescription: String? = nil, description: String? = nil, createdBy: String? = nil, released: String? = nil, createdAt: Date, updatedAt: Date, isFeatured: Bool, isCurated: Bool, score: Double, repositoryCount: Int? = nil, logoURL: URL? = nil, textMatches: [SearchResultTextMatch]? = nil, related: [RelatedItem]? = nil, aliases: [Alias]? = nil) {
        self.name = name
        self.displayName = displayName
        self.shortDescription = shortDescription
        self.description = description
        self.createdBy = createdBy
        self.released = released
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.isFeatured = isFeatured
        self.isCurated = isCurated
        self.score = score
        self.repositoryCount = repositoryCount
        self.logoURL = logoURL
        self.textMatches = textMatches
        self.related = related
        self.aliases = aliases
    }

    private enum CodingKeys: String, CodingKey {
        case name
        case displayName = "display_name"
        case shortDescription = "short_description"
        case description
        case createdBy = "created_by"
        case released
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case isFeatured = "featured"
        case isCurated = "curated"
        case score
        case repositoryCount = "repository_count"
        case logoURL = "logo_url"
        case textMatches = "text_matches"
        case related
        case aliases
    }
}
