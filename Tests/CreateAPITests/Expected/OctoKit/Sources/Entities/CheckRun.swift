// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// A check performed on the code of a given code change
public struct CheckRun: Codable {
    /// The id of the check.
    ///
    /// Example: 21
    public var id: Int
    /// The SHA of the commit that is being checked.
    ///
    /// Example: "009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d"
    public var headSha: String
    /// Example: "MDg6Q2hlY2tSdW40"
    public var nodeID: String
    /// Example: "42"
    public var externalID: String?
    /// Example: "https://api.github.com/repos/github/hello-world/check-runs/4"
    public var url: String
    /// Example: "https://github.com/github/hello-world/runs/4"
    public var htmlURL: String?
    /// Example: "https://example.com"
    public var detailsURL: String?
    /// The phase of the lifecycle that the check is currently in.
    ///
    /// Example: "queued"
    public var status: Status
    /// Example: "neutral"
    public var conclusion: Conclusion?
    /// Example: "2018-05-04T01:14:52Z"
    public var startedAt: Date?
    /// Example: "2018-05-04T01:14:52Z"
    public var completedAt: Date?
    public var output: Output
    /// The name of the check.
    ///
    /// Example: "test-coverage"
    public var name: String
    public var checkSuite: CheckSuite?
    /// GitHub app
    ///
    /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
    public var app: Integration?
    public var pullRequests: [PullRequestMinimal]
    /// A deployment created as the result of an Actions check run from a workflow that references an environment
    public var deployment: DeploymentSimple?

    /// The phase of the lifecycle that the check is currently in.
    ///
    /// Example: "queued"
    public enum Status: String, Codable, CaseIterable {
        case queued
        case inProgress = "in_progress"
        case completed
    }

    /// Example: "neutral"
    public enum Conclusion: String, Codable, CaseIterable {
        case success
        case failure
        case neutral
        case cancelled
        case skipped
        case timedOut = "timed_out"
        case actionRequired = "action_required"
    }

    public struct Output: Codable {
        public var title: String?
        public var summary: String?
        public var text: String?
        public var annotationsCount: Int
        public var annotationsURL: URL

        public init(title: String? = nil, summary: String? = nil, text: String? = nil, annotationsCount: Int, annotationsURL: URL) {
            self.title = title
            self.summary = summary
            self.text = text
            self.annotationsCount = annotationsCount
            self.annotationsURL = annotationsURL
        }

        private enum CodingKeys: String, CodingKey {
            case title
            case summary
            case text
            case annotationsCount = "annotations_count"
            case annotationsURL = "annotations_url"
        }
    }

    public struct CheckSuite: Codable {
        public var id: Int

        public init(id: Int) {
            self.id = id
        }
    }

    public init(id: Int, headSha: String, nodeID: String, externalID: String? = nil, url: String, htmlURL: String? = nil, detailsURL: String? = nil, status: Status, conclusion: Conclusion? = nil, startedAt: Date? = nil, completedAt: Date? = nil, output: Output, name: String, checkSuite: CheckSuite? = nil, app: Integration? = nil, pullRequests: [PullRequestMinimal], deployment: DeploymentSimple? = nil) {
        self.id = id
        self.headSha = headSha
        self.nodeID = nodeID
        self.externalID = externalID
        self.url = url
        self.htmlURL = htmlURL
        self.detailsURL = detailsURL
        self.status = status
        self.conclusion = conclusion
        self.startedAt = startedAt
        self.completedAt = completedAt
        self.output = output
        self.name = name
        self.checkSuite = checkSuite
        self.app = app
        self.pullRequests = pullRequests
        self.deployment = deployment
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case headSha = "head_sha"
        case nodeID = "node_id"
        case externalID = "external_id"
        case url
        case htmlURL = "html_url"
        case detailsURL = "details_url"
        case status
        case conclusion
        case startedAt = "started_at"
        case completedAt = "completed_at"
        case output
        case name
        case checkSuite = "check_suite"
        case app
        case pullRequests = "pull_requests"
        case deployment
    }
}
