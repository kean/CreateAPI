// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
public struct PullRequest: Codable {
    /// Example: "https://api.github.com/repos/octocat/Hello-World/pulls/1347"
    public var url: URL
    public var id: Int
    /// Example: "MDExOlB1bGxSZXF1ZXN0MQ=="
    public var nodeID: String
    /// Example: "https://github.com/octocat/Hello-World/pull/1347"
    public var htmlURL: URL
    /// Example: "https://github.com/octocat/Hello-World/pull/1347.diff"
    public var diffURL: URL
    /// Example: "https://github.com/octocat/Hello-World/pull/1347.patch"
    public var patchURL: URL
    /// Example: "https://api.github.com/repos/octocat/Hello-World/issues/1347"
    public var issueURL: URL
    /// Example: "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits"
    public var commitsURL: URL
    /// Example: "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments"
    public var reviewCommentsURL: URL
    /// Example: "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}"
    public var reviewCommentURL: String
    /// Example: "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments"
    public var commentsURL: URL
    /// Example: "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e"
    public var statusesURL: URL
    /// Number uniquely identifying the pull request within its repository.
    ///
    /// Example: 42
    public var number: Int
    /// State of this Pull Request. Either `open` or `closed`.
    ///
    /// Example: "open"
    public var state: State
    /// Example: true
    public var isLocked: Bool
    /// The title of the pull request.
    ///
    /// Example: "Amazing new feature"
    public var title: String
    /// Simple User
    public var user: SimpleUser?
    /// Example: "Please pull these awesome changes"
    public var body: String?
    public var labels: [Label]
    /// A collection of related issues and pull requests.
    public var milestone: Milestone?
    /// Example: "too heated"
    public var activeLockReason: String?
    /// Example: "2011-01-26T19:01:12Z"
    public var createdAt: Date
    /// Example: "2011-01-26T19:01:12Z"
    public var updatedAt: Date
    /// Example: "2011-01-26T19:01:12Z"
    public var closedAt: Date?
    /// Example: "2011-01-26T19:01:12Z"
    public var mergedAt: Date?
    /// Example: "e5bd3914e2e596debea16f433f57875b5b90bcd6"
    public var mergeCommitSha: String?
    /// Simple User
    public var assignee: SimpleUser?
    public var assignees: [SimpleUser]?
    public var requestedReviewers: [SimpleUser]?
    public var requestedTeams: [TeamSimple]?
    public var head: Head
    public var base: Base
    public var links: Links
    /// Author_association
    ///
    /// How the author is associated with the repository.
    ///
    /// Example: "OWNER"
    public var authorAssociation: AuthorAssociation
    /// The status of auto merging a pull request.
    public var autoMerge: AutoMerge?
    /// Indicates whether or not the pull request is a draft.
    ///
    /// Example: false
    public var isDraft: Bool?
    public var isMerged: Bool
    /// Example: true
    public var isMergeable: Bool?
    /// Example: true
    public var isRebaseable: Bool?
    /// Example: "clean"
    public var mergeableState: String
    /// Simple User
    public var mergedBy: SimpleUser?
    /// Example: 10
    public var comments: Int
    public var reviewComments: Int
    /// Indicates whether maintainers can modify the pull request.
    ///
    /// Example: true
    public var maintainerCanModify: Bool
    public var commits: Int
    /// Example: 100
    public var additions: Int
    public var deletions: Int
    public var changedFiles: Int

    /// State of this Pull Request. Either `open` or `closed`.
    ///
    /// Example: "open"
    public enum State: String, Codable, CaseIterable {
        case `open`
        case closed
    }

    public struct Label: Codable {
        public var id: Int
        public var nodeID: String
        public var url: String
        public var name: String
        public var description: String?
        public var color: String
        public var isDefault: Bool

        public init(id: Int, nodeID: String, url: String, name: String, description: String? = nil, color: String, isDefault: Bool) {
            self.id = id
            self.nodeID = nodeID
            self.url = url
            self.name = name
            self.description = description
            self.color = color
            self.isDefault = isDefault
        }

        private enum CodingKeys: String, CodingKey {
            case id
            case nodeID = "node_id"
            case url
            case name
            case description
            case color
            case isDefault = "default"
        }
    }

    public struct Head: Codable {
        public var label: String
        public var ref: String
        public var repo: Repo?
        public var sha: String
        public var user: User

        public struct Repo: Codable {
            public var archiveURL: String
            public var assigneesURL: String
            public var blobsURL: String
            public var branchesURL: String
            public var collaboratorsURL: String
            public var commentsURL: String
            public var commitsURL: String
            public var compareURL: String
            public var contentsURL: String
            public var contributorsURL: URL
            public var deploymentsURL: URL
            public var description: String?
            public var downloadsURL: URL
            public var eventsURL: URL
            public var isFork: Bool
            public var forksURL: URL
            public var fullName: String
            public var gitCommitsURL: String
            public var gitRefsURL: String
            public var gitTagsURL: String
            public var hooksURL: URL
            public var htmlURL: URL
            public var id: Int
            public var nodeID: String
            public var issueCommentURL: String
            public var issueEventsURL: String
            public var issuesURL: String
            public var keysURL: String
            public var labelsURL: String
            public var languagesURL: URL
            public var mergesURL: URL
            public var milestonesURL: String
            public var name: String
            public var notificationsURL: String
            public var owner: Owner
            public var isPrivate: Bool
            public var pullsURL: String
            public var releasesURL: String
            public var stargazersURL: URL
            public var statusesURL: String
            public var subscribersURL: URL
            public var subscriptionURL: URL
            public var tagsURL: URL
            public var teamsURL: URL
            public var treesURL: String
            public var url: URL
            public var cloneURL: String
            public var defaultBranch: String
            public var forks: Int
            public var forksCount: Int
            public var gitURL: String
            public var hasDownloads: Bool
            public var hasIssues: Bool
            public var hasProjects: Bool
            public var hasWiki: Bool
            public var hasPages: Bool
            public var homepage: URL?
            public var language: String?
            public var masterBranch: String?
            public var isArchived: Bool
            public var isDisabled: Bool
            /// The repository visibility: public, private, or internal.
            public var visibility: String?
            public var mirrorURL: URL?
            public var openIssues: Int
            public var openIssuesCount: Int
            public var permissions: Permissions?
            public var tempCloneToken: String?
            public var allowMergeCommit: Bool?
            public var allowSquashMerge: Bool?
            public var allowRebaseMerge: Bool?
            public var license: License?
            public var pushedAt: Date
            public var size: Int
            public var sshURL: String
            public var stargazersCount: Int
            public var svnURL: URL
            public var topics: [String]?
            public var watchers: Int
            public var watchersCount: Int
            public var createdAt: Date
            public var updatedAt: Date
            public var allowForking: Bool?
            public var isTemplate: Bool?

            public struct Owner: Codable {
                public var avatarURL: URL
                public var eventsURL: String
                public var followersURL: URL
                public var followingURL: String
                public var gistsURL: String
                public var gravatarID: String?
                public var htmlURL: URL
                public var id: Int
                public var nodeID: String
                public var login: String
                public var organizationsURL: URL
                public var receivedEventsURL: URL
                public var reposURL: URL
                public var isSiteAdmin: Bool
                public var starredURL: String
                public var subscriptionsURL: URL
                public var type: String
                public var url: URL

                public init(avatarURL: URL, eventsURL: String, followersURL: URL, followingURL: String, gistsURL: String, gravatarID: String? = nil, htmlURL: URL, id: Int, nodeID: String, login: String, organizationsURL: URL, receivedEventsURL: URL, reposURL: URL, isSiteAdmin: Bool, starredURL: String, subscriptionsURL: URL, type: String, url: URL) {
                    self.avatarURL = avatarURL
                    self.eventsURL = eventsURL
                    self.followersURL = followersURL
                    self.followingURL = followingURL
                    self.gistsURL = gistsURL
                    self.gravatarID = gravatarID
                    self.htmlURL = htmlURL
                    self.id = id
                    self.nodeID = nodeID
                    self.login = login
                    self.organizationsURL = organizationsURL
                    self.receivedEventsURL = receivedEventsURL
                    self.reposURL = reposURL
                    self.isSiteAdmin = isSiteAdmin
                    self.starredURL = starredURL
                    self.subscriptionsURL = subscriptionsURL
                    self.type = type
                    self.url = url
                }

                private enum CodingKeys: String, CodingKey {
                    case avatarURL = "avatar_url"
                    case eventsURL = "events_url"
                    case followersURL = "followers_url"
                    case followingURL = "following_url"
                    case gistsURL = "gists_url"
                    case gravatarID = "gravatar_id"
                    case htmlURL = "html_url"
                    case id
                    case nodeID = "node_id"
                    case login
                    case organizationsURL = "organizations_url"
                    case receivedEventsURL = "received_events_url"
                    case reposURL = "repos_url"
                    case isSiteAdmin = "site_admin"
                    case starredURL = "starred_url"
                    case subscriptionsURL = "subscriptions_url"
                    case type
                    case url
                }
            }

            public struct Permissions: Codable {
                public var isAdmin: Bool
                public var isMaintain: Bool?
                public var isPush: Bool
                public var isTriage: Bool?
                public var isPull: Bool

                public init(isAdmin: Bool, isMaintain: Bool? = nil, isPush: Bool, isTriage: Bool? = nil, isPull: Bool) {
                    self.isAdmin = isAdmin
                    self.isMaintain = isMaintain
                    self.isPush = isPush
                    self.isTriage = isTriage
                    self.isPull = isPull
                }

                private enum CodingKeys: String, CodingKey {
                    case isAdmin = "admin"
                    case isMaintain = "maintain"
                    case isPush = "push"
                    case isTriage = "triage"
                    case isPull = "pull"
                }
            }

            public struct License: Codable {
                public var key: String
                public var name: String
                public var url: URL?
                public var spdxID: String?
                public var nodeID: String

                public init(key: String, name: String, url: URL? = nil, spdxID: String? = nil, nodeID: String) {
                    self.key = key
                    self.name = name
                    self.url = url
                    self.spdxID = spdxID
                    self.nodeID = nodeID
                }

                private enum CodingKeys: String, CodingKey {
                    case key
                    case name
                    case url
                    case spdxID = "spdx_id"
                    case nodeID = "node_id"
                }
            }

            public init(archiveURL: String, assigneesURL: String, blobsURL: String, branchesURL: String, collaboratorsURL: String, commentsURL: String, commitsURL: String, compareURL: String, contentsURL: String, contributorsURL: URL, deploymentsURL: URL, description: String? = nil, downloadsURL: URL, eventsURL: URL, isFork: Bool, forksURL: URL, fullName: String, gitCommitsURL: String, gitRefsURL: String, gitTagsURL: String, hooksURL: URL, htmlURL: URL, id: Int, nodeID: String, issueCommentURL: String, issueEventsURL: String, issuesURL: String, keysURL: String, labelsURL: String, languagesURL: URL, mergesURL: URL, milestonesURL: String, name: String, notificationsURL: String, owner: Owner, isPrivate: Bool, pullsURL: String, releasesURL: String, stargazersURL: URL, statusesURL: String, subscribersURL: URL, subscriptionURL: URL, tagsURL: URL, teamsURL: URL, treesURL: String, url: URL, cloneURL: String, defaultBranch: String, forks: Int, forksCount: Int, gitURL: String, hasDownloads: Bool, hasIssues: Bool, hasProjects: Bool, hasWiki: Bool, hasPages: Bool, homepage: URL? = nil, language: String? = nil, masterBranch: String? = nil, isArchived: Bool, isDisabled: Bool, visibility: String? = nil, mirrorURL: URL? = nil, openIssues: Int, openIssuesCount: Int, permissions: Permissions? = nil, tempCloneToken: String? = nil, allowMergeCommit: Bool? = nil, allowSquashMerge: Bool? = nil, allowRebaseMerge: Bool? = nil, license: License? = nil, pushedAt: Date, size: Int, sshURL: String, stargazersCount: Int, svnURL: URL, topics: [String]? = nil, watchers: Int, watchersCount: Int, createdAt: Date, updatedAt: Date, allowForking: Bool? = nil, isTemplate: Bool? = nil) {
                self.archiveURL = archiveURL
                self.assigneesURL = assigneesURL
                self.blobsURL = blobsURL
                self.branchesURL = branchesURL
                self.collaboratorsURL = collaboratorsURL
                self.commentsURL = commentsURL
                self.commitsURL = commitsURL
                self.compareURL = compareURL
                self.contentsURL = contentsURL
                self.contributorsURL = contributorsURL
                self.deploymentsURL = deploymentsURL
                self.description = description
                self.downloadsURL = downloadsURL
                self.eventsURL = eventsURL
                self.isFork = isFork
                self.forksURL = forksURL
                self.fullName = fullName
                self.gitCommitsURL = gitCommitsURL
                self.gitRefsURL = gitRefsURL
                self.gitTagsURL = gitTagsURL
                self.hooksURL = hooksURL
                self.htmlURL = htmlURL
                self.id = id
                self.nodeID = nodeID
                self.issueCommentURL = issueCommentURL
                self.issueEventsURL = issueEventsURL
                self.issuesURL = issuesURL
                self.keysURL = keysURL
                self.labelsURL = labelsURL
                self.languagesURL = languagesURL
                self.mergesURL = mergesURL
                self.milestonesURL = milestonesURL
                self.name = name
                self.notificationsURL = notificationsURL
                self.owner = owner
                self.isPrivate = isPrivate
                self.pullsURL = pullsURL
                self.releasesURL = releasesURL
                self.stargazersURL = stargazersURL
                self.statusesURL = statusesURL
                self.subscribersURL = subscribersURL
                self.subscriptionURL = subscriptionURL
                self.tagsURL = tagsURL
                self.teamsURL = teamsURL
                self.treesURL = treesURL
                self.url = url
                self.cloneURL = cloneURL
                self.defaultBranch = defaultBranch
                self.forks = forks
                self.forksCount = forksCount
                self.gitURL = gitURL
                self.hasDownloads = hasDownloads
                self.hasIssues = hasIssues
                self.hasProjects = hasProjects
                self.hasWiki = hasWiki
                self.hasPages = hasPages
                self.homepage = homepage
                self.language = language
                self.masterBranch = masterBranch
                self.isArchived = isArchived
                self.isDisabled = isDisabled
                self.visibility = visibility
                self.mirrorURL = mirrorURL
                self.openIssues = openIssues
                self.openIssuesCount = openIssuesCount
                self.permissions = permissions
                self.tempCloneToken = tempCloneToken
                self.allowMergeCommit = allowMergeCommit
                self.allowSquashMerge = allowSquashMerge
                self.allowRebaseMerge = allowRebaseMerge
                self.license = license
                self.pushedAt = pushedAt
                self.size = size
                self.sshURL = sshURL
                self.stargazersCount = stargazersCount
                self.svnURL = svnURL
                self.topics = topics
                self.watchers = watchers
                self.watchersCount = watchersCount
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.allowForking = allowForking
                self.isTemplate = isTemplate
            }

            private enum CodingKeys: String, CodingKey {
                case archiveURL = "archive_url"
                case assigneesURL = "assignees_url"
                case blobsURL = "blobs_url"
                case branchesURL = "branches_url"
                case collaboratorsURL = "collaborators_url"
                case commentsURL = "comments_url"
                case commitsURL = "commits_url"
                case compareURL = "compare_url"
                case contentsURL = "contents_url"
                case contributorsURL = "contributors_url"
                case deploymentsURL = "deployments_url"
                case description
                case downloadsURL = "downloads_url"
                case eventsURL = "events_url"
                case isFork = "fork"
                case forksURL = "forks_url"
                case fullName = "full_name"
                case gitCommitsURL = "git_commits_url"
                case gitRefsURL = "git_refs_url"
                case gitTagsURL = "git_tags_url"
                case hooksURL = "hooks_url"
                case htmlURL = "html_url"
                case id
                case nodeID = "node_id"
                case issueCommentURL = "issue_comment_url"
                case issueEventsURL = "issue_events_url"
                case issuesURL = "issues_url"
                case keysURL = "keys_url"
                case labelsURL = "labels_url"
                case languagesURL = "languages_url"
                case mergesURL = "merges_url"
                case milestonesURL = "milestones_url"
                case name
                case notificationsURL = "notifications_url"
                case owner
                case isPrivate = "private"
                case pullsURL = "pulls_url"
                case releasesURL = "releases_url"
                case stargazersURL = "stargazers_url"
                case statusesURL = "statuses_url"
                case subscribersURL = "subscribers_url"
                case subscriptionURL = "subscription_url"
                case tagsURL = "tags_url"
                case teamsURL = "teams_url"
                case treesURL = "trees_url"
                case url
                case cloneURL = "clone_url"
                case defaultBranch = "default_branch"
                case forks
                case forksCount = "forks_count"
                case gitURL = "git_url"
                case hasDownloads = "has_downloads"
                case hasIssues = "has_issues"
                case hasProjects = "has_projects"
                case hasWiki = "has_wiki"
                case hasPages = "has_pages"
                case homepage
                case language
                case masterBranch = "master_branch"
                case isArchived = "archived"
                case isDisabled = "disabled"
                case visibility
                case mirrorURL = "mirror_url"
                case openIssues = "open_issues"
                case openIssuesCount = "open_issues_count"
                case permissions
                case tempCloneToken = "temp_clone_token"
                case allowMergeCommit = "allow_merge_commit"
                case allowSquashMerge = "allow_squash_merge"
                case allowRebaseMerge = "allow_rebase_merge"
                case license
                case pushedAt = "pushed_at"
                case size
                case sshURL = "ssh_url"
                case stargazersCount = "stargazers_count"
                case svnURL = "svn_url"
                case topics
                case watchers
                case watchersCount = "watchers_count"
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case allowForking = "allow_forking"
                case isTemplate = "is_template"
            }
        }

        public struct User: Codable {
            public var avatarURL: URL
            public var eventsURL: String
            public var followersURL: URL
            public var followingURL: String
            public var gistsURL: String
            public var gravatarID: String?
            public var htmlURL: URL
            public var id: Int
            public var nodeID: String
            public var login: String
            public var organizationsURL: URL
            public var receivedEventsURL: URL
            public var reposURL: URL
            public var isSiteAdmin: Bool
            public var starredURL: String
            public var subscriptionsURL: URL
            public var type: String
            public var url: URL

            public init(avatarURL: URL, eventsURL: String, followersURL: URL, followingURL: String, gistsURL: String, gravatarID: String? = nil, htmlURL: URL, id: Int, nodeID: String, login: String, organizationsURL: URL, receivedEventsURL: URL, reposURL: URL, isSiteAdmin: Bool, starredURL: String, subscriptionsURL: URL, type: String, url: URL) {
                self.avatarURL = avatarURL
                self.eventsURL = eventsURL
                self.followersURL = followersURL
                self.followingURL = followingURL
                self.gistsURL = gistsURL
                self.gravatarID = gravatarID
                self.htmlURL = htmlURL
                self.id = id
                self.nodeID = nodeID
                self.login = login
                self.organizationsURL = organizationsURL
                self.receivedEventsURL = receivedEventsURL
                self.reposURL = reposURL
                self.isSiteAdmin = isSiteAdmin
                self.starredURL = starredURL
                self.subscriptionsURL = subscriptionsURL
                self.type = type
                self.url = url
            }

            private enum CodingKeys: String, CodingKey {
                case avatarURL = "avatar_url"
                case eventsURL = "events_url"
                case followersURL = "followers_url"
                case followingURL = "following_url"
                case gistsURL = "gists_url"
                case gravatarID = "gravatar_id"
                case htmlURL = "html_url"
                case id
                case nodeID = "node_id"
                case login
                case organizationsURL = "organizations_url"
                case receivedEventsURL = "received_events_url"
                case reposURL = "repos_url"
                case isSiteAdmin = "site_admin"
                case starredURL = "starred_url"
                case subscriptionsURL = "subscriptions_url"
                case type
                case url
            }
        }

        public init(label: String, ref: String, repo: Repo? = nil, sha: String, user: User) {
            self.label = label
            self.ref = ref
            self.repo = repo
            self.sha = sha
            self.user = user
        }
    }

    public struct Base: Codable {
        public var label: String
        public var ref: String
        public var repo: Repo
        public var sha: String
        public var user: User

        public struct Repo: Codable {
            public var archiveURL: String
            public var assigneesURL: String
            public var blobsURL: String
            public var branchesURL: String
            public var collaboratorsURL: String
            public var commentsURL: String
            public var commitsURL: String
            public var compareURL: String
            public var contentsURL: String
            public var contributorsURL: URL
            public var deploymentsURL: URL
            public var description: String?
            public var downloadsURL: URL
            public var eventsURL: URL
            public var isFork: Bool
            public var forksURL: URL
            public var fullName: String
            public var gitCommitsURL: String
            public var gitRefsURL: String
            public var gitTagsURL: String
            public var hooksURL: URL
            public var htmlURL: URL
            public var id: Int
            public var isTemplate: Bool?
            public var nodeID: String
            public var issueCommentURL: String
            public var issueEventsURL: String
            public var issuesURL: String
            public var keysURL: String
            public var labelsURL: String
            public var languagesURL: URL
            public var mergesURL: URL
            public var milestonesURL: String
            public var name: String
            public var notificationsURL: String
            public var owner: Owner
            public var isPrivate: Bool
            public var pullsURL: String
            public var releasesURL: String
            public var stargazersURL: URL
            public var statusesURL: String
            public var subscribersURL: URL
            public var subscriptionURL: URL
            public var tagsURL: URL
            public var teamsURL: URL
            public var treesURL: String
            public var url: URL
            public var cloneURL: String
            public var defaultBranch: String
            public var forks: Int
            public var forksCount: Int
            public var gitURL: String
            public var hasDownloads: Bool
            public var hasIssues: Bool
            public var hasProjects: Bool
            public var hasWiki: Bool
            public var hasPages: Bool
            public var homepage: URL?
            public var language: String?
            public var masterBranch: String?
            public var isArchived: Bool
            public var isDisabled: Bool
            /// The repository visibility: public, private, or internal.
            public var visibility: String?
            public var mirrorURL: URL?
            public var openIssues: Int
            public var openIssuesCount: Int
            public var permissions: Permissions?
            public var tempCloneToken: String?
            public var allowMergeCommit: Bool?
            public var allowSquashMerge: Bool?
            public var allowRebaseMerge: Bool?
            /// License Simple
            public var license: LicenseSimple?
            public var pushedAt: Date
            public var size: Int
            public var sshURL: String
            public var stargazersCount: Int
            public var svnURL: URL
            public var topics: [String]?
            public var watchers: Int
            public var watchersCount: Int
            public var createdAt: Date
            public var updatedAt: Date
            public var allowForking: Bool?

            public struct Owner: Codable {
                public var avatarURL: URL
                public var eventsURL: String
                public var followersURL: URL
                public var followingURL: String
                public var gistsURL: String
                public var gravatarID: String?
                public var htmlURL: URL
                public var id: Int
                public var nodeID: String
                public var login: String
                public var organizationsURL: URL
                public var receivedEventsURL: URL
                public var reposURL: URL
                public var isSiteAdmin: Bool
                public var starredURL: String
                public var subscriptionsURL: URL
                public var type: String
                public var url: URL

                public init(avatarURL: URL, eventsURL: String, followersURL: URL, followingURL: String, gistsURL: String, gravatarID: String? = nil, htmlURL: URL, id: Int, nodeID: String, login: String, organizationsURL: URL, receivedEventsURL: URL, reposURL: URL, isSiteAdmin: Bool, starredURL: String, subscriptionsURL: URL, type: String, url: URL) {
                    self.avatarURL = avatarURL
                    self.eventsURL = eventsURL
                    self.followersURL = followersURL
                    self.followingURL = followingURL
                    self.gistsURL = gistsURL
                    self.gravatarID = gravatarID
                    self.htmlURL = htmlURL
                    self.id = id
                    self.nodeID = nodeID
                    self.login = login
                    self.organizationsURL = organizationsURL
                    self.receivedEventsURL = receivedEventsURL
                    self.reposURL = reposURL
                    self.isSiteAdmin = isSiteAdmin
                    self.starredURL = starredURL
                    self.subscriptionsURL = subscriptionsURL
                    self.type = type
                    self.url = url
                }

                private enum CodingKeys: String, CodingKey {
                    case avatarURL = "avatar_url"
                    case eventsURL = "events_url"
                    case followersURL = "followers_url"
                    case followingURL = "following_url"
                    case gistsURL = "gists_url"
                    case gravatarID = "gravatar_id"
                    case htmlURL = "html_url"
                    case id
                    case nodeID = "node_id"
                    case login
                    case organizationsURL = "organizations_url"
                    case receivedEventsURL = "received_events_url"
                    case reposURL = "repos_url"
                    case isSiteAdmin = "site_admin"
                    case starredURL = "starred_url"
                    case subscriptionsURL = "subscriptions_url"
                    case type
                    case url
                }
            }

            public struct Permissions: Codable {
                public var isAdmin: Bool
                public var isMaintain: Bool?
                public var isPush: Bool
                public var isTriage: Bool?
                public var isPull: Bool

                public init(isAdmin: Bool, isMaintain: Bool? = nil, isPush: Bool, isTriage: Bool? = nil, isPull: Bool) {
                    self.isAdmin = isAdmin
                    self.isMaintain = isMaintain
                    self.isPush = isPush
                    self.isTriage = isTriage
                    self.isPull = isPull
                }

                private enum CodingKeys: String, CodingKey {
                    case isAdmin = "admin"
                    case isMaintain = "maintain"
                    case isPush = "push"
                    case isTriage = "triage"
                    case isPull = "pull"
                }
            }

            public init(archiveURL: String, assigneesURL: String, blobsURL: String, branchesURL: String, collaboratorsURL: String, commentsURL: String, commitsURL: String, compareURL: String, contentsURL: String, contributorsURL: URL, deploymentsURL: URL, description: String? = nil, downloadsURL: URL, eventsURL: URL, isFork: Bool, forksURL: URL, fullName: String, gitCommitsURL: String, gitRefsURL: String, gitTagsURL: String, hooksURL: URL, htmlURL: URL, id: Int, isTemplate: Bool? = nil, nodeID: String, issueCommentURL: String, issueEventsURL: String, issuesURL: String, keysURL: String, labelsURL: String, languagesURL: URL, mergesURL: URL, milestonesURL: String, name: String, notificationsURL: String, owner: Owner, isPrivate: Bool, pullsURL: String, releasesURL: String, stargazersURL: URL, statusesURL: String, subscribersURL: URL, subscriptionURL: URL, tagsURL: URL, teamsURL: URL, treesURL: String, url: URL, cloneURL: String, defaultBranch: String, forks: Int, forksCount: Int, gitURL: String, hasDownloads: Bool, hasIssues: Bool, hasProjects: Bool, hasWiki: Bool, hasPages: Bool, homepage: URL? = nil, language: String? = nil, masterBranch: String? = nil, isArchived: Bool, isDisabled: Bool, visibility: String? = nil, mirrorURL: URL? = nil, openIssues: Int, openIssuesCount: Int, permissions: Permissions? = nil, tempCloneToken: String? = nil, allowMergeCommit: Bool? = nil, allowSquashMerge: Bool? = nil, allowRebaseMerge: Bool? = nil, license: LicenseSimple? = nil, pushedAt: Date, size: Int, sshURL: String, stargazersCount: Int, svnURL: URL, topics: [String]? = nil, watchers: Int, watchersCount: Int, createdAt: Date, updatedAt: Date, allowForking: Bool? = nil) {
                self.archiveURL = archiveURL
                self.assigneesURL = assigneesURL
                self.blobsURL = blobsURL
                self.branchesURL = branchesURL
                self.collaboratorsURL = collaboratorsURL
                self.commentsURL = commentsURL
                self.commitsURL = commitsURL
                self.compareURL = compareURL
                self.contentsURL = contentsURL
                self.contributorsURL = contributorsURL
                self.deploymentsURL = deploymentsURL
                self.description = description
                self.downloadsURL = downloadsURL
                self.eventsURL = eventsURL
                self.isFork = isFork
                self.forksURL = forksURL
                self.fullName = fullName
                self.gitCommitsURL = gitCommitsURL
                self.gitRefsURL = gitRefsURL
                self.gitTagsURL = gitTagsURL
                self.hooksURL = hooksURL
                self.htmlURL = htmlURL
                self.id = id
                self.isTemplate = isTemplate
                self.nodeID = nodeID
                self.issueCommentURL = issueCommentURL
                self.issueEventsURL = issueEventsURL
                self.issuesURL = issuesURL
                self.keysURL = keysURL
                self.labelsURL = labelsURL
                self.languagesURL = languagesURL
                self.mergesURL = mergesURL
                self.milestonesURL = milestonesURL
                self.name = name
                self.notificationsURL = notificationsURL
                self.owner = owner
                self.isPrivate = isPrivate
                self.pullsURL = pullsURL
                self.releasesURL = releasesURL
                self.stargazersURL = stargazersURL
                self.statusesURL = statusesURL
                self.subscribersURL = subscribersURL
                self.subscriptionURL = subscriptionURL
                self.tagsURL = tagsURL
                self.teamsURL = teamsURL
                self.treesURL = treesURL
                self.url = url
                self.cloneURL = cloneURL
                self.defaultBranch = defaultBranch
                self.forks = forks
                self.forksCount = forksCount
                self.gitURL = gitURL
                self.hasDownloads = hasDownloads
                self.hasIssues = hasIssues
                self.hasProjects = hasProjects
                self.hasWiki = hasWiki
                self.hasPages = hasPages
                self.homepage = homepage
                self.language = language
                self.masterBranch = masterBranch
                self.isArchived = isArchived
                self.isDisabled = isDisabled
                self.visibility = visibility
                self.mirrorURL = mirrorURL
                self.openIssues = openIssues
                self.openIssuesCount = openIssuesCount
                self.permissions = permissions
                self.tempCloneToken = tempCloneToken
                self.allowMergeCommit = allowMergeCommit
                self.allowSquashMerge = allowSquashMerge
                self.allowRebaseMerge = allowRebaseMerge
                self.license = license
                self.pushedAt = pushedAt
                self.size = size
                self.sshURL = sshURL
                self.stargazersCount = stargazersCount
                self.svnURL = svnURL
                self.topics = topics
                self.watchers = watchers
                self.watchersCount = watchersCount
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.allowForking = allowForking
            }

            private enum CodingKeys: String, CodingKey {
                case archiveURL = "archive_url"
                case assigneesURL = "assignees_url"
                case blobsURL = "blobs_url"
                case branchesURL = "branches_url"
                case collaboratorsURL = "collaborators_url"
                case commentsURL = "comments_url"
                case commitsURL = "commits_url"
                case compareURL = "compare_url"
                case contentsURL = "contents_url"
                case contributorsURL = "contributors_url"
                case deploymentsURL = "deployments_url"
                case description
                case downloadsURL = "downloads_url"
                case eventsURL = "events_url"
                case isFork = "fork"
                case forksURL = "forks_url"
                case fullName = "full_name"
                case gitCommitsURL = "git_commits_url"
                case gitRefsURL = "git_refs_url"
                case gitTagsURL = "git_tags_url"
                case hooksURL = "hooks_url"
                case htmlURL = "html_url"
                case id
                case isTemplate = "is_template"
                case nodeID = "node_id"
                case issueCommentURL = "issue_comment_url"
                case issueEventsURL = "issue_events_url"
                case issuesURL = "issues_url"
                case keysURL = "keys_url"
                case labelsURL = "labels_url"
                case languagesURL = "languages_url"
                case mergesURL = "merges_url"
                case milestonesURL = "milestones_url"
                case name
                case notificationsURL = "notifications_url"
                case owner
                case isPrivate = "private"
                case pullsURL = "pulls_url"
                case releasesURL = "releases_url"
                case stargazersURL = "stargazers_url"
                case statusesURL = "statuses_url"
                case subscribersURL = "subscribers_url"
                case subscriptionURL = "subscription_url"
                case tagsURL = "tags_url"
                case teamsURL = "teams_url"
                case treesURL = "trees_url"
                case url
                case cloneURL = "clone_url"
                case defaultBranch = "default_branch"
                case forks
                case forksCount = "forks_count"
                case gitURL = "git_url"
                case hasDownloads = "has_downloads"
                case hasIssues = "has_issues"
                case hasProjects = "has_projects"
                case hasWiki = "has_wiki"
                case hasPages = "has_pages"
                case homepage
                case language
                case masterBranch = "master_branch"
                case isArchived = "archived"
                case isDisabled = "disabled"
                case visibility
                case mirrorURL = "mirror_url"
                case openIssues = "open_issues"
                case openIssuesCount = "open_issues_count"
                case permissions
                case tempCloneToken = "temp_clone_token"
                case allowMergeCommit = "allow_merge_commit"
                case allowSquashMerge = "allow_squash_merge"
                case allowRebaseMerge = "allow_rebase_merge"
                case license
                case pushedAt = "pushed_at"
                case size
                case sshURL = "ssh_url"
                case stargazersCount = "stargazers_count"
                case svnURL = "svn_url"
                case topics
                case watchers
                case watchersCount = "watchers_count"
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case allowForking = "allow_forking"
            }
        }

        public struct User: Codable {
            public var avatarURL: URL
            public var eventsURL: String
            public var followersURL: URL
            public var followingURL: String
            public var gistsURL: String
            public var gravatarID: String?
            public var htmlURL: URL
            public var id: Int
            public var nodeID: String
            public var login: String
            public var organizationsURL: URL
            public var receivedEventsURL: URL
            public var reposURL: URL
            public var isSiteAdmin: Bool
            public var starredURL: String
            public var subscriptionsURL: URL
            public var type: String
            public var url: URL

            public init(avatarURL: URL, eventsURL: String, followersURL: URL, followingURL: String, gistsURL: String, gravatarID: String? = nil, htmlURL: URL, id: Int, nodeID: String, login: String, organizationsURL: URL, receivedEventsURL: URL, reposURL: URL, isSiteAdmin: Bool, starredURL: String, subscriptionsURL: URL, type: String, url: URL) {
                self.avatarURL = avatarURL
                self.eventsURL = eventsURL
                self.followersURL = followersURL
                self.followingURL = followingURL
                self.gistsURL = gistsURL
                self.gravatarID = gravatarID
                self.htmlURL = htmlURL
                self.id = id
                self.nodeID = nodeID
                self.login = login
                self.organizationsURL = organizationsURL
                self.receivedEventsURL = receivedEventsURL
                self.reposURL = reposURL
                self.isSiteAdmin = isSiteAdmin
                self.starredURL = starredURL
                self.subscriptionsURL = subscriptionsURL
                self.type = type
                self.url = url
            }

            private enum CodingKeys: String, CodingKey {
                case avatarURL = "avatar_url"
                case eventsURL = "events_url"
                case followersURL = "followers_url"
                case followingURL = "following_url"
                case gistsURL = "gists_url"
                case gravatarID = "gravatar_id"
                case htmlURL = "html_url"
                case id
                case nodeID = "node_id"
                case login
                case organizationsURL = "organizations_url"
                case receivedEventsURL = "received_events_url"
                case reposURL = "repos_url"
                case isSiteAdmin = "site_admin"
                case starredURL = "starred_url"
                case subscriptionsURL = "subscriptions_url"
                case type
                case url
            }
        }

        public init(label: String, ref: String, repo: Repo, sha: String, user: User) {
            self.label = label
            self.ref = ref
            self.repo = repo
            self.sha = sha
            self.user = user
        }
    }

    public struct Links: Codable {
        /// Link
        ///
        /// Hypermedia Link
        public var comments: Link
        /// Link
        ///
        /// Hypermedia Link
        public var commits: Link
        /// Link
        ///
        /// Hypermedia Link
        public var statuses: Link
        /// Link
        ///
        /// Hypermedia Link
        public var html: Link
        /// Link
        ///
        /// Hypermedia Link
        public var issue: Link
        /// Link
        ///
        /// Hypermedia Link
        public var reviewComments: Link
        /// Link
        ///
        /// Hypermedia Link
        public var reviewComment: Link
        /// Link
        ///
        /// Hypermedia Link
        public var this: Link

        public init(comments: Link, commits: Link, statuses: Link, html: Link, issue: Link, reviewComments: Link, reviewComment: Link, this: Link) {
            self.comments = comments
            self.commits = commits
            self.statuses = statuses
            self.html = html
            self.issue = issue
            self.reviewComments = reviewComments
            self.reviewComment = reviewComment
            self.this = this
        }

        private enum CodingKeys: String, CodingKey {
            case comments
            case commits
            case statuses
            case html
            case issue
            case reviewComments = "review_comments"
            case reviewComment = "review_comment"
            case this = "self"
        }
    }

    public init(url: URL, id: Int, nodeID: String, htmlURL: URL, diffURL: URL, patchURL: URL, issueURL: URL, commitsURL: URL, reviewCommentsURL: URL, reviewCommentURL: String, commentsURL: URL, statusesURL: URL, number: Int, state: State, isLocked: Bool, title: String, user: SimpleUser? = nil, body: String? = nil, labels: [Label], milestone: Milestone? = nil, activeLockReason: String? = nil, createdAt: Date, updatedAt: Date, closedAt: Date? = nil, mergedAt: Date? = nil, mergeCommitSha: String? = nil, assignee: SimpleUser? = nil, assignees: [SimpleUser]? = nil, requestedReviewers: [SimpleUser]? = nil, requestedTeams: [TeamSimple]? = nil, head: Head, base: Base, links: Links, authorAssociation: AuthorAssociation, autoMerge: AutoMerge? = nil, isDraft: Bool? = nil, isMerged: Bool, isMergeable: Bool? = nil, isRebaseable: Bool? = nil, mergeableState: String, mergedBy: SimpleUser? = nil, comments: Int, reviewComments: Int, maintainerCanModify: Bool, commits: Int, additions: Int, deletions: Int, changedFiles: Int) {
        self.url = url
        self.id = id
        self.nodeID = nodeID
        self.htmlURL = htmlURL
        self.diffURL = diffURL
        self.patchURL = patchURL
        self.issueURL = issueURL
        self.commitsURL = commitsURL
        self.reviewCommentsURL = reviewCommentsURL
        self.reviewCommentURL = reviewCommentURL
        self.commentsURL = commentsURL
        self.statusesURL = statusesURL
        self.number = number
        self.state = state
        self.isLocked = isLocked
        self.title = title
        self.user = user
        self.body = body
        self.labels = labels
        self.milestone = milestone
        self.activeLockReason = activeLockReason
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.closedAt = closedAt
        self.mergedAt = mergedAt
        self.mergeCommitSha = mergeCommitSha
        self.assignee = assignee
        self.assignees = assignees
        self.requestedReviewers = requestedReviewers
        self.requestedTeams = requestedTeams
        self.head = head
        self.base = base
        self.links = links
        self.authorAssociation = authorAssociation
        self.autoMerge = autoMerge
        self.isDraft = isDraft
        self.isMerged = isMerged
        self.isMergeable = isMergeable
        self.isRebaseable = isRebaseable
        self.mergeableState = mergeableState
        self.mergedBy = mergedBy
        self.comments = comments
        self.reviewComments = reviewComments
        self.maintainerCanModify = maintainerCanModify
        self.commits = commits
        self.additions = additions
        self.deletions = deletions
        self.changedFiles = changedFiles
    }

    private enum CodingKeys: String, CodingKey {
        case url
        case id
        case nodeID = "node_id"
        case htmlURL = "html_url"
        case diffURL = "diff_url"
        case patchURL = "patch_url"
        case issueURL = "issue_url"
        case commitsURL = "commits_url"
        case reviewCommentsURL = "review_comments_url"
        case reviewCommentURL = "review_comment_url"
        case commentsURL = "comments_url"
        case statusesURL = "statuses_url"
        case number
        case state
        case isLocked = "locked"
        case title
        case user
        case body
        case labels
        case milestone
        case activeLockReason = "active_lock_reason"
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case closedAt = "closed_at"
        case mergedAt = "merged_at"
        case mergeCommitSha = "merge_commit_sha"
        case assignee
        case assignees
        case requestedReviewers = "requested_reviewers"
        case requestedTeams = "requested_teams"
        case head
        case base
        case links = "_links"
        case authorAssociation = "author_association"
        case autoMerge = "auto_merge"
        case isDraft = "draft"
        case isMerged = "merged"
        case isMergeable = "mergeable"
        case isRebaseable = "rebaseable"
        case mergeableState = "mergeable_state"
        case mergedBy = "merged_by"
        case comments
        case reviewComments = "review_comments"
        case maintainerCanModify = "maintainer_can_modify"
        case commits
        case additions
        case deletions
        case changedFiles = "changed_files"
    }
}
