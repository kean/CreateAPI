// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Full Team
///
/// Groups of organization members that gives permissions on specified repositories.
public struct TeamFull: Codable {
    /// Unique identifier of the team
    ///
    /// Example: 42
    public var id: Int
    /// Example: "MDQ6VGVhbTE="
    public var nodeID: String
    /// URL for the team
    ///
    /// Example: "https://api.github.com/organizations/1/team/1"
    public var url: URL
    /// Example: "https://github.com/orgs/rails/teams/core"
    public var htmlURL: URL
    /// Name of the team
    ///
    /// Example: "Developers"
    public var name: String
    /// Example: "justice-league"
    public var slug: String
    /// Example: "A great team."
    public var description: String?
    /// The level of privacy this team should have
    ///
    /// Example: "closed"
    public var privacy: Privacy?
    /// Permission that the team will have for its repositories
    ///
    /// Example: "push"
    public var permission: String
    /// Example: "https://api.github.com/organizations/1/team/1/members{/member}"
    public var membersURL: String
    /// Example: "https://api.github.com/organizations/1/team/1/repos"
    public var repositoriesURL: URL
    /// Team Simple
    ///
    /// Groups of organization members that gives permissions on specified repositories.
    public var parent: TeamSimple?
    public var membersCount: Int
    /// Example: 10
    public var reposCount: Int
    /// Example: "2017-07-14T16:53:42Z"
    public var createdAt: Date
    /// Example: "2017-08-17T12:37:15Z"
    public var updatedAt: Date
    /// Organization Full
    public var organization: OrganizationFull
    /// Distinguished Name (DN) that team maps to within LDAP environment
    ///
    /// Example: "uid=example,ou=users,dc=github,dc=com"
    public var ldapDn: String?

    /// The level of privacy this team should have
    ///
    /// Example: "closed"
    public enum Privacy: String, Codable, CaseIterable {
        case closed
        case secret
    }

    public init(id: Int, nodeID: String, url: URL, htmlURL: URL, name: String, slug: String, description: String? = nil, privacy: Privacy? = nil, permission: String, membersURL: String, repositoriesURL: URL, parent: TeamSimple? = nil, membersCount: Int, reposCount: Int, createdAt: Date, updatedAt: Date, organization: OrganizationFull, ldapDn: String? = nil) {
        self.id = id
        self.nodeID = nodeID
        self.url = url
        self.htmlURL = htmlURL
        self.name = name
        self.slug = slug
        self.description = description
        self.privacy = privacy
        self.permission = permission
        self.membersURL = membersURL
        self.repositoriesURL = repositoriesURL
        self.parent = parent
        self.membersCount = membersCount
        self.reposCount = reposCount
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.organization = organization
        self.ldapDn = ldapDn
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case nodeID = "node_id"
        case url
        case htmlURL = "html_url"
        case name
        case slug
        case description
        case privacy
        case permission
        case membersURL = "members_url"
        case repositoriesURL = "repositories_url"
        case parent
        case membersCount = "members_count"
        case reposCount = "repos_count"
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case organization
        case ldapDn = "ldap_dn"
    }
}
