// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Pages Health Check Status
public struct PagesHealthCheck: Codable {
    public var domain: Domain?
    public var altDomain: AltDomain?

    public struct Domain: Codable {
        public var host: String?
        public var uri: String?
        public var nameservers: String?
        public var dnsResolves: Bool?
        public var isProxied: Bool?
        public var isCloudflareIp: Bool?
        public var isFastlyIp: Bool?
        public var isOldIpAddress: Bool?
        public var isARecord: Bool?
        public var hasCnameRecord: Bool?
        public var hasMxRecordsPresent: Bool?
        public var isValidDomain: Bool?
        public var isApexDomain: Bool?
        public var shouldBeARecord: Bool?
        public var isCnameToGithubUserDomain: Bool?
        public var isCnameToPagesDotGithubDotCom: Bool?
        public var isCnameToFastly: Bool?
        public var isPointedToGithubPagesIp: Bool?
        public var isNonGithubPagesIpPresent: Bool?
        public var isPagesDomain: Bool?
        public var isServedByPages: Bool?
        public var isValid: Bool?
        public var reason: String?
        public var respondsToHTTPS: Bool?
        public var enforcesHTTPS: Bool?
        public var httpsError: String?
        public var isHTTPSEligible: Bool?
        public var caaError: String?

        public init(host: String? = nil, uri: String? = nil, nameservers: String? = nil, dnsResolves: Bool? = nil, isProxied: Bool? = nil, isCloudflareIp: Bool? = nil, isFastlyIp: Bool? = nil, isOldIpAddress: Bool? = nil, isARecord: Bool? = nil, hasCnameRecord: Bool? = nil, hasMxRecordsPresent: Bool? = nil, isValidDomain: Bool? = nil, isApexDomain: Bool? = nil, shouldBeARecord: Bool? = nil, isCnameToGithubUserDomain: Bool? = nil, isCnameToPagesDotGithubDotCom: Bool? = nil, isCnameToFastly: Bool? = nil, isPointedToGithubPagesIp: Bool? = nil, isNonGithubPagesIpPresent: Bool? = nil, isPagesDomain: Bool? = nil, isServedByPages: Bool? = nil, isValid: Bool? = nil, reason: String? = nil, respondsToHTTPS: Bool? = nil, enforcesHTTPS: Bool? = nil, httpsError: String? = nil, isHTTPSEligible: Bool? = nil, caaError: String? = nil) {
            self.host = host
            self.uri = uri
            self.nameservers = nameservers
            self.dnsResolves = dnsResolves
            self.isProxied = isProxied
            self.isCloudflareIp = isCloudflareIp
            self.isFastlyIp = isFastlyIp
            self.isOldIpAddress = isOldIpAddress
            self.isARecord = isARecord
            self.hasCnameRecord = hasCnameRecord
            self.hasMxRecordsPresent = hasMxRecordsPresent
            self.isValidDomain = isValidDomain
            self.isApexDomain = isApexDomain
            self.shouldBeARecord = shouldBeARecord
            self.isCnameToGithubUserDomain = isCnameToGithubUserDomain
            self.isCnameToPagesDotGithubDotCom = isCnameToPagesDotGithubDotCom
            self.isCnameToFastly = isCnameToFastly
            self.isPointedToGithubPagesIp = isPointedToGithubPagesIp
            self.isNonGithubPagesIpPresent = isNonGithubPagesIpPresent
            self.isPagesDomain = isPagesDomain
            self.isServedByPages = isServedByPages
            self.isValid = isValid
            self.reason = reason
            self.respondsToHTTPS = respondsToHTTPS
            self.enforcesHTTPS = enforcesHTTPS
            self.httpsError = httpsError
            self.isHTTPSEligible = isHTTPSEligible
            self.caaError = caaError
        }

        private enum CodingKeys: String, CodingKey {
            case host
            case uri
            case nameservers
            case dnsResolves = "dns_resolves"
            case isProxied = "is_proxied"
            case isCloudflareIp = "is_cloudflare_ip"
            case isFastlyIp = "is_fastly_ip"
            case isOldIpAddress = "is_old_ip_address"
            case isARecord = "is_a_record"
            case hasCnameRecord = "has_cname_record"
            case hasMxRecordsPresent = "has_mx_records_present"
            case isValidDomain = "is_valid_domain"
            case isApexDomain = "is_apex_domain"
            case shouldBeARecord = "should_be_a_record"
            case isCnameToGithubUserDomain = "is_cname_to_github_user_domain"
            case isCnameToPagesDotGithubDotCom = "is_cname_to_pages_dot_github_dot_com"
            case isCnameToFastly = "is_cname_to_fastly"
            case isPointedToGithubPagesIp = "is_pointed_to_github_pages_ip"
            case isNonGithubPagesIpPresent = "is_non_github_pages_ip_present"
            case isPagesDomain = "is_pages_domain"
            case isServedByPages = "is_served_by_pages"
            case isValid = "is_valid"
            case reason
            case respondsToHTTPS = "responds_to_https"
            case enforcesHTTPS = "enforces_https"
            case httpsError = "https_error"
            case isHTTPSEligible = "is_https_eligible"
            case caaError = "caa_error"
        }
    }

    public struct AltDomain: Codable {
        public var host: String?
        public var uri: String?
        public var nameservers: String?
        public var dnsResolves: Bool?
        public var isProxied: Bool?
        public var isCloudflareIp: Bool?
        public var isFastlyIp: Bool?
        public var isOldIpAddress: Bool?
        public var isARecord: Bool?
        public var hasCnameRecord: Bool?
        public var hasMxRecordsPresent: Bool?
        public var isValidDomain: Bool?
        public var isApexDomain: Bool?
        public var shouldBeARecord: Bool?
        public var isCnameToGithubUserDomain: Bool?
        public var isCnameToPagesDotGithubDotCom: Bool?
        public var isCnameToFastly: Bool?
        public var isPointedToGithubPagesIp: Bool?
        public var isNonGithubPagesIpPresent: Bool?
        public var isPagesDomain: Bool?
        public var isServedByPages: Bool?
        public var isValid: Bool?
        public var reason: String?
        public var respondsToHTTPS: Bool?
        public var enforcesHTTPS: Bool?
        public var httpsError: String?
        public var isHTTPSEligible: Bool?
        public var caaError: String?

        public init(host: String? = nil, uri: String? = nil, nameservers: String? = nil, dnsResolves: Bool? = nil, isProxied: Bool? = nil, isCloudflareIp: Bool? = nil, isFastlyIp: Bool? = nil, isOldIpAddress: Bool? = nil, isARecord: Bool? = nil, hasCnameRecord: Bool? = nil, hasMxRecordsPresent: Bool? = nil, isValidDomain: Bool? = nil, isApexDomain: Bool? = nil, shouldBeARecord: Bool? = nil, isCnameToGithubUserDomain: Bool? = nil, isCnameToPagesDotGithubDotCom: Bool? = nil, isCnameToFastly: Bool? = nil, isPointedToGithubPagesIp: Bool? = nil, isNonGithubPagesIpPresent: Bool? = nil, isPagesDomain: Bool? = nil, isServedByPages: Bool? = nil, isValid: Bool? = nil, reason: String? = nil, respondsToHTTPS: Bool? = nil, enforcesHTTPS: Bool? = nil, httpsError: String? = nil, isHTTPSEligible: Bool? = nil, caaError: String? = nil) {
            self.host = host
            self.uri = uri
            self.nameservers = nameservers
            self.dnsResolves = dnsResolves
            self.isProxied = isProxied
            self.isCloudflareIp = isCloudflareIp
            self.isFastlyIp = isFastlyIp
            self.isOldIpAddress = isOldIpAddress
            self.isARecord = isARecord
            self.hasCnameRecord = hasCnameRecord
            self.hasMxRecordsPresent = hasMxRecordsPresent
            self.isValidDomain = isValidDomain
            self.isApexDomain = isApexDomain
            self.shouldBeARecord = shouldBeARecord
            self.isCnameToGithubUserDomain = isCnameToGithubUserDomain
            self.isCnameToPagesDotGithubDotCom = isCnameToPagesDotGithubDotCom
            self.isCnameToFastly = isCnameToFastly
            self.isPointedToGithubPagesIp = isPointedToGithubPagesIp
            self.isNonGithubPagesIpPresent = isNonGithubPagesIpPresent
            self.isPagesDomain = isPagesDomain
            self.isServedByPages = isServedByPages
            self.isValid = isValid
            self.reason = reason
            self.respondsToHTTPS = respondsToHTTPS
            self.enforcesHTTPS = enforcesHTTPS
            self.httpsError = httpsError
            self.isHTTPSEligible = isHTTPSEligible
            self.caaError = caaError
        }

        private enum CodingKeys: String, CodingKey {
            case host
            case uri
            case nameservers
            case dnsResolves = "dns_resolves"
            case isProxied = "is_proxied"
            case isCloudflareIp = "is_cloudflare_ip"
            case isFastlyIp = "is_fastly_ip"
            case isOldIpAddress = "is_old_ip_address"
            case isARecord = "is_a_record"
            case hasCnameRecord = "has_cname_record"
            case hasMxRecordsPresent = "has_mx_records_present"
            case isValidDomain = "is_valid_domain"
            case isApexDomain = "is_apex_domain"
            case shouldBeARecord = "should_be_a_record"
            case isCnameToGithubUserDomain = "is_cname_to_github_user_domain"
            case isCnameToPagesDotGithubDotCom = "is_cname_to_pages_dot_github_dot_com"
            case isCnameToFastly = "is_cname_to_fastly"
            case isPointedToGithubPagesIp = "is_pointed_to_github_pages_ip"
            case isNonGithubPagesIpPresent = "is_non_github_pages_ip_present"
            case isPagesDomain = "is_pages_domain"
            case isServedByPages = "is_served_by_pages"
            case isValid = "is_valid"
            case reason
            case respondsToHTTPS = "responds_to_https"
            case enforcesHTTPS = "enforces_https"
            case httpsError = "https_error"
            case isHTTPSEligible = "is_https_eligible"
            case caaError = "caa_error"
        }
    }

    public init(domain: Domain? = nil, altDomain: AltDomain? = nil) {
        self.domain = domain
        self.altDomain = altDomain
    }

    private enum CodingKeys: String, CodingKey {
        case domain
        case altDomain = "alt_domain"
    }
}
