// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct AuditLogEvent: Codable {
    /// The time the audit log event occurred, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
    public var timestamp: Int?
    /// The name of the action that was performed, for example `user.login` or `repo.create`.
    public var action: String?
    public var isActive: Bool?
    public var activeWas: Bool?
    /// The actor who performed the action.
    public var actor: String?
    /// The id of the actor who performed the action.
    public var actorID: Int?
    public var actorLocation: ActorLocation?
    public var data: [String: AnyJSON]?
    public var orgID: Int?
    /// The username of the account being blocked.
    public var blockedUser: String?
    public var business: String?
    public var config: [[String: AnyJSON]]?
    public var configWas: [[String: AnyJSON]]?
    public var contentType: String?
    /// The time the audit log event was recorded, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
    public var createdAt: Int?
    public var deployKeyFingerprint: String?
    /// A unique identifier for an audit event.
    public var documentID: String?
    public var emoji: String?
    public var events: [[String: AnyJSON]]?
    public var eventsWere: [[String: AnyJSON]]?
    public var explanation: String?
    public var fingerprint: String?
    public var hookID: Int?
    public var isLimitedAvailability: Bool?
    public var message: String?
    public var name: String?
    public var oldUser: String?
    public var opensshPublicKey: String?
    public var org: String?
    public var previousVisibility: String?
    public var isReadOnly: Bool?
    /// The name of the repository.
    public var repo: String?
    /// The name of the repository.
    public var repository: String?
    public var isRepositoryPublic: Bool?
    public var targetLogin: String?
    public var team: String?
    /// The type of protocol (for example, HTTP or SSH) used to transfer Git data.
    public var transportProtocol: Int?
    /// A human readable name for the protocol (for example, HTTP or SSH) used to transfer Git data.
    public var transportProtocolName: String?
    /// The user that was affected by the action performed (if available).
    public var user: String?
    /// The repository visibility, for example `public` or `private`.
    public var visibility: String?

    public struct ActorLocation: Codable {
        public var countryName: String?

        public init(countryName: String? = nil) {
            self.countryName = countryName
        }

        private enum CodingKeys: String, CodingKey {
            case countryName = "country_name"
        }
    }

    public init(timestamp: Int? = nil, action: String? = nil, isActive: Bool? = nil, activeWas: Bool? = nil, actor: String? = nil, actorID: Int? = nil, actorLocation: ActorLocation? = nil, data: [String: AnyJSON]? = nil, orgID: Int? = nil, blockedUser: String? = nil, business: String? = nil, config: [[String: AnyJSON]]? = nil, configWas: [[String: AnyJSON]]? = nil, contentType: String? = nil, createdAt: Int? = nil, deployKeyFingerprint: String? = nil, documentID: String? = nil, emoji: String? = nil, events: [[String: AnyJSON]]? = nil, eventsWere: [[String: AnyJSON]]? = nil, explanation: String? = nil, fingerprint: String? = nil, hookID: Int? = nil, isLimitedAvailability: Bool? = nil, message: String? = nil, name: String? = nil, oldUser: String? = nil, opensshPublicKey: String? = nil, org: String? = nil, previousVisibility: String? = nil, isReadOnly: Bool? = nil, repo: String? = nil, repository: String? = nil, isRepositoryPublic: Bool? = nil, targetLogin: String? = nil, team: String? = nil, transportProtocol: Int? = nil, transportProtocolName: String? = nil, user: String? = nil, visibility: String? = nil) {
        self.timestamp = timestamp
        self.action = action
        self.isActive = isActive
        self.activeWas = activeWas
        self.actor = actor
        self.actorID = actorID
        self.actorLocation = actorLocation
        self.data = data
        self.orgID = orgID
        self.blockedUser = blockedUser
        self.business = business
        self.config = config
        self.configWas = configWas
        self.contentType = contentType
        self.createdAt = createdAt
        self.deployKeyFingerprint = deployKeyFingerprint
        self.documentID = documentID
        self.emoji = emoji
        self.events = events
        self.eventsWere = eventsWere
        self.explanation = explanation
        self.fingerprint = fingerprint
        self.hookID = hookID
        self.isLimitedAvailability = isLimitedAvailability
        self.message = message
        self.name = name
        self.oldUser = oldUser
        self.opensshPublicKey = opensshPublicKey
        self.org = org
        self.previousVisibility = previousVisibility
        self.isReadOnly = isReadOnly
        self.repo = repo
        self.repository = repository
        self.isRepositoryPublic = isRepositoryPublic
        self.targetLogin = targetLogin
        self.team = team
        self.transportProtocol = transportProtocol
        self.transportProtocolName = transportProtocolName
        self.user = user
        self.visibility = visibility
    }

    private enum CodingKeys: String, CodingKey {
        case timestamp = "@timestamp"
        case action
        case isActive = "active"
        case activeWas = "active_was"
        case actor
        case actorID = "actor_id"
        case actorLocation = "actor_location"
        case data
        case orgID = "org_id"
        case blockedUser = "blocked_user"
        case business
        case config
        case configWas = "config_was"
        case contentType = "content_type"
        case createdAt = "created_at"
        case deployKeyFingerprint = "deploy_key_fingerprint"
        case documentID = "_document_id"
        case emoji
        case events
        case eventsWere = "events_were"
        case explanation
        case fingerprint
        case hookID = "hook_id"
        case isLimitedAvailability = "limited_availability"
        case message
        case name
        case oldUser = "old_user"
        case opensshPublicKey = "openssh_public_key"
        case org
        case previousVisibility = "previous_visibility"
        case isReadOnly = "read_only"
        case repo
        case repository
        case isRepositoryPublic = "repository_public"
        case targetLogin = "target_login"
        case team
        case transportProtocol = "transport_protocol"
        case transportProtocolName = "transport_protocol_name"
        case user
        case visibility
    }
}
