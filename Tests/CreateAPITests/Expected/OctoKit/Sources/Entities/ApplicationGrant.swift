// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// The authorization associated with an OAuth Access.
public struct ApplicationGrant: Codable {
    public var id: Int
    /// Example: "https://api.github.com/applications/grants/1"
    public var url: URL
    public var app: App
    /// Example: "2011-09-06T17:26:27Z"
    public var createdAt: Date
    /// Example: "2011-09-06T20:39:23Z"
    public var updatedAt: Date
    /// Example: ["public_repo"]
    public var scopes: [String]
    /// Simple User
    public var user: SimpleUser?

    public struct App: Codable {
        public var clientID: String
        public var name: String
        public var url: URL

        public init(clientID: String, name: String, url: URL) {
            self.clientID = clientID
            self.name = name
            self.url = url
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.clientID = try values.decode(String.self, forKey: "client_id")
            self.name = try values.decode(String.self, forKey: "name")
            self.url = try values.decode(URL.self, forKey: "url")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(clientID, forKey: "client_id")
            try values.encode(name, forKey: "name")
            try values.encode(url, forKey: "url")
        }
    }

    public init(id: Int, url: URL, app: App, createdAt: Date, updatedAt: Date, scopes: [String], user: SimpleUser? = nil) {
        self.id = id
        self.url = url
        self.app = app
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.scopes = scopes
        self.user = user
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(Int.self, forKey: "id")
        self.url = try values.decode(URL.self, forKey: "url")
        self.app = try values.decode(App.self, forKey: "app")
        self.createdAt = try values.decode(Date.self, forKey: "created_at")
        self.updatedAt = try values.decode(Date.self, forKey: "updated_at")
        self.scopes = try values.decode([String].self, forKey: "scopes")
        self.user = try values.decodeIfPresent(SimpleUser.self, forKey: "user")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encode(url, forKey: "url")
        try values.encode(app, forKey: "app")
        try values.encode(createdAt, forKey: "created_at")
        try values.encode(updatedAt, forKey: "updated_at")
        try values.encode(scopes, forKey: "scopes")
        try values.encodeIfPresent(user, forKey: "user")
    }
}
