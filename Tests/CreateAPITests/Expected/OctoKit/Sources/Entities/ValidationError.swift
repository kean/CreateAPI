// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct ValidationError: Codable {
    public var message: String
    public var documentationURL: String
    public var errors: [Error]?

    public struct Error: Codable {
        public var resource: String?
        public var field: String?
        public var message: String?
        public var code: String
        public var index: Int?
        public var value: Value?

        public enum Value: Codable {
            case string(String)
            case int(Int)
            case strings([String])

            public init(from decoder: Decoder) throws {
                let container = try decoder.singleValueContainer()
                if let value = try? container.decode(String.self) {
                    self = .string(value)
                } else if let value = try? container.decode(Int.self) {
                    self = .int(value)
                } else if let value = try? container.decode([String].self) {
                    self = .strings(value)
                } else {
                    throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
                }
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                switch self {
                case .string(let value): try container.encode(value)
                case .int(let value): try container.encode(value)
                case .strings(let value): try container.encode(value)
                }
            }
        }

        public init(resource: String? = nil, field: String? = nil, message: String? = nil, code: String, index: Int? = nil, value: Value? = nil) {
            self.resource = resource
            self.field = field
            self.message = message
            self.code = code
            self.index = index
            self.value = value
        }
    }

    public init(message: String, documentationURL: String, errors: [Error]? = nil) {
        self.message = message
        self.documentationURL = documentationURL
        self.errors = errors
    }

    private enum CodingKeys: String, CodingKey {
        case message
        case documentationURL = "documentation_url"
        case errors
    }
}
