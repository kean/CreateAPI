// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct TimelineCommentEvent: Codable {
    public var event: String
    /// Simple User
    public var actor: SimpleUser
    /// Unique identifier of the issue comment
    ///
    /// Example: 42
    public var id: Int
    public var nodeID: String
    /// URL for the issue comment
    ///
    /// Example: "https://api.github.com/repositories/42/issues/comments/1"
    public var url: URL
    /// Contents of the issue comment
    ///
    /// Example: "What version of Safari were you using when you observed this bug?"
    public var body: String?
    public var bodyText: String?
    public var bodyHTML: String?
    public var htmlURL: URL
    /// Simple User
    public var user: SimpleUser
    /// Example: "2011-04-14T16:00:49Z"
    public var createdAt: Date
    /// Example: "2011-04-14T16:00:49Z"
    public var updatedAt: Date
    public var issueURL: URL
    /// Author_association
    ///
    /// How the author is associated with the repository.
    ///
    /// Example: "OWNER"
    public var authorAssociation: AuthorAssociation
    /// GitHub app
    ///
    /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
    public var performedViaGithubApp: Integration?
    /// Reaction Rollup
    public var reactions: ReactionRollup?

    public init(event: String, actor: SimpleUser, id: Int, nodeID: String, url: URL, body: String? = nil, bodyText: String? = nil, bodyHTML: String? = nil, htmlURL: URL, user: SimpleUser, createdAt: Date, updatedAt: Date, issueURL: URL, authorAssociation: AuthorAssociation, performedViaGithubApp: Integration? = nil, reactions: ReactionRollup? = nil) {
        self.event = event
        self.actor = actor
        self.id = id
        self.nodeID = nodeID
        self.url = url
        self.body = body
        self.bodyText = bodyText
        self.bodyHTML = bodyHTML
        self.htmlURL = htmlURL
        self.user = user
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.issueURL = issueURL
        self.authorAssociation = authorAssociation
        self.performedViaGithubApp = performedViaGithubApp
        self.reactions = reactions
    }

    private enum CodingKeys: String, CodingKey {
        case event
        case actor
        case id
        case nodeID = "node_id"
        case url
        case body
        case bodyText = "body_text"
        case bodyHTML = "body_html"
        case htmlURL = "html_url"
        case user
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case issueURL = "issue_url"
        case authorAssociation = "author_association"
        case performedViaGithubApp = "performed_via_github_app"
        case reactions
    }
}
