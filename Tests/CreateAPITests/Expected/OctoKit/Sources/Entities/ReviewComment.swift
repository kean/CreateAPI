// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Legacy Review Comment
public struct ReviewComment: Codable {
    /// Example: "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1"
    public var url: URL
    /// Example: 42
    public var pullRequestReviewID: Int?
    /// Example: 10
    public var id: Int
    /// Example: "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw"
    public var nodeID: String
    /// Example: "@@ -16,33 +16,40 @@ public class Connection : IConnection..."
    public var diffHunk: String
    /// Example: "file1.txt"
    public var path: String
    public var position: Int?
    public var originalPosition: Int
    /// Example: "6dcb09b5b57875f334f61aebed695e2e4193db5e"
    public var commitID: String
    /// Example: "9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840"
    public var originalCommitID: String
    public var inReplyToID: Int?
    /// Simple User
    public var user: SimpleUser?
    /// Example: "Great stuff"
    public var body: String
    /// Example: "2011-04-14T16:00:49Z"
    public var createdAt: Date
    /// Example: "2011-04-14T16:00:49Z"
    public var updatedAt: Date
    /// Example: "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1"
    public var htmlURL: URL
    /// Example: "https://api.github.com/repos/octocat/Hello-World/pulls/1"
    public var pullRequestURL: URL
    /// Author_association
    ///
    /// How the author is associated with the repository.
    ///
    /// Example: "OWNER"
    public var authorAssociation: AuthorAssociation
    public var links: Links
    public var bodyText: String?
    public var bodyHTML: String?
    /// Reaction Rollup
    public var reactions: ReactionRollup?
    /// The side of the first line of the range for a multi-line comment.
    public var side: Side?
    /// The side of the first line of the range for a multi-line comment.
    public var startSide: StartSide?
    /// The line of the blob to which the comment applies. The last line of the range for a multi-line comment
    public var line: Int?
    /// The original line of the blob to which the comment applies. The last line of the range for a multi-line comment
    public var originalLine: Int?
    /// The first line of the range for a multi-line comment.
    public var startLine: Int?
    /// The original first line of the range for a multi-line comment.
    public var originalStartLine: Int?

    public struct Links: Codable {
        /// Link
        ///
        /// Hypermedia Link
        public var this: Link
        /// Link
        ///
        /// Hypermedia Link
        public var html: Link
        /// Link
        ///
        /// Hypermedia Link
        public var pullRequest: Link

        public init(this: Link, html: Link, pullRequest: Link) {
            self.this = this
            self.html = html
            self.pullRequest = pullRequest
        }

        private enum CodingKeys: String, CodingKey {
            case this = "self"
            case html
            case pullRequest = "pull_request"
        }
    }

    /// The side of the first line of the range for a multi-line comment.
    public enum Side: String, Codable, CaseIterable {
        case left = "LEFT"
        case right = "RIGHT"
    }

    /// The side of the first line of the range for a multi-line comment.
    public enum StartSide: String, Codable, CaseIterable {
        case left = "LEFT"
        case right = "RIGHT"
    }

    public init(url: URL, pullRequestReviewID: Int? = nil, id: Int, nodeID: String, diffHunk: String, path: String, position: Int? = nil, originalPosition: Int, commitID: String, originalCommitID: String, inReplyToID: Int? = nil, user: SimpleUser? = nil, body: String, createdAt: Date, updatedAt: Date, htmlURL: URL, pullRequestURL: URL, authorAssociation: AuthorAssociation, links: Links, bodyText: String? = nil, bodyHTML: String? = nil, reactions: ReactionRollup? = nil, side: Side? = nil, startSide: StartSide? = nil, line: Int? = nil, originalLine: Int? = nil, startLine: Int? = nil, originalStartLine: Int? = nil) {
        self.url = url
        self.pullRequestReviewID = pullRequestReviewID
        self.id = id
        self.nodeID = nodeID
        self.diffHunk = diffHunk
        self.path = path
        self.position = position
        self.originalPosition = originalPosition
        self.commitID = commitID
        self.originalCommitID = originalCommitID
        self.inReplyToID = inReplyToID
        self.user = user
        self.body = body
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.htmlURL = htmlURL
        self.pullRequestURL = pullRequestURL
        self.authorAssociation = authorAssociation
        self.links = links
        self.bodyText = bodyText
        self.bodyHTML = bodyHTML
        self.reactions = reactions
        self.side = side
        self.startSide = startSide
        self.line = line
        self.originalLine = originalLine
        self.startLine = startLine
        self.originalStartLine = originalStartLine
    }

    private enum CodingKeys: String, CodingKey {
        case url
        case pullRequestReviewID = "pull_request_review_id"
        case id
        case nodeID = "node_id"
        case diffHunk = "diff_hunk"
        case path
        case position
        case originalPosition = "original_position"
        case commitID = "commit_id"
        case originalCommitID = "original_commit_id"
        case inReplyToID = "in_reply_to_id"
        case user
        case body
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case htmlURL = "html_url"
        case pullRequestURL = "pull_request_url"
        case authorAssociation = "author_association"
        case links = "_links"
        case bodyText = "body_text"
        case bodyHTML = "body_html"
        case reactions
        case side
        case startSide = "start_side"
        case line
        case originalLine = "original_line"
        case startLine = "start_line"
        case originalStartLine = "original_start_line"
    }
}
