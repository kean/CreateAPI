// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Secrets for a GitHub Codespace.
public struct CodespacesSecret: Codable {
    /// The name of the secret.
    ///
    /// Example: "SECRET_NAME"
    public var name: String
    public var createdAt: Date
    public var updatedAt: Date
    /// Visibility of a secret
    public var visibility: Visibility
    /// Example: "https://api.github.com/user/secrets/SECRET_NAME/repositories"
    public var selectedRepositoriesURL: URL

    /// Visibility of a secret
    public enum Visibility: String, Codable, CaseIterable {
        case all
        case `private`
        case selected
    }

    public init(name: String, createdAt: Date, updatedAt: Date, visibility: Visibility, selectedRepositoriesURL: URL) {
        self.name = name
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.visibility = visibility
        self.selectedRepositoriesURL = selectedRepositoriesURL
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.name = try values.decode(String.self, forKey: "name")
        self.createdAt = try values.decode(Date.self, forKey: "created_at")
        self.updatedAt = try values.decode(Date.self, forKey: "updated_at")
        self.visibility = try values.decode(Visibility.self, forKey: "visibility")
        self.selectedRepositoriesURL = try values.decode(URL.self, forKey: "selected_repositories_url")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(name, forKey: "name")
        try values.encode(createdAt, forKey: "created_at")
        try values.encode(updatedAt, forKey: "updated_at")
        try values.encode(visibility, forKey: "visibility")
        try values.encode(selectedRepositoriesURL, forKey: "selected_repositories_url")
    }
}
