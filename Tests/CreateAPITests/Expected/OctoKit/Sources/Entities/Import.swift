// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// A repository import from an external source.
public struct Import: Codable {
    public var vcs: String?
    public var useLfs: Bool?
    /// The URL of the originating repository.
    public var vcsURL: String
    public var svcRoot: String?
    public var tfvcProject: String?
    public var status: Status
    public var statusText: String?
    public var failedStep: String?
    public var errorMessage: String?
    public var importPercent: Int?
    public var commitCount: Int?
    public var pushPercent: Int?
    public var hasLargeFiles: Bool?
    public var largeFilesSize: Int?
    public var largeFilesCount: Int?
    public var projectChoices: [ProjectChoice]?
    public var message: String?
    public var authorsCount: Int?
    public var url: URL
    public var htmlURL: URL
    public var authorsURL: URL
    public var repositoryURL: URL
    public var svnRoot: String?

    public enum Status: String, Codable, CaseIterable {
        case auth
        case error
        case `none`
        case detecting
        case choose
        case authFailed = "auth_failed"
        case importing
        case mapping
        case waitingToPush = "waiting_to_push"
        case pushing
        case complete
        case setup
        case unknown
        case detectionFoundMultiple = "detection_found_multiple"
        case detectionFoundNothing = "detection_found_nothing"
        case detectionNeedsAuth = "detection_needs_auth"
    }

    public struct ProjectChoice: Codable {
        public var vcs: String?
        public var tfvcProject: String?
        public var humanName: String?

        public init(vcs: String? = nil, tfvcProject: String? = nil, humanName: String? = nil) {
            self.vcs = vcs
            self.tfvcProject = tfvcProject
            self.humanName = humanName
        }

        private enum CodingKeys: String, CodingKey {
            case vcs
            case tfvcProject = "tfvc_project"
            case humanName = "human_name"
        }
    }

    public init(vcs: String? = nil, useLfs: Bool? = nil, vcsURL: String, svcRoot: String? = nil, tfvcProject: String? = nil, status: Status, statusText: String? = nil, failedStep: String? = nil, errorMessage: String? = nil, importPercent: Int? = nil, commitCount: Int? = nil, pushPercent: Int? = nil, hasLargeFiles: Bool? = nil, largeFilesSize: Int? = nil, largeFilesCount: Int? = nil, projectChoices: [ProjectChoice]? = nil, message: String? = nil, authorsCount: Int? = nil, url: URL, htmlURL: URL, authorsURL: URL, repositoryURL: URL, svnRoot: String? = nil) {
        self.vcs = vcs
        self.useLfs = useLfs
        self.vcsURL = vcsURL
        self.svcRoot = svcRoot
        self.tfvcProject = tfvcProject
        self.status = status
        self.statusText = statusText
        self.failedStep = failedStep
        self.errorMessage = errorMessage
        self.importPercent = importPercent
        self.commitCount = commitCount
        self.pushPercent = pushPercent
        self.hasLargeFiles = hasLargeFiles
        self.largeFilesSize = largeFilesSize
        self.largeFilesCount = largeFilesCount
        self.projectChoices = projectChoices
        self.message = message
        self.authorsCount = authorsCount
        self.url = url
        self.htmlURL = htmlURL
        self.authorsURL = authorsURL
        self.repositoryURL = repositoryURL
        self.svnRoot = svnRoot
    }

    private enum CodingKeys: String, CodingKey {
        case vcs
        case useLfs = "use_lfs"
        case vcsURL = "vcs_url"
        case svcRoot = "svc_root"
        case tfvcProject = "tfvc_project"
        case status
        case statusText = "status_text"
        case failedStep = "failed_step"
        case errorMessage = "error_message"
        case importPercent = "import_percent"
        case commitCount = "commit_count"
        case pushPercent = "push_percent"
        case hasLargeFiles = "has_large_files"
        case largeFilesSize = "large_files_size"
        case largeFilesCount = "large_files_count"
        case projectChoices = "project_choices"
        case message
        case authorsCount = "authors_count"
        case url
        case htmlURL = "html_url"
        case authorsURL = "authors_url"
        case repositoryURL = "repository_url"
        case svnRoot = "svn_root"
    }
}
