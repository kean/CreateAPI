// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// A codespace.
public struct Codespace: Codable {
    public var id: Int
    /// Automatically generated name of this codespace.
    ///
    /// Example: "monalisa-octocat-hello-world-g4wpq6h95q"
    public var name: String
    /// UUID identifying this codespace's environment.
    ///
    /// Example: "26a7c758-7299-4a73-b978-5a92a7ae98a0"
    public var environmentID: String?
    /// Simple User
    public var owner: SimpleUser
    /// Simple User
    public var billableOwner: SimpleUser
    /// Minimal Repository
    public var repository: MinimalRepository
    /// Codespace machine
    ///
    /// A description of the machine powering a codespace.
    public var machine: CodespaceMachine?
    /// Whether the codespace was created from a prebuild.
    ///
    /// Example: false
    public var isPrebuild: Bool?
    /// Example: "2011-01-26T19:01:12Z"
    public var createdAt: Date
    /// Example: "2011-01-26T19:01:12Z"
    public var updatedAt: Date
    /// Last known time this codespace was started.
    ///
    /// Example: "2011-01-26T19:01:12Z"
    public var lastUsedAt: Date
    /// State of this codespace.
    ///
    /// Example: "Available"
    public var state: State
    /// API URL for this codespace.
    public var url: URL
    /// Details about the codespace's git repository.
    public var gitStatus: GitStatus
    /// The Azure region where this codespace is located.
    ///
    /// Example: "WestUs2"
    public var location: Location
    /// The number of minutes of inactivity after which this codespace will be automatically stopped.
    ///
    /// Example: 60
    public var idleTimeoutMinutes: Int?
    /// URL to access this codespace on the web.
    public var webURL: URL
    /// API URL to access available alternate machine types for this codespace.
    public var machinesURL: URL
    /// API URL to start this codespace.
    public var startURL: URL
    /// API URL to stop this codespace.
    public var stopURL: URL
    /// API URL for the Pull Request associated with this codespace, if any.
    public var pullsURL: URL?
    public var recentFolders: [String]
    public var runtimeConstraints: RuntimeConstraints?

    /// State of this codespace.
    ///
    /// Example: "Available"
    public enum State: String, Codable, CaseIterable {
        case `none` = "None"
        case created = "Created"
        case queued = "Queued"
        case provisioning = "Provisioning"
        case available = "Available"
        case awaiting = "Awaiting"
        case unavailable = "Unavailable"
        case deleted = "Deleted"
        case moved = "Moved"
        case shutdown = "Shutdown"
        case archived = "Archived"
        case starting = "Starting"
        case shuttingDown = "ShuttingDown"
        case failed = "Failed"
        case exporting = "Exporting"
        case updating = "Updating"
        case rebuilding = "Rebuilding"
    }

    /// Details about the codespace's git repository.
    public struct GitStatus: Codable {
        /// The number of commits the local repository is ahead of the remote.
        public var ahead: Int?
        /// The number of commits the local repository is behind the remote.
        public var behind: Int?
        /// Whether the local repository has unpushed changes.
        public var hasUnpushedChanges: Bool?
        /// Whether the local repository has uncommitted changes.
        public var hasUncommittedChanges: Bool?
        /// The current branch (or SHA if in detached HEAD state) of the local repository.
        ///
        /// Example: "main"
        public var ref: String?

        public init(ahead: Int? = nil, behind: Int? = nil, hasUnpushedChanges: Bool? = nil, hasUncommittedChanges: Bool? = nil, ref: String? = nil) {
            self.ahead = ahead
            self.behind = behind
            self.hasUnpushedChanges = hasUnpushedChanges
            self.hasUncommittedChanges = hasUncommittedChanges
            self.ref = ref
        }

        private enum CodingKeys: String, CodingKey {
            case ahead
            case behind
            case hasUnpushedChanges = "has_unpushed_changes"
            case hasUncommittedChanges = "has_uncommitted_changes"
            case ref
        }
    }

    /// The Azure region where this codespace is located.
    ///
    /// Example: "WestUs2"
    public enum Location: String, Codable, CaseIterable {
        case eastUs = "EastUs"
        case southEastAsia = "SouthEastAsia"
        case westEurope = "WestEurope"
        case westUs2 = "WestUs2"
    }

    public struct RuntimeConstraints: Codable {
        /// The privacy settings a user can select from when forwarding a port.
        public var allowedPortPrivacySettings: [String]?

        public init(allowedPortPrivacySettings: [String]? = nil) {
            self.allowedPortPrivacySettings = allowedPortPrivacySettings
        }

        private enum CodingKeys: String, CodingKey {
            case allowedPortPrivacySettings = "allowed_port_privacy_settings"
        }
    }

    public init(id: Int, name: String, environmentID: String? = nil, owner: SimpleUser, billableOwner: SimpleUser, repository: MinimalRepository, machine: CodespaceMachine? = nil, isPrebuild: Bool? = nil, createdAt: Date, updatedAt: Date, lastUsedAt: Date, state: State, url: URL, gitStatus: GitStatus, location: Location, idleTimeoutMinutes: Int? = nil, webURL: URL, machinesURL: URL, startURL: URL, stopURL: URL, pullsURL: URL? = nil, recentFolders: [String], runtimeConstraints: RuntimeConstraints? = nil) {
        self.id = id
        self.name = name
        self.environmentID = environmentID
        self.owner = owner
        self.billableOwner = billableOwner
        self.repository = repository
        self.machine = machine
        self.isPrebuild = isPrebuild
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.lastUsedAt = lastUsedAt
        self.state = state
        self.url = url
        self.gitStatus = gitStatus
        self.location = location
        self.idleTimeoutMinutes = idleTimeoutMinutes
        self.webURL = webURL
        self.machinesURL = machinesURL
        self.startURL = startURL
        self.stopURL = stopURL
        self.pullsURL = pullsURL
        self.recentFolders = recentFolders
        self.runtimeConstraints = runtimeConstraints
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case name
        case environmentID = "environment_id"
        case owner
        case billableOwner = "billable_owner"
        case repository
        case machine
        case isPrebuild = "prebuild"
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case lastUsedAt = "last_used_at"
        case state
        case url
        case gitStatus = "git_status"
        case location
        case idleTimeoutMinutes = "idle_timeout_minutes"
        case webURL = "web_url"
        case machinesURL = "machines_url"
        case startURL = "start_url"
        case stopURL = "stop_url"
        case pullsURL = "pulls_url"
        case recentFolders = "recent_folders"
        case runtimeConstraints = "runtime_constraints"
    }
}
