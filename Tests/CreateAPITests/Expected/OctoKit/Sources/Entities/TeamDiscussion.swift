// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// A team discussion is a persistent record of a free-form conversation within a team.
public struct TeamDiscussion: Codable {
    /// Simple User
    public var author: SimpleUser?
    /// The main text of the discussion.
    ///
    /// Example: "Please suggest improvements to our workflow in comments."
    public var body: String
    /// Example: "<p>Hi! This is an area for us to collaborate as a team</p>"
    public var bodyHTML: String
    /// The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
    ///
    /// Example: "0307116bbf7ced493b8d8a346c650b71"
    public var bodyVersion: String
    public var commentsCount: Int
    /// Example: "https://api.github.com/organizations/1/team/2343027/discussions/1/comments"
    public var commentsURL: URL
    /// Example: "2018-01-25T18:56:31Z"
    public var createdAt: Date
    public var lastEditedAt: Date?
    /// Example: "https://github.com/orgs/github/teams/justice-league/discussions/1"
    public var htmlURL: URL
    /// Example: "MDE0OlRlYW1EaXNjdXNzaW9uMQ=="
    public var nodeID: String
    /// The unique sequence number of a team discussion.
    ///
    /// Example: 42
    public var number: Int
    /// Whether or not this discussion should be pinned for easy retrieval.
    ///
    /// Example: true
    public var isPinned: Bool
    /// Whether or not this discussion should be restricted to team members and organization administrators.
    ///
    /// Example: true
    public var isPrivate: Bool
    /// Example: "https://api.github.com/organizations/1/team/2343027"
    public var teamURL: URL
    /// The title of the discussion.
    ///
    /// Example: "How can we improve our workflow?"
    public var title: String
    /// Example: "2018-01-25T18:56:31Z"
    public var updatedAt: Date
    /// Example: "https://api.github.com/organizations/1/team/2343027/discussions/1"
    public var url: URL
    /// Reaction Rollup
    public var reactions: ReactionRollup?

    public init(author: SimpleUser? = nil, body: String, bodyHTML: String, bodyVersion: String, commentsCount: Int, commentsURL: URL, createdAt: Date, lastEditedAt: Date? = nil, htmlURL: URL, nodeID: String, number: Int, isPinned: Bool, isPrivate: Bool, teamURL: URL, title: String, updatedAt: Date, url: URL, reactions: ReactionRollup? = nil) {
        self.author = author
        self.body = body
        self.bodyHTML = bodyHTML
        self.bodyVersion = bodyVersion
        self.commentsCount = commentsCount
        self.commentsURL = commentsURL
        self.createdAt = createdAt
        self.lastEditedAt = lastEditedAt
        self.htmlURL = htmlURL
        self.nodeID = nodeID
        self.number = number
        self.isPinned = isPinned
        self.isPrivate = isPrivate
        self.teamURL = teamURL
        self.title = title
        self.updatedAt = updatedAt
        self.url = url
        self.reactions = reactions
    }

    private enum CodingKeys: String, CodingKey {
        case author
        case body
        case bodyHTML = "body_html"
        case bodyVersion = "body_version"
        case commentsCount = "comments_count"
        case commentsURL = "comments_url"
        case createdAt = "created_at"
        case lastEditedAt = "last_edited_at"
        case htmlURL = "html_url"
        case nodeID = "node_id"
        case number
        case isPinned = "pinned"
        case isPrivate = "private"
        case teamURL = "team_url"
        case title
        case updatedAt = "updated_at"
        case url
        case reactions
    }
}
