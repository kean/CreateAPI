// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// A suite of checks performed on the code of a given code change
public struct CheckSuite: Codable {
    public var id: Int
    /// Example: "MDEwOkNoZWNrU3VpdGU1"
    public var nodeID: String
    /// Example: "master"
    public var headBranch: String?
    /// The SHA of the head commit that is being checked.
    ///
    /// Example: "009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d"
    public var headSha: String
    /// Example: "completed"
    public var status: Status?
    /// Example: "neutral"
    public var conclusion: Conclusion?
    /// Example: "https://api.github.com/repos/github/hello-world/check-suites/5"
    public var url: String?
    /// Example: "146e867f55c26428e5f9fade55a9bbf5e95a7912"
    public var before: String?
    /// Example: "d6fde92930d4715a2b49857d24b940956b26d2d3"
    public var after: String?
    public var pullRequests: [PullRequestMinimal]?
    /// GitHub app
    ///
    /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
    public var app: Integration?
    /// Minimal Repository
    public var repository: MinimalRepository
    public var createdAt: Date?
    public var updatedAt: Date?
    /// Simple Commit
    public var headCommit: SimpleCommit
    public var latestCheckRunsCount: Int
    public var checkRunsURL: String
    public var isRerequestable: Bool?
    public var isRunsRerequestable: Bool?

    /// Example: "completed"
    public enum Status: String, Codable, CaseIterable {
        case queued
        case inProgress = "in_progress"
        case completed
    }

    /// Example: "neutral"
    public enum Conclusion: String, Codable, CaseIterable {
        case success
        case failure
        case neutral
        case cancelled
        case skipped
        case timedOut = "timed_out"
        case actionRequired = "action_required"
    }

    public init(id: Int, nodeID: String, headBranch: String? = nil, headSha: String, status: Status? = nil, conclusion: Conclusion? = nil, url: String? = nil, before: String? = nil, after: String? = nil, pullRequests: [PullRequestMinimal]? = nil, app: Integration? = nil, repository: MinimalRepository, createdAt: Date? = nil, updatedAt: Date? = nil, headCommit: SimpleCommit, latestCheckRunsCount: Int, checkRunsURL: String, isRerequestable: Bool? = nil, isRunsRerequestable: Bool? = nil) {
        self.id = id
        self.nodeID = nodeID
        self.headBranch = headBranch
        self.headSha = headSha
        self.status = status
        self.conclusion = conclusion
        self.url = url
        self.before = before
        self.after = after
        self.pullRequests = pullRequests
        self.app = app
        self.repository = repository
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.headCommit = headCommit
        self.latestCheckRunsCount = latestCheckRunsCount
        self.checkRunsURL = checkRunsURL
        self.isRerequestable = isRerequestable
        self.isRunsRerequestable = isRunsRerequestable
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case nodeID = "node_id"
        case headBranch = "head_branch"
        case headSha = "head_sha"
        case status
        case conclusion
        case url
        case before
        case after
        case pullRequests = "pull_requests"
        case app
        case repository
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case headCommit = "head_commit"
        case latestCheckRunsCount = "latest_check_runs_count"
        case checkRunsURL = "check_runs_url"
        case isRerequestable = "rerequestable"
        case isRunsRerequestable = "runs_rerequestable"
    }
}
