// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct SimpleUser: Codable {
    public var name: String?
    public var email: String?
    /// Example: "octocat"
    public var login: String
    public var id: Int
    /// Example: "MDQ6VXNlcjE="
    public var nodeID: String
    /// Example: "https://github.com/images/error/octocat_happy.gif"
    public var avatarURL: URL
    /// Example: "41d064eb2195891e12d0413f63227ea7"
    public var gravatarID: String?
    /// Example: "https://api.github.com/users/octocat"
    public var url: URL
    /// Example: "https://github.com/octocat"
    public var htmlURL: URL
    /// Example: "https://api.github.com/users/octocat/followers"
    public var followersURL: URL
    /// Example: "https://api.github.com/users/octocat/following{/other_user}"
    public var followingURL: String
    /// Example: "https://api.github.com/users/octocat/gists{/gist_id}"
    public var gistsURL: String
    /// Example: "https://api.github.com/users/octocat/starred{/owner}{/repo}"
    public var starredURL: String
    /// Example: "https://api.github.com/users/octocat/subscriptions"
    public var subscriptionsURL: URL
    /// Example: "https://api.github.com/users/octocat/orgs"
    public var organizationsURL: URL
    /// Example: "https://api.github.com/users/octocat/repos"
    public var reposURL: URL
    /// Example: "https://api.github.com/users/octocat/events{/privacy}"
    public var eventsURL: String
    /// Example: "https://api.github.com/users/octocat/received_events"
    public var receivedEventsURL: URL
    /// Example: "User"
    public var type: String
    public var isSiteAdmin: Bool
    /// Example: "2020-07-09T00:17:55Z"
    public var starredAt: String?

    public init(name: String? = nil, email: String? = nil, login: String, id: Int, nodeID: String, avatarURL: URL, gravatarID: String? = nil, url: URL, htmlURL: URL, followersURL: URL, followingURL: String, gistsURL: String, starredURL: String, subscriptionsURL: URL, organizationsURL: URL, reposURL: URL, eventsURL: String, receivedEventsURL: URL, type: String, isSiteAdmin: Bool, starredAt: String? = nil) {
        self.name = name
        self.email = email
        self.login = login
        self.id = id
        self.nodeID = nodeID
        self.avatarURL = avatarURL
        self.gravatarID = gravatarID
        self.url = url
        self.htmlURL = htmlURL
        self.followersURL = followersURL
        self.followingURL = followingURL
        self.gistsURL = gistsURL
        self.starredURL = starredURL
        self.subscriptionsURL = subscriptionsURL
        self.organizationsURL = organizationsURL
        self.reposURL = reposURL
        self.eventsURL = eventsURL
        self.receivedEventsURL = receivedEventsURL
        self.type = type
        self.isSiteAdmin = isSiteAdmin
        self.starredAt = starredAt
    }

    private enum CodingKeys: String, CodingKey {
        case name
        case email
        case login
        case id
        case nodeID = "node_id"
        case avatarURL = "avatar_url"
        case gravatarID = "gravatar_id"
        case url
        case htmlURL = "html_url"
        case followersURL = "followers_url"
        case followingURL = "following_url"
        case gistsURL = "gists_url"
        case starredURL = "starred_url"
        case subscriptionsURL = "subscriptions_url"
        case organizationsURL = "organizations_url"
        case reposURL = "repos_url"
        case eventsURL = "events_url"
        case receivedEventsURL = "received_events_url"
        case type
        case isSiteAdmin = "site_admin"
        case starredAt = "starred_at"
    }
}
