// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Authentication token for a GitHub App installed on a user or org.
public struct InstallationToken: Codable {
    public var token: String
    public var expiresAt: String
    /// App Permissions
    ///
    /// The permissions granted to the user-to-server access token.
    ///
    /// Example:
    ///
    /// {
    ///   "contents" : "read",
    ///   "deployments" : "write",
    ///   "issues" : "read",
    ///   "single_file" : "read"
    /// }
    public var permissions: AppPermissions?
    public var repositorySelection: RepositorySelection?
    public var repositories: [Repository]?
    /// Example: "README.md"
    public var singleFile: String?
    /// Example: true
    public var hasMultipleSingleFiles: Bool?
    /// Example: ["config.yml", ".github/issue_TEMPLATE.md"]
    public var singleFilePaths: [String]?

    public enum RepositorySelection: String, Codable, CaseIterable {
        case all
        case selected
    }

    public init(token: String, expiresAt: String, permissions: AppPermissions? = nil, repositorySelection: RepositorySelection? = nil, repositories: [Repository]? = nil, singleFile: String? = nil, hasMultipleSingleFiles: Bool? = nil, singleFilePaths: [String]? = nil) {
        self.token = token
        self.expiresAt = expiresAt
        self.permissions = permissions
        self.repositorySelection = repositorySelection
        self.repositories = repositories
        self.singleFile = singleFile
        self.hasMultipleSingleFiles = hasMultipleSingleFiles
        self.singleFilePaths = singleFilePaths
    }

    private enum CodingKeys: String, CodingKey {
        case token
        case expiresAt = "expires_at"
        case permissions
        case repositorySelection = "repository_selection"
        case repositories
        case singleFile = "single_file"
        case hasMultipleSingleFiles = "has_multiple_single_files"
        case singleFilePaths = "single_file_paths"
    }
}
