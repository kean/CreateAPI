// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// A git repository
public struct Repository: Codable {
    /// Unique identifier of the repository
    ///
    /// Example: 42
    public var id: Int
    /// Example: "MDEwOlJlcG9zaXRvcnkxMjk2MjY5"
    public var nodeID: String
    /// The name of the repository.
    ///
    /// Example: "Team Environment"
    public var name: String
    /// Example: "octocat/Hello-World"
    public var fullName: String
    /// License Simple
    public var license: LicenseSimple?
    /// Simple User
    public var organization: SimpleUser?
    public var forks: Int
    public var permissions: Permissions?
    /// Simple User
    public var owner: SimpleUser
    /// Whether the repository is private or public.
    public var isPrivate: Bool
    /// Example: "https://github.com/octocat/Hello-World"
    public var htmlURL: URL
    /// Example: "This your first repo!"
    public var description: String?
    public var isFork: Bool
    /// Example: "https://api.github.com/repos/octocat/Hello-World"
    public var url: URL
    /// Example: "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}"
    public var archiveURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/assignees{/user}"
    public var assigneesURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}"
    public var blobsURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/branches{/branch}"
    public var branchesURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}"
    public var collaboratorsURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/comments{/number}"
    public var commentsURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/commits{/sha}"
    public var commitsURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}"
    public var compareURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/contents/{+path}"
    public var contentsURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/contributors"
    public var contributorsURL: URL
    /// Example: "http://api.github.com/repos/octocat/Hello-World/deployments"
    public var deploymentsURL: URL
    /// Example: "http://api.github.com/repos/octocat/Hello-World/downloads"
    public var downloadsURL: URL
    /// Example: "http://api.github.com/repos/octocat/Hello-World/events"
    public var eventsURL: URL
    /// Example: "http://api.github.com/repos/octocat/Hello-World/forks"
    public var forksURL: URL
    /// Example: "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}"
    public var gitCommitsURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}"
    public var gitRefsURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}"
    public var gitTagsURL: String
    /// Example: "git:github.com/octocat/Hello-World.git"
    public var gitURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}"
    public var issueCommentURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}"
    public var issueEventsURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/issues{/number}"
    public var issuesURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}"
    public var keysURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/labels{/name}"
    public var labelsURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/languages"
    public var languagesURL: URL
    /// Example: "http://api.github.com/repos/octocat/Hello-World/merges"
    public var mergesURL: URL
    /// Example: "http://api.github.com/repos/octocat/Hello-World/milestones{/number}"
    public var milestonesURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}"
    public var notificationsURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/pulls{/number}"
    public var pullsURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/releases{/id}"
    public var releasesURL: String
    /// Example: "git@github.com:octocat/Hello-World.git"
    public var sshURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/stargazers"
    public var stargazersURL: URL
    /// Example: "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}"
    public var statusesURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/subscribers"
    public var subscribersURL: URL
    /// Example: "http://api.github.com/repos/octocat/Hello-World/subscription"
    public var subscriptionURL: URL
    /// Example: "http://api.github.com/repos/octocat/Hello-World/tags"
    public var tagsURL: URL
    /// Example: "http://api.github.com/repos/octocat/Hello-World/teams"
    public var teamsURL: URL
    /// Example: "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"
    public var treesURL: String
    /// Example: "https://github.com/octocat/Hello-World.git"
    public var cloneURL: String
    /// Example: "git:git.example.com/octocat/Hello-World"
    public var mirrorURL: URL?
    /// Example: "http://api.github.com/repos/octocat/Hello-World/hooks"
    public var hooksURL: URL
    /// Example: "https://svn.github.com/octocat/Hello-World"
    public var svnURL: URL
    /// Example: "https://github.com"
    public var homepage: URL?
    public var language: String?
    public var forksCount: Int
    /// Example: 80
    public var stargazersCount: Int
    /// Example: 80
    public var watchersCount: Int
    /// Example: 108
    public var size: Int
    /// The default branch of the repository.
    ///
    /// Example: "master"
    public var defaultBranch: String
    public var openIssuesCount: Int
    /// Whether this repository acts as a template that can be used to generate new repositories.
    ///
    /// Example: true
    public var isTemplate: Bool
    public var topics: [String]?
    /// Whether issues are enabled.
    ///
    /// Example: true
    public var hasIssues: Bool
    /// Whether projects are enabled.
    ///
    /// Example: true
    public var hasProjects: Bool
    /// Whether the wiki is enabled.
    ///
    /// Example: true
    public var hasWiki: Bool
    public var hasPages: Bool
    /// Whether downloads are enabled.
    ///
    /// Example: true
    public var hasDownloads: Bool
    /// Whether the repository is archived.
    public var isArchived: Bool
    /// Returns whether or not this repository disabled.
    public var isDisabled: Bool
    /// The repository visibility: public, private, or internal.
    public var visibility: String?
    /// Example: "2011-01-26T19:06:43Z"
    public var pushedAt: Date?
    /// Example: "2011-01-26T19:01:12Z"
    public var createdAt: Date?
    /// Example: "2011-01-26T19:14:43Z"
    public var updatedAt: Date?
    /// Whether to allow rebase merges for pull requests.
    ///
    /// Example: true
    public var allowRebaseMerge: Bool
    public var templateRepository: TemplateRepository?
    public var tempCloneToken: String?
    /// Whether to allow squash merges for pull requests.
    ///
    /// Example: true
    public var allowSquashMerge: Bool
    /// Whether to allow Auto-merge to be used on pull requests.
    ///
    /// Example: false
    public var allowAutoMerge: Bool
    /// Whether to delete head branches when pull requests are merged
    ///
    /// Example: false
    public var deleteBranchOnMerge: Bool
    /// Whether to allow merge commits for pull requests.
    ///
    /// Example: true
    public var allowMergeCommit: Bool
    /// Whether to allow forking this repo
    public var allowForking: Bool?
    public var subscribersCount: Int?
    public var networkCount: Int?
    public var openIssues: Int
    public var watchers: Int
    public var masterBranch: String?
    /// Example: "2020-07-09T00:17:42Z"
    public var starredAt: String?

    public struct Permissions: Codable {
        public var isAdmin: Bool
        public var isPull: Bool
        public var isTriage: Bool?
        public var isPush: Bool
        public var isMaintain: Bool?

        public init(isAdmin: Bool, isPull: Bool, isTriage: Bool? = nil, isPush: Bool, isMaintain: Bool? = nil) {
            self.isAdmin = isAdmin
            self.isPull = isPull
            self.isTriage = isTriage
            self.isPush = isPush
            self.isMaintain = isMaintain
        }

        private enum CodingKeys: String, CodingKey {
            case isAdmin = "admin"
            case isPull = "pull"
            case isTriage = "triage"
            case isPush = "push"
            case isMaintain = "maintain"
        }
    }

    public struct TemplateRepository: Codable {
        public var id: Int?
        public var nodeID: String?
        public var name: String?
        public var fullName: String?
        public var owner: Owner?
        public var isPrivate: Bool?
        public var htmlURL: String?
        public var description: String?
        public var isFork: Bool?
        public var url: String?
        public var archiveURL: String?
        public var assigneesURL: String?
        public var blobsURL: String?
        public var branchesURL: String?
        public var collaboratorsURL: String?
        public var commentsURL: String?
        public var commitsURL: String?
        public var compareURL: String?
        public var contentsURL: String?
        public var contributorsURL: String?
        public var deploymentsURL: String?
        public var downloadsURL: String?
        public var eventsURL: String?
        public var forksURL: String?
        public var gitCommitsURL: String?
        public var gitRefsURL: String?
        public var gitTagsURL: String?
        public var gitURL: String?
        public var issueCommentURL: String?
        public var issueEventsURL: String?
        public var issuesURL: String?
        public var keysURL: String?
        public var labelsURL: String?
        public var languagesURL: String?
        public var mergesURL: String?
        public var milestonesURL: String?
        public var notificationsURL: String?
        public var pullsURL: String?
        public var releasesURL: String?
        public var sshURL: String?
        public var stargazersURL: String?
        public var statusesURL: String?
        public var subscribersURL: String?
        public var subscriptionURL: String?
        public var tagsURL: String?
        public var teamsURL: String?
        public var treesURL: String?
        public var cloneURL: String?
        public var mirrorURL: String?
        public var hooksURL: String?
        public var svnURL: String?
        public var homepage: String?
        public var language: String?
        public var forksCount: Int?
        public var stargazersCount: Int?
        public var watchersCount: Int?
        public var size: Int?
        public var defaultBranch: String?
        public var openIssuesCount: Int?
        public var isTemplate: Bool?
        public var topics: [String]?
        public var hasIssues: Bool?
        public var hasProjects: Bool?
        public var hasWiki: Bool?
        public var hasPages: Bool?
        public var hasDownloads: Bool?
        public var isArchived: Bool?
        public var isDisabled: Bool?
        public var visibility: String?
        public var pushedAt: String?
        public var createdAt: String?
        public var updatedAt: String?
        public var permissions: Permissions?
        public var allowRebaseMerge: Bool?
        public var tempCloneToken: String?
        public var allowSquashMerge: Bool?
        public var allowAutoMerge: Bool?
        public var deleteBranchOnMerge: Bool?
        public var allowUpdateBranch: Bool?
        public var allowMergeCommit: Bool?
        public var subscribersCount: Int?
        public var networkCount: Int?

        public struct Owner: Codable {
            public var login: String?
            public var id: Int?
            public var nodeID: String?
            public var avatarURL: String?
            public var gravatarID: String?
            public var url: String?
            public var htmlURL: String?
            public var followersURL: String?
            public var followingURL: String?
            public var gistsURL: String?
            public var starredURL: String?
            public var subscriptionsURL: String?
            public var organizationsURL: String?
            public var reposURL: String?
            public var eventsURL: String?
            public var receivedEventsURL: String?
            public var type: String?
            public var isSiteAdmin: Bool?

            public init(login: String? = nil, id: Int? = nil, nodeID: String? = nil, avatarURL: String? = nil, gravatarID: String? = nil, url: String? = nil, htmlURL: String? = nil, followersURL: String? = nil, followingURL: String? = nil, gistsURL: String? = nil, starredURL: String? = nil, subscriptionsURL: String? = nil, organizationsURL: String? = nil, reposURL: String? = nil, eventsURL: String? = nil, receivedEventsURL: String? = nil, type: String? = nil, isSiteAdmin: Bool? = nil) {
                self.login = login
                self.id = id
                self.nodeID = nodeID
                self.avatarURL = avatarURL
                self.gravatarID = gravatarID
                self.url = url
                self.htmlURL = htmlURL
                self.followersURL = followersURL
                self.followingURL = followingURL
                self.gistsURL = gistsURL
                self.starredURL = starredURL
                self.subscriptionsURL = subscriptionsURL
                self.organizationsURL = organizationsURL
                self.reposURL = reposURL
                self.eventsURL = eventsURL
                self.receivedEventsURL = receivedEventsURL
                self.type = type
                self.isSiteAdmin = isSiteAdmin
            }

            private enum CodingKeys: String, CodingKey {
                case login
                case id
                case nodeID = "node_id"
                case avatarURL = "avatar_url"
                case gravatarID = "gravatar_id"
                case url
                case htmlURL = "html_url"
                case followersURL = "followers_url"
                case followingURL = "following_url"
                case gistsURL = "gists_url"
                case starredURL = "starred_url"
                case subscriptionsURL = "subscriptions_url"
                case organizationsURL = "organizations_url"
                case reposURL = "repos_url"
                case eventsURL = "events_url"
                case receivedEventsURL = "received_events_url"
                case type
                case isSiteAdmin = "site_admin"
            }
        }

        public struct Permissions: Codable {
            public var isAdmin: Bool?
            public var isMaintain: Bool?
            public var isPush: Bool?
            public var isTriage: Bool?
            public var isPull: Bool?

            public init(isAdmin: Bool? = nil, isMaintain: Bool? = nil, isPush: Bool? = nil, isTriage: Bool? = nil, isPull: Bool? = nil) {
                self.isAdmin = isAdmin
                self.isMaintain = isMaintain
                self.isPush = isPush
                self.isTriage = isTriage
                self.isPull = isPull
            }

            private enum CodingKeys: String, CodingKey {
                case isAdmin = "admin"
                case isMaintain = "maintain"
                case isPush = "push"
                case isTriage = "triage"
                case isPull = "pull"
            }
        }

        public init(id: Int? = nil, nodeID: String? = nil, name: String? = nil, fullName: String? = nil, owner: Owner? = nil, isPrivate: Bool? = nil, htmlURL: String? = nil, description: String? = nil, isFork: Bool? = nil, url: String? = nil, archiveURL: String? = nil, assigneesURL: String? = nil, blobsURL: String? = nil, branchesURL: String? = nil, collaboratorsURL: String? = nil, commentsURL: String? = nil, commitsURL: String? = nil, compareURL: String? = nil, contentsURL: String? = nil, contributorsURL: String? = nil, deploymentsURL: String? = nil, downloadsURL: String? = nil, eventsURL: String? = nil, forksURL: String? = nil, gitCommitsURL: String? = nil, gitRefsURL: String? = nil, gitTagsURL: String? = nil, gitURL: String? = nil, issueCommentURL: String? = nil, issueEventsURL: String? = nil, issuesURL: String? = nil, keysURL: String? = nil, labelsURL: String? = nil, languagesURL: String? = nil, mergesURL: String? = nil, milestonesURL: String? = nil, notificationsURL: String? = nil, pullsURL: String? = nil, releasesURL: String? = nil, sshURL: String? = nil, stargazersURL: String? = nil, statusesURL: String? = nil, subscribersURL: String? = nil, subscriptionURL: String? = nil, tagsURL: String? = nil, teamsURL: String? = nil, treesURL: String? = nil, cloneURL: String? = nil, mirrorURL: String? = nil, hooksURL: String? = nil, svnURL: String? = nil, homepage: String? = nil, language: String? = nil, forksCount: Int? = nil, stargazersCount: Int? = nil, watchersCount: Int? = nil, size: Int? = nil, defaultBranch: String? = nil, openIssuesCount: Int? = nil, isTemplate: Bool? = nil, topics: [String]? = nil, hasIssues: Bool? = nil, hasProjects: Bool? = nil, hasWiki: Bool? = nil, hasPages: Bool? = nil, hasDownloads: Bool? = nil, isArchived: Bool? = nil, isDisabled: Bool? = nil, visibility: String? = nil, pushedAt: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, permissions: Permissions? = nil, allowRebaseMerge: Bool? = nil, tempCloneToken: String? = nil, allowSquashMerge: Bool? = nil, allowAutoMerge: Bool? = nil, deleteBranchOnMerge: Bool? = nil, allowUpdateBranch: Bool? = nil, allowMergeCommit: Bool? = nil, subscribersCount: Int? = nil, networkCount: Int? = nil) {
            self.id = id
            self.nodeID = nodeID
            self.name = name
            self.fullName = fullName
            self.owner = owner
            self.isPrivate = isPrivate
            self.htmlURL = htmlURL
            self.description = description
            self.isFork = isFork
            self.url = url
            self.archiveURL = archiveURL
            self.assigneesURL = assigneesURL
            self.blobsURL = blobsURL
            self.branchesURL = branchesURL
            self.collaboratorsURL = collaboratorsURL
            self.commentsURL = commentsURL
            self.commitsURL = commitsURL
            self.compareURL = compareURL
            self.contentsURL = contentsURL
            self.contributorsURL = contributorsURL
            self.deploymentsURL = deploymentsURL
            self.downloadsURL = downloadsURL
            self.eventsURL = eventsURL
            self.forksURL = forksURL
            self.gitCommitsURL = gitCommitsURL
            self.gitRefsURL = gitRefsURL
            self.gitTagsURL = gitTagsURL
            self.gitURL = gitURL
            self.issueCommentURL = issueCommentURL
            self.issueEventsURL = issueEventsURL
            self.issuesURL = issuesURL
            self.keysURL = keysURL
            self.labelsURL = labelsURL
            self.languagesURL = languagesURL
            self.mergesURL = mergesURL
            self.milestonesURL = milestonesURL
            self.notificationsURL = notificationsURL
            self.pullsURL = pullsURL
            self.releasesURL = releasesURL
            self.sshURL = sshURL
            self.stargazersURL = stargazersURL
            self.statusesURL = statusesURL
            self.subscribersURL = subscribersURL
            self.subscriptionURL = subscriptionURL
            self.tagsURL = tagsURL
            self.teamsURL = teamsURL
            self.treesURL = treesURL
            self.cloneURL = cloneURL
            self.mirrorURL = mirrorURL
            self.hooksURL = hooksURL
            self.svnURL = svnURL
            self.homepage = homepage
            self.language = language
            self.forksCount = forksCount
            self.stargazersCount = stargazersCount
            self.watchersCount = watchersCount
            self.size = size
            self.defaultBranch = defaultBranch
            self.openIssuesCount = openIssuesCount
            self.isTemplate = isTemplate
            self.topics = topics
            self.hasIssues = hasIssues
            self.hasProjects = hasProjects
            self.hasWiki = hasWiki
            self.hasPages = hasPages
            self.hasDownloads = hasDownloads
            self.isArchived = isArchived
            self.isDisabled = isDisabled
            self.visibility = visibility
            self.pushedAt = pushedAt
            self.createdAt = createdAt
            self.updatedAt = updatedAt
            self.permissions = permissions
            self.allowRebaseMerge = allowRebaseMerge
            self.tempCloneToken = tempCloneToken
            self.allowSquashMerge = allowSquashMerge
            self.allowAutoMerge = allowAutoMerge
            self.deleteBranchOnMerge = deleteBranchOnMerge
            self.allowUpdateBranch = allowUpdateBranch
            self.allowMergeCommit = allowMergeCommit
            self.subscribersCount = subscribersCount
            self.networkCount = networkCount
        }

        private enum CodingKeys: String, CodingKey {
            case id
            case nodeID = "node_id"
            case name
            case fullName = "full_name"
            case owner
            case isPrivate = "private"
            case htmlURL = "html_url"
            case description
            case isFork = "fork"
            case url
            case archiveURL = "archive_url"
            case assigneesURL = "assignees_url"
            case blobsURL = "blobs_url"
            case branchesURL = "branches_url"
            case collaboratorsURL = "collaborators_url"
            case commentsURL = "comments_url"
            case commitsURL = "commits_url"
            case compareURL = "compare_url"
            case contentsURL = "contents_url"
            case contributorsURL = "contributors_url"
            case deploymentsURL = "deployments_url"
            case downloadsURL = "downloads_url"
            case eventsURL = "events_url"
            case forksURL = "forks_url"
            case gitCommitsURL = "git_commits_url"
            case gitRefsURL = "git_refs_url"
            case gitTagsURL = "git_tags_url"
            case gitURL = "git_url"
            case issueCommentURL = "issue_comment_url"
            case issueEventsURL = "issue_events_url"
            case issuesURL = "issues_url"
            case keysURL = "keys_url"
            case labelsURL = "labels_url"
            case languagesURL = "languages_url"
            case mergesURL = "merges_url"
            case milestonesURL = "milestones_url"
            case notificationsURL = "notifications_url"
            case pullsURL = "pulls_url"
            case releasesURL = "releases_url"
            case sshURL = "ssh_url"
            case stargazersURL = "stargazers_url"
            case statusesURL = "statuses_url"
            case subscribersURL = "subscribers_url"
            case subscriptionURL = "subscription_url"
            case tagsURL = "tags_url"
            case teamsURL = "teams_url"
            case treesURL = "trees_url"
            case cloneURL = "clone_url"
            case mirrorURL = "mirror_url"
            case hooksURL = "hooks_url"
            case svnURL = "svn_url"
            case homepage
            case language
            case forksCount = "forks_count"
            case stargazersCount = "stargazers_count"
            case watchersCount = "watchers_count"
            case size
            case defaultBranch = "default_branch"
            case openIssuesCount = "open_issues_count"
            case isTemplate = "is_template"
            case topics
            case hasIssues = "has_issues"
            case hasProjects = "has_projects"
            case hasWiki = "has_wiki"
            case hasPages = "has_pages"
            case hasDownloads = "has_downloads"
            case isArchived = "archived"
            case isDisabled = "disabled"
            case visibility
            case pushedAt = "pushed_at"
            case createdAt = "created_at"
            case updatedAt = "updated_at"
            case permissions
            case allowRebaseMerge = "allow_rebase_merge"
            case tempCloneToken = "temp_clone_token"
            case allowSquashMerge = "allow_squash_merge"
            case allowAutoMerge = "allow_auto_merge"
            case deleteBranchOnMerge = "delete_branch_on_merge"
            case allowUpdateBranch = "allow_update_branch"
            case allowMergeCommit = "allow_merge_commit"
            case subscribersCount = "subscribers_count"
            case networkCount = "network_count"
        }
    }

    public init(id: Int, nodeID: String, name: String, fullName: String, license: LicenseSimple? = nil, organization: SimpleUser? = nil, forks: Int, permissions: Permissions? = nil, owner: SimpleUser, isPrivate: Bool, htmlURL: URL, description: String? = nil, isFork: Bool, url: URL, archiveURL: String, assigneesURL: String, blobsURL: String, branchesURL: String, collaboratorsURL: String, commentsURL: String, commitsURL: String, compareURL: String, contentsURL: String, contributorsURL: URL, deploymentsURL: URL, downloadsURL: URL, eventsURL: URL, forksURL: URL, gitCommitsURL: String, gitRefsURL: String, gitTagsURL: String, gitURL: String, issueCommentURL: String, issueEventsURL: String, issuesURL: String, keysURL: String, labelsURL: String, languagesURL: URL, mergesURL: URL, milestonesURL: String, notificationsURL: String, pullsURL: String, releasesURL: String, sshURL: String, stargazersURL: URL, statusesURL: String, subscribersURL: URL, subscriptionURL: URL, tagsURL: URL, teamsURL: URL, treesURL: String, cloneURL: String, mirrorURL: URL? = nil, hooksURL: URL, svnURL: URL, homepage: URL? = nil, language: String? = nil, forksCount: Int, stargazersCount: Int, watchersCount: Int, size: Int, defaultBranch: String, openIssuesCount: Int, isTemplate: Bool? = nil, topics: [String]? = nil, hasIssues: Bool, hasProjects: Bool, hasWiki: Bool, hasPages: Bool, hasDownloads: Bool, isArchived: Bool, isDisabled: Bool, visibility: String? = nil, pushedAt: Date? = nil, createdAt: Date? = nil, updatedAt: Date? = nil, allowRebaseMerge: Bool? = nil, templateRepository: TemplateRepository? = nil, tempCloneToken: String? = nil, allowSquashMerge: Bool? = nil, allowAutoMerge: Bool? = nil, deleteBranchOnMerge: Bool? = nil, allowMergeCommit: Bool? = nil, allowForking: Bool? = nil, subscribersCount: Int? = nil, networkCount: Int? = nil, openIssues: Int, watchers: Int, masterBranch: String? = nil, starredAt: String? = nil) {
        self.id = id
        self.nodeID = nodeID
        self.name = name
        self.fullName = fullName
        self.license = license
        self.organization = organization
        self.forks = forks
        self.permissions = permissions
        self.owner = owner
        self.isPrivate = isPrivate
        self.htmlURL = htmlURL
        self.description = description
        self.isFork = isFork
        self.url = url
        self.archiveURL = archiveURL
        self.assigneesURL = assigneesURL
        self.blobsURL = blobsURL
        self.branchesURL = branchesURL
        self.collaboratorsURL = collaboratorsURL
        self.commentsURL = commentsURL
        self.commitsURL = commitsURL
        self.compareURL = compareURL
        self.contentsURL = contentsURL
        self.contributorsURL = contributorsURL
        self.deploymentsURL = deploymentsURL
        self.downloadsURL = downloadsURL
        self.eventsURL = eventsURL
        self.forksURL = forksURL
        self.gitCommitsURL = gitCommitsURL
        self.gitRefsURL = gitRefsURL
        self.gitTagsURL = gitTagsURL
        self.gitURL = gitURL
        self.issueCommentURL = issueCommentURL
        self.issueEventsURL = issueEventsURL
        self.issuesURL = issuesURL
        self.keysURL = keysURL
        self.labelsURL = labelsURL
        self.languagesURL = languagesURL
        self.mergesURL = mergesURL
        self.milestonesURL = milestonesURL
        self.notificationsURL = notificationsURL
        self.pullsURL = pullsURL
        self.releasesURL = releasesURL
        self.sshURL = sshURL
        self.stargazersURL = stargazersURL
        self.statusesURL = statusesURL
        self.subscribersURL = subscribersURL
        self.subscriptionURL = subscriptionURL
        self.tagsURL = tagsURL
        self.teamsURL = teamsURL
        self.treesURL = treesURL
        self.cloneURL = cloneURL
        self.mirrorURL = mirrorURL
        self.hooksURL = hooksURL
        self.svnURL = svnURL
        self.homepage = homepage
        self.language = language
        self.forksCount = forksCount
        self.stargazersCount = stargazersCount
        self.watchersCount = watchersCount
        self.size = size
        self.defaultBranch = defaultBranch
        self.openIssuesCount = openIssuesCount
        self.isTemplate = isTemplate ?? false
        self.topics = topics
        self.hasIssues = hasIssues
        self.hasProjects = hasProjects
        self.hasWiki = hasWiki
        self.hasPages = hasPages
        self.hasDownloads = hasDownloads
        self.isArchived = isArchived
        self.isDisabled = isDisabled
        self.visibility = visibility
        self.pushedAt = pushedAt
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.allowRebaseMerge = allowRebaseMerge ?? true
        self.templateRepository = templateRepository
        self.tempCloneToken = tempCloneToken
        self.allowSquashMerge = allowSquashMerge ?? true
        self.allowAutoMerge = allowAutoMerge ?? false
        self.deleteBranchOnMerge = deleteBranchOnMerge ?? false
        self.allowMergeCommit = allowMergeCommit ?? true
        self.allowForking = allowForking
        self.subscribersCount = subscribersCount
        self.networkCount = networkCount
        self.openIssues = openIssues
        self.watchers = watchers
        self.masterBranch = masterBranch
        self.starredAt = starredAt
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case nodeID = "node_id"
        case name
        case fullName = "full_name"
        case license
        case organization
        case forks
        case permissions
        case owner
        case isPrivate = "private"
        case htmlURL = "html_url"
        case description
        case isFork = "fork"
        case url
        case archiveURL = "archive_url"
        case assigneesURL = "assignees_url"
        case blobsURL = "blobs_url"
        case branchesURL = "branches_url"
        case collaboratorsURL = "collaborators_url"
        case commentsURL = "comments_url"
        case commitsURL = "commits_url"
        case compareURL = "compare_url"
        case contentsURL = "contents_url"
        case contributorsURL = "contributors_url"
        case deploymentsURL = "deployments_url"
        case downloadsURL = "downloads_url"
        case eventsURL = "events_url"
        case forksURL = "forks_url"
        case gitCommitsURL = "git_commits_url"
        case gitRefsURL = "git_refs_url"
        case gitTagsURL = "git_tags_url"
        case gitURL = "git_url"
        case issueCommentURL = "issue_comment_url"
        case issueEventsURL = "issue_events_url"
        case issuesURL = "issues_url"
        case keysURL = "keys_url"
        case labelsURL = "labels_url"
        case languagesURL = "languages_url"
        case mergesURL = "merges_url"
        case milestonesURL = "milestones_url"
        case notificationsURL = "notifications_url"
        case pullsURL = "pulls_url"
        case releasesURL = "releases_url"
        case sshURL = "ssh_url"
        case stargazersURL = "stargazers_url"
        case statusesURL = "statuses_url"
        case subscribersURL = "subscribers_url"
        case subscriptionURL = "subscription_url"
        case tagsURL = "tags_url"
        case teamsURL = "teams_url"
        case treesURL = "trees_url"
        case cloneURL = "clone_url"
        case mirrorURL = "mirror_url"
        case hooksURL = "hooks_url"
        case svnURL = "svn_url"
        case homepage
        case language
        case forksCount = "forks_count"
        case stargazersCount = "stargazers_count"
        case watchersCount = "watchers_count"
        case size
        case defaultBranch = "default_branch"
        case openIssuesCount = "open_issues_count"
        case isTemplate = "is_template"
        case topics
        case hasIssues = "has_issues"
        case hasProjects = "has_projects"
        case hasWiki = "has_wiki"
        case hasPages = "has_pages"
        case hasDownloads = "has_downloads"
        case isArchived = "archived"
        case isDisabled = "disabled"
        case visibility
        case pushedAt = "pushed_at"
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case allowRebaseMerge = "allow_rebase_merge"
        case templateRepository = "template_repository"
        case tempCloneToken = "temp_clone_token"
        case allowSquashMerge = "allow_squash_merge"
        case allowAutoMerge = "allow_auto_merge"
        case deleteBranchOnMerge = "delete_branch_on_merge"
        case allowMergeCommit = "allow_merge_commit"
        case allowForking = "allow_forking"
        case subscribersCount = "subscribers_count"
        case networkCount = "network_count"
        case openIssues = "open_issues"
        case watchers
        case masterBranch = "master_branch"
        case starredAt = "starred_at"
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        self.id = try values.decode(Int.self, forKey: .id)
        self.nodeID = try values.decode(String.self, forKey: .nodeID)
        self.name = try values.decode(String.self, forKey: .name)
        self.fullName = try values.decode(String.self, forKey: .fullName)
        self.license = try values.decodeIfPresent(LicenseSimple.self, forKey: .license)
        self.organization = try values.decodeIfPresent(SimpleUser.self, forKey: .organization)
        self.forks = try values.decode(Int.self, forKey: .forks)
        self.permissions = try values.decodeIfPresent(Permissions.self, forKey: .permissions)
        self.owner = try values.decode(SimpleUser.self, forKey: .owner)
        self.isPrivate = try values.decode(Bool.self, forKey: .isPrivate)
        self.htmlURL = try values.decode(URL.self, forKey: .htmlURL)
        self.description = try values.decodeIfPresent(String.self, forKey: .description)
        self.isFork = try values.decode(Bool.self, forKey: .isFork)
        self.url = try values.decode(URL.self, forKey: .url)
        self.archiveURL = try values.decode(String.self, forKey: .archiveURL)
        self.assigneesURL = try values.decode(String.self, forKey: .assigneesURL)
        self.blobsURL = try values.decode(String.self, forKey: .blobsURL)
        self.branchesURL = try values.decode(String.self, forKey: .branchesURL)
        self.collaboratorsURL = try values.decode(String.self, forKey: .collaboratorsURL)
        self.commentsURL = try values.decode(String.self, forKey: .commentsURL)
        self.commitsURL = try values.decode(String.self, forKey: .commitsURL)
        self.compareURL = try values.decode(String.self, forKey: .compareURL)
        self.contentsURL = try values.decode(String.self, forKey: .contentsURL)
        self.contributorsURL = try values.decode(URL.self, forKey: .contributorsURL)
        self.deploymentsURL = try values.decode(URL.self, forKey: .deploymentsURL)
        self.downloadsURL = try values.decode(URL.self, forKey: .downloadsURL)
        self.eventsURL = try values.decode(URL.self, forKey: .eventsURL)
        self.forksURL = try values.decode(URL.self, forKey: .forksURL)
        self.gitCommitsURL = try values.decode(String.self, forKey: .gitCommitsURL)
        self.gitRefsURL = try values.decode(String.self, forKey: .gitRefsURL)
        self.gitTagsURL = try values.decode(String.self, forKey: .gitTagsURL)
        self.gitURL = try values.decode(String.self, forKey: .gitURL)
        self.issueCommentURL = try values.decode(String.self, forKey: .issueCommentURL)
        self.issueEventsURL = try values.decode(String.self, forKey: .issueEventsURL)
        self.issuesURL = try values.decode(String.self, forKey: .issuesURL)
        self.keysURL = try values.decode(String.self, forKey: .keysURL)
        self.labelsURL = try values.decode(String.self, forKey: .labelsURL)
        self.languagesURL = try values.decode(URL.self, forKey: .languagesURL)
        self.mergesURL = try values.decode(URL.self, forKey: .mergesURL)
        self.milestonesURL = try values.decode(String.self, forKey: .milestonesURL)
        self.notificationsURL = try values.decode(String.self, forKey: .notificationsURL)
        self.pullsURL = try values.decode(String.self, forKey: .pullsURL)
        self.releasesURL = try values.decode(String.self, forKey: .releasesURL)
        self.sshURL = try values.decode(String.self, forKey: .sshURL)
        self.stargazersURL = try values.decode(URL.self, forKey: .stargazersURL)
        self.statusesURL = try values.decode(String.self, forKey: .statusesURL)
        self.subscribersURL = try values.decode(URL.self, forKey: .subscribersURL)
        self.subscriptionURL = try values.decode(URL.self, forKey: .subscriptionURL)
        self.tagsURL = try values.decode(URL.self, forKey: .tagsURL)
        self.teamsURL = try values.decode(URL.self, forKey: .teamsURL)
        self.treesURL = try values.decode(String.self, forKey: .treesURL)
        self.cloneURL = try values.decode(String.self, forKey: .cloneURL)
        self.mirrorURL = try values.decodeIfPresent(URL.self, forKey: .mirrorURL)
        self.hooksURL = try values.decode(URL.self, forKey: .hooksURL)
        self.svnURL = try values.decode(URL.self, forKey: .svnURL)
        self.homepage = try values.decodeIfPresent(URL.self, forKey: .homepage)
        self.language = try values.decodeIfPresent(String.self, forKey: .language)
        self.forksCount = try values.decode(Int.self, forKey: .forksCount)
        self.stargazersCount = try values.decode(Int.self, forKey: .stargazersCount)
        self.watchersCount = try values.decode(Int.self, forKey: .watchersCount)
        self.size = try values.decode(Int.self, forKey: .size)
        self.defaultBranch = try values.decode(String.self, forKey: .defaultBranch)
        self.openIssuesCount = try values.decode(Int.self, forKey: .openIssuesCount)
        self.isTemplate = try values.decodeIfPresent(Bool.self, forKey: .isTemplate) ?? false
        self.topics = try values.decodeIfPresent([String].self, forKey: .topics)
        self.hasIssues = try values.decode(Bool.self, forKey: .hasIssues)
        self.hasProjects = try values.decode(Bool.self, forKey: .hasProjects)
        self.hasWiki = try values.decode(Bool.self, forKey: .hasWiki)
        self.hasPages = try values.decode(Bool.self, forKey: .hasPages)
        self.hasDownloads = try values.decode(Bool.self, forKey: .hasDownloads)
        self.isArchived = try values.decode(Bool.self, forKey: .isArchived)
        self.isDisabled = try values.decode(Bool.self, forKey: .isDisabled)
        self.visibility = try values.decodeIfPresent(String.self, forKey: .visibility)
        self.pushedAt = try values.decodeIfPresent(Date.self, forKey: .pushedAt)
        self.createdAt = try values.decodeIfPresent(Date.self, forKey: .createdAt)
        self.updatedAt = try values.decodeIfPresent(Date.self, forKey: .updatedAt)
        self.allowRebaseMerge = try values.decodeIfPresent(Bool.self, forKey: .allowRebaseMerge) ?? true
        self.templateRepository = try values.decodeIfPresent(TemplateRepository.self, forKey: .templateRepository)
        self.tempCloneToken = try values.decodeIfPresent(String.self, forKey: .tempCloneToken)
        self.allowSquashMerge = try values.decodeIfPresent(Bool.self, forKey: .allowSquashMerge) ?? true
        self.allowAutoMerge = try values.decodeIfPresent(Bool.self, forKey: .allowAutoMerge) ?? false
        self.deleteBranchOnMerge = try values.decodeIfPresent(Bool.self, forKey: .deleteBranchOnMerge) ?? false
        self.allowMergeCommit = try values.decodeIfPresent(Bool.self, forKey: .allowMergeCommit) ?? true
        self.allowForking = try values.decodeIfPresent(Bool.self, forKey: .allowForking)
        self.subscribersCount = try values.decodeIfPresent(Int.self, forKey: .subscribersCount)
        self.networkCount = try values.decodeIfPresent(Int.self, forKey: .networkCount)
        self.openIssues = try values.decode(Int.self, forKey: .openIssues)
        self.watchers = try values.decode(Int.self, forKey: .watchers)
        self.masterBranch = try values.decodeIfPresent(String.self, forKey: .masterBranch)
        self.starredAt = try values.decodeIfPresent(String.self, forKey: .starredAt)
    }
}
