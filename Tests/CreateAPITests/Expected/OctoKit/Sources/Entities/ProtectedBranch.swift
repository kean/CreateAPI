// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Branch protections protect branches
public struct ProtectedBranch: Codable {
    public var url: URL
    /// Status Check Policy
    public var requiredStatusChecks: StatusCheckPolicy?
    public var requiredPullRequestReviews: RequiredPullRequestReviews?
    public var requiredSignatures: RequiredSignatures?
    public var enforceAdmins: EnforceAdmins?
    public var requiredLinearHistory: RequiredLinearHistory?
    public var allowForcePushes: AllowForcePushes?
    public var allowDeletions: AllowDeletions?
    /// Branch Restriction Policy
    public var restrictions: BranchRestrictionPolicy?
    public var requiredConversationResolution: RequiredConversationResolution?

    public struct RequiredPullRequestReviews: Codable {
        public var url: URL
        public var dismissStaleReviews: Bool?
        public var requireCodeOwnerReviews: Bool?
        public var requiredApprovingReviewCount: Int?
        public var dismissalRestrictions: DismissalRestrictions?

        public struct DismissalRestrictions: Codable {
            public var url: URL
            public var usersURL: URL
            public var teamsURL: URL
            public var users: [SimpleUser]
            public var teams: [Team]

            public init(url: URL, usersURL: URL, teamsURL: URL, users: [SimpleUser], teams: [Team]) {
                self.url = url
                self.usersURL = usersURL
                self.teamsURL = teamsURL
                self.users = users
                self.teams = teams
            }

            private enum CodingKeys: String, CodingKey {
                case url
                case usersURL = "users_url"
                case teamsURL = "teams_url"
                case users
                case teams
            }
        }

        public init(url: URL, dismissStaleReviews: Bool? = nil, requireCodeOwnerReviews: Bool? = nil, requiredApprovingReviewCount: Int? = nil, dismissalRestrictions: DismissalRestrictions? = nil) {
            self.url = url
            self.dismissStaleReviews = dismissStaleReviews
            self.requireCodeOwnerReviews = requireCodeOwnerReviews
            self.requiredApprovingReviewCount = requiredApprovingReviewCount
            self.dismissalRestrictions = dismissalRestrictions
        }

        private enum CodingKeys: String, CodingKey {
            case url
            case dismissStaleReviews = "dismiss_stale_reviews"
            case requireCodeOwnerReviews = "require_code_owner_reviews"
            case requiredApprovingReviewCount = "required_approving_review_count"
            case dismissalRestrictions = "dismissal_restrictions"
        }
    }

    public struct RequiredSignatures: Codable {
        /// Example: "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures"
        public var url: URL
        /// Example: true
        public var isEnabled: Bool

        public init(url: URL, isEnabled: Bool) {
            self.url = url
            self.isEnabled = isEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case url
            case isEnabled = "enabled"
        }
    }

    public struct EnforceAdmins: Codable {
        public var url: URL
        public var isEnabled: Bool

        public init(url: URL, isEnabled: Bool) {
            self.url = url
            self.isEnabled = isEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case url
            case isEnabled = "enabled"
        }
    }

    public struct RequiredLinearHistory: Codable {
        public var isEnabled: Bool

        public init(isEnabled: Bool) {
            self.isEnabled = isEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case isEnabled = "enabled"
        }
    }

    public struct AllowForcePushes: Codable {
        public var isEnabled: Bool

        public init(isEnabled: Bool) {
            self.isEnabled = isEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case isEnabled = "enabled"
        }
    }

    public struct AllowDeletions: Codable {
        public var isEnabled: Bool

        public init(isEnabled: Bool) {
            self.isEnabled = isEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case isEnabled = "enabled"
        }
    }

    public struct RequiredConversationResolution: Codable {
        public var isEnabled: Bool?

        public init(isEnabled: Bool? = nil) {
            self.isEnabled = isEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case isEnabled = "enabled"
        }
    }

    public init(url: URL, requiredStatusChecks: StatusCheckPolicy? = nil, requiredPullRequestReviews: RequiredPullRequestReviews? = nil, requiredSignatures: RequiredSignatures? = nil, enforceAdmins: EnforceAdmins? = nil, requiredLinearHistory: RequiredLinearHistory? = nil, allowForcePushes: AllowForcePushes? = nil, allowDeletions: AllowDeletions? = nil, restrictions: BranchRestrictionPolicy? = nil, requiredConversationResolution: RequiredConversationResolution? = nil) {
        self.url = url
        self.requiredStatusChecks = requiredStatusChecks
        self.requiredPullRequestReviews = requiredPullRequestReviews
        self.requiredSignatures = requiredSignatures
        self.enforceAdmins = enforceAdmins
        self.requiredLinearHistory = requiredLinearHistory
        self.allowForcePushes = allowForcePushes
        self.allowDeletions = allowDeletions
        self.restrictions = restrictions
        self.requiredConversationResolution = requiredConversationResolution
    }

    private enum CodingKeys: String, CodingKey {
        case url
        case requiredStatusChecks = "required_status_checks"
        case requiredPullRequestReviews = "required_pull_request_reviews"
        case requiredSignatures = "required_signatures"
        case enforceAdmins = "enforce_admins"
        case requiredLinearHistory = "required_linear_history"
        case allowForcePushes = "allow_force_pushes"
        case allowDeletions = "allow_deletions"
        case restrictions
        case requiredConversationResolution = "required_conversation_resolution"
    }
}
