// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct FullRepository: Codable {
    /// Example: 1296269
    public var id: Int
    /// Example: "MDEwOlJlcG9zaXRvcnkxMjk2MjY5"
    public var nodeID: String
    /// Example: "Hello-World"
    public var name: String
    /// Example: "octocat/Hello-World"
    public var fullName: String
    /// Simple User
    public var owner: SimpleUser
    public var isPrivate: Bool
    /// Example: "https://github.com/octocat/Hello-World"
    public var htmlURL: URL
    /// Example: "This your first repo!"
    public var description: String?
    public var isFork: Bool
    /// Example: "https://api.github.com/repos/octocat/Hello-World"
    public var url: URL
    /// Example: "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}"
    public var archiveURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/assignees{/user}"
    public var assigneesURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}"
    public var blobsURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/branches{/branch}"
    public var branchesURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}"
    public var collaboratorsURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/comments{/number}"
    public var commentsURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/commits{/sha}"
    public var commitsURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}"
    public var compareURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/contents/{+path}"
    public var contentsURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/contributors"
    public var contributorsURL: URL
    /// Example: "http://api.github.com/repos/octocat/Hello-World/deployments"
    public var deploymentsURL: URL
    /// Example: "http://api.github.com/repos/octocat/Hello-World/downloads"
    public var downloadsURL: URL
    /// Example: "http://api.github.com/repos/octocat/Hello-World/events"
    public var eventsURL: URL
    /// Example: "http://api.github.com/repos/octocat/Hello-World/forks"
    public var forksURL: URL
    /// Example: "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}"
    public var gitCommitsURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}"
    public var gitRefsURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}"
    public var gitTagsURL: String
    /// Example: "git:github.com/octocat/Hello-World.git"
    public var gitURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}"
    public var issueCommentURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}"
    public var issueEventsURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/issues{/number}"
    public var issuesURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}"
    public var keysURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/labels{/name}"
    public var labelsURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/languages"
    public var languagesURL: URL
    /// Example: "http://api.github.com/repos/octocat/Hello-World/merges"
    public var mergesURL: URL
    /// Example: "http://api.github.com/repos/octocat/Hello-World/milestones{/number}"
    public var milestonesURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}"
    public var notificationsURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/pulls{/number}"
    public var pullsURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/releases{/id}"
    public var releasesURL: String
    /// Example: "git@github.com:octocat/Hello-World.git"
    public var sshURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/stargazers"
    public var stargazersURL: URL
    /// Example: "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}"
    public var statusesURL: String
    /// Example: "http://api.github.com/repos/octocat/Hello-World/subscribers"
    public var subscribersURL: URL
    /// Example: "http://api.github.com/repos/octocat/Hello-World/subscription"
    public var subscriptionURL: URL
    /// Example: "http://api.github.com/repos/octocat/Hello-World/tags"
    public var tagsURL: URL
    /// Example: "http://api.github.com/repos/octocat/Hello-World/teams"
    public var teamsURL: URL
    /// Example: "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"
    public var treesURL: String
    /// Example: "https://github.com/octocat/Hello-World.git"
    public var cloneURL: String
    /// Example: "git:git.example.com/octocat/Hello-World"
    public var mirrorURL: URL?
    /// Example: "http://api.github.com/repos/octocat/Hello-World/hooks"
    public var hooksURL: URL
    /// Example: "https://svn.github.com/octocat/Hello-World"
    public var svnURL: URL
    /// Example: "https://github.com"
    public var homepage: URL?
    public var language: String?
    public var forksCount: Int
    /// Example: 80
    public var stargazersCount: Int
    /// Example: 80
    public var watchersCount: Int
    /// Example: 108
    public var size: Int
    /// Example: "master"
    public var defaultBranch: String
    public var openIssuesCount: Int
    /// Example: true
    public var isTemplate: Bool?
    /// Example: ["octocat", "atom", "electron", "API"]
    public var topics: [String]?
    /// Example: true
    public var hasIssues: Bool
    /// Example: true
    public var hasProjects: Bool
    /// Example: true
    public var hasWiki: Bool
    public var hasPages: Bool
    /// Example: true
    public var hasDownloads: Bool
    public var isArchived: Bool
    /// Returns whether or not this repository disabled.
    public var isDisabled: Bool
    /// The repository visibility: public, private, or internal.
    ///
    /// Example: "public"
    public var visibility: String?
    /// Example: "2011-01-26T19:06:43Z"
    public var pushedAt: Date
    /// Example: "2011-01-26T19:01:12Z"
    public var createdAt: Date
    /// Example: "2011-01-26T19:14:43Z"
    public var updatedAt: Date
    public var permissions: Permissions?
    /// Example: true
    public var allowRebaseMerge: Bool?
    /// Repository
    ///
    /// A git repository
    public var templateRepository: Repository?
    public var tempCloneToken: String?
    /// Example: true
    public var allowSquashMerge: Bool?
    /// Example: false
    public var allowAutoMerge: Bool?
    /// Example: false
    public var deleteBranchOnMerge: Bool?
    /// Example: true
    public var allowMergeCommit: Bool?
    /// Example: true
    public var allowForking: Bool?
    /// Example: 42
    public var subscribersCount: Int
    public var networkCount: Int
    /// License Simple
    public var license: LicenseSimple?
    /// Simple User
    public var organization: SimpleUser?
    /// Repository
    ///
    /// A git repository
    public var parent: Repository?
    /// Repository
    ///
    /// A git repository
    public var source: Repository?
    public var forks: Int
    public var masterBranch: String?
    public var openIssues: Int
    public var watchers: Int
    /// Whether anonymous git access is allowed.
    public var isAnonymousAccessEnabled: Bool
    /// Code Of Conduct Simple
    ///
    /// Code of Conduct Simple
    public var codeOfConduct: CodeOfConductSimple?
    public var securityAndAnalysis: SecurityAndAnalysis?

    public struct Permissions: Codable {
        public var isAdmin: Bool
        public var isMaintain: Bool?
        public var isPush: Bool
        public var isTriage: Bool?
        public var isPull: Bool

        public init(isAdmin: Bool, isMaintain: Bool? = nil, isPush: Bool, isTriage: Bool? = nil, isPull: Bool) {
            self.isAdmin = isAdmin
            self.isMaintain = isMaintain
            self.isPush = isPush
            self.isTriage = isTriage
            self.isPull = isPull
        }

        private enum CodingKeys: String, CodingKey {
            case isAdmin = "admin"
            case isMaintain = "maintain"
            case isPush = "push"
            case isTriage = "triage"
            case isPull = "pull"
        }
    }

    public struct SecurityAndAnalysis: Codable {
        public var advancedSecurity: AdvancedSecurity?
        public var secretScanning: SecretScanning?

        public struct AdvancedSecurity: Codable {
            public var status: Status?

            public enum Status: String, Codable, CaseIterable {
                case enabled
                case disabled
            }

            public init(status: Status? = nil) {
                self.status = status
            }
        }

        public struct SecretScanning: Codable {
            public var status: Status?

            public enum Status: String, Codable, CaseIterable {
                case enabled
                case disabled
            }

            public init(status: Status? = nil) {
                self.status = status
            }
        }

        public init(advancedSecurity: AdvancedSecurity? = nil, secretScanning: SecretScanning? = nil) {
            self.advancedSecurity = advancedSecurity
            self.secretScanning = secretScanning
        }

        private enum CodingKeys: String, CodingKey {
            case advancedSecurity = "advanced_security"
            case secretScanning = "secret_scanning"
        }
    }

    public init(id: Int, nodeID: String, name: String, fullName: String, owner: SimpleUser, isPrivate: Bool, htmlURL: URL, description: String? = nil, isFork: Bool, url: URL, archiveURL: String, assigneesURL: String, blobsURL: String, branchesURL: String, collaboratorsURL: String, commentsURL: String, commitsURL: String, compareURL: String, contentsURL: String, contributorsURL: URL, deploymentsURL: URL, downloadsURL: URL, eventsURL: URL, forksURL: URL, gitCommitsURL: String, gitRefsURL: String, gitTagsURL: String, gitURL: String, issueCommentURL: String, issueEventsURL: String, issuesURL: String, keysURL: String, labelsURL: String, languagesURL: URL, mergesURL: URL, milestonesURL: String, notificationsURL: String, pullsURL: String, releasesURL: String, sshURL: String, stargazersURL: URL, statusesURL: String, subscribersURL: URL, subscriptionURL: URL, tagsURL: URL, teamsURL: URL, treesURL: String, cloneURL: String, mirrorURL: URL? = nil, hooksURL: URL, svnURL: URL, homepage: URL? = nil, language: String? = nil, forksCount: Int, stargazersCount: Int, watchersCount: Int, size: Int, defaultBranch: String, openIssuesCount: Int, isTemplate: Bool? = nil, topics: [String]? = nil, hasIssues: Bool, hasProjects: Bool, hasWiki: Bool, hasPages: Bool, hasDownloads: Bool, isArchived: Bool, isDisabled: Bool, visibility: String? = nil, pushedAt: Date, createdAt: Date, updatedAt: Date, permissions: Permissions? = nil, allowRebaseMerge: Bool? = nil, templateRepository: Repository? = nil, tempCloneToken: String? = nil, allowSquashMerge: Bool? = nil, allowAutoMerge: Bool? = nil, deleteBranchOnMerge: Bool? = nil, allowMergeCommit: Bool? = nil, allowForking: Bool? = nil, subscribersCount: Int, networkCount: Int, license: LicenseSimple? = nil, organization: SimpleUser? = nil, parent: Repository? = nil, source: Repository? = nil, forks: Int, masterBranch: String? = nil, openIssues: Int, watchers: Int, isAnonymousAccessEnabled: Bool? = nil, codeOfConduct: CodeOfConductSimple? = nil, securityAndAnalysis: SecurityAndAnalysis? = nil) {
        self.id = id
        self.nodeID = nodeID
        self.name = name
        self.fullName = fullName
        self.owner = owner
        self.isPrivate = isPrivate
        self.htmlURL = htmlURL
        self.description = description
        self.isFork = isFork
        self.url = url
        self.archiveURL = archiveURL
        self.assigneesURL = assigneesURL
        self.blobsURL = blobsURL
        self.branchesURL = branchesURL
        self.collaboratorsURL = collaboratorsURL
        self.commentsURL = commentsURL
        self.commitsURL = commitsURL
        self.compareURL = compareURL
        self.contentsURL = contentsURL
        self.contributorsURL = contributorsURL
        self.deploymentsURL = deploymentsURL
        self.downloadsURL = downloadsURL
        self.eventsURL = eventsURL
        self.forksURL = forksURL
        self.gitCommitsURL = gitCommitsURL
        self.gitRefsURL = gitRefsURL
        self.gitTagsURL = gitTagsURL
        self.gitURL = gitURL
        self.issueCommentURL = issueCommentURL
        self.issueEventsURL = issueEventsURL
        self.issuesURL = issuesURL
        self.keysURL = keysURL
        self.labelsURL = labelsURL
        self.languagesURL = languagesURL
        self.mergesURL = mergesURL
        self.milestonesURL = milestonesURL
        self.notificationsURL = notificationsURL
        self.pullsURL = pullsURL
        self.releasesURL = releasesURL
        self.sshURL = sshURL
        self.stargazersURL = stargazersURL
        self.statusesURL = statusesURL
        self.subscribersURL = subscribersURL
        self.subscriptionURL = subscriptionURL
        self.tagsURL = tagsURL
        self.teamsURL = teamsURL
        self.treesURL = treesURL
        self.cloneURL = cloneURL
        self.mirrorURL = mirrorURL
        self.hooksURL = hooksURL
        self.svnURL = svnURL
        self.homepage = homepage
        self.language = language
        self.forksCount = forksCount
        self.stargazersCount = stargazersCount
        self.watchersCount = watchersCount
        self.size = size
        self.defaultBranch = defaultBranch
        self.openIssuesCount = openIssuesCount
        self.isTemplate = isTemplate
        self.topics = topics
        self.hasIssues = hasIssues
        self.hasProjects = hasProjects
        self.hasWiki = hasWiki
        self.hasPages = hasPages
        self.hasDownloads = hasDownloads
        self.isArchived = isArchived
        self.isDisabled = isDisabled
        self.visibility = visibility
        self.pushedAt = pushedAt
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.permissions = permissions
        self.allowRebaseMerge = allowRebaseMerge
        self.templateRepository = templateRepository
        self.tempCloneToken = tempCloneToken
        self.allowSquashMerge = allowSquashMerge
        self.allowAutoMerge = allowAutoMerge
        self.deleteBranchOnMerge = deleteBranchOnMerge
        self.allowMergeCommit = allowMergeCommit
        self.allowForking = allowForking
        self.subscribersCount = subscribersCount
        self.networkCount = networkCount
        self.license = license
        self.organization = organization
        self.parent = parent
        self.source = source
        self.forks = forks
        self.masterBranch = masterBranch
        self.openIssues = openIssues
        self.watchers = watchers
        self.isAnonymousAccessEnabled = isAnonymousAccessEnabled ?? true
        self.codeOfConduct = codeOfConduct
        self.securityAndAnalysis = securityAndAnalysis
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case nodeID = "node_id"
        case name
        case fullName = "full_name"
        case owner
        case isPrivate = "private"
        case htmlURL = "html_url"
        case description
        case isFork = "fork"
        case url
        case archiveURL = "archive_url"
        case assigneesURL = "assignees_url"
        case blobsURL = "blobs_url"
        case branchesURL = "branches_url"
        case collaboratorsURL = "collaborators_url"
        case commentsURL = "comments_url"
        case commitsURL = "commits_url"
        case compareURL = "compare_url"
        case contentsURL = "contents_url"
        case contributorsURL = "contributors_url"
        case deploymentsURL = "deployments_url"
        case downloadsURL = "downloads_url"
        case eventsURL = "events_url"
        case forksURL = "forks_url"
        case gitCommitsURL = "git_commits_url"
        case gitRefsURL = "git_refs_url"
        case gitTagsURL = "git_tags_url"
        case gitURL = "git_url"
        case issueCommentURL = "issue_comment_url"
        case issueEventsURL = "issue_events_url"
        case issuesURL = "issues_url"
        case keysURL = "keys_url"
        case labelsURL = "labels_url"
        case languagesURL = "languages_url"
        case mergesURL = "merges_url"
        case milestonesURL = "milestones_url"
        case notificationsURL = "notifications_url"
        case pullsURL = "pulls_url"
        case releasesURL = "releases_url"
        case sshURL = "ssh_url"
        case stargazersURL = "stargazers_url"
        case statusesURL = "statuses_url"
        case subscribersURL = "subscribers_url"
        case subscriptionURL = "subscription_url"
        case tagsURL = "tags_url"
        case teamsURL = "teams_url"
        case treesURL = "trees_url"
        case cloneURL = "clone_url"
        case mirrorURL = "mirror_url"
        case hooksURL = "hooks_url"
        case svnURL = "svn_url"
        case homepage
        case language
        case forksCount = "forks_count"
        case stargazersCount = "stargazers_count"
        case watchersCount = "watchers_count"
        case size
        case defaultBranch = "default_branch"
        case openIssuesCount = "open_issues_count"
        case isTemplate = "is_template"
        case topics
        case hasIssues = "has_issues"
        case hasProjects = "has_projects"
        case hasWiki = "has_wiki"
        case hasPages = "has_pages"
        case hasDownloads = "has_downloads"
        case isArchived = "archived"
        case isDisabled = "disabled"
        case visibility
        case pushedAt = "pushed_at"
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case permissions
        case allowRebaseMerge = "allow_rebase_merge"
        case templateRepository = "template_repository"
        case tempCloneToken = "temp_clone_token"
        case allowSquashMerge = "allow_squash_merge"
        case allowAutoMerge = "allow_auto_merge"
        case deleteBranchOnMerge = "delete_branch_on_merge"
        case allowMergeCommit = "allow_merge_commit"
        case allowForking = "allow_forking"
        case subscribersCount = "subscribers_count"
        case networkCount = "network_count"
        case license
        case organization
        case parent
        case source
        case forks
        case masterBranch = "master_branch"
        case openIssues = "open_issues"
        case watchers
        case isAnonymousAccessEnabled = "anonymous_access_enabled"
        case codeOfConduct = "code_of_conduct"
        case securityAndAnalysis = "security_and_analysis"
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        self.id = try values.decode(Int.self, forKey: .id)
        self.nodeID = try values.decode(String.self, forKey: .nodeID)
        self.name = try values.decode(String.self, forKey: .name)
        self.fullName = try values.decode(String.self, forKey: .fullName)
        self.owner = try values.decode(SimpleUser.self, forKey: .owner)
        self.isPrivate = try values.decode(Bool.self, forKey: .isPrivate)
        self.htmlURL = try values.decode(URL.self, forKey: .htmlURL)
        self.description = try values.decodeIfPresent(String.self, forKey: .description)
        self.isFork = try values.decode(Bool.self, forKey: .isFork)
        self.url = try values.decode(URL.self, forKey: .url)
        self.archiveURL = try values.decode(String.self, forKey: .archiveURL)
        self.assigneesURL = try values.decode(String.self, forKey: .assigneesURL)
        self.blobsURL = try values.decode(String.self, forKey: .blobsURL)
        self.branchesURL = try values.decode(String.self, forKey: .branchesURL)
        self.collaboratorsURL = try values.decode(String.self, forKey: .collaboratorsURL)
        self.commentsURL = try values.decode(String.self, forKey: .commentsURL)
        self.commitsURL = try values.decode(String.self, forKey: .commitsURL)
        self.compareURL = try values.decode(String.self, forKey: .compareURL)
        self.contentsURL = try values.decode(String.self, forKey: .contentsURL)
        self.contributorsURL = try values.decode(URL.self, forKey: .contributorsURL)
        self.deploymentsURL = try values.decode(URL.self, forKey: .deploymentsURL)
        self.downloadsURL = try values.decode(URL.self, forKey: .downloadsURL)
        self.eventsURL = try values.decode(URL.self, forKey: .eventsURL)
        self.forksURL = try values.decode(URL.self, forKey: .forksURL)
        self.gitCommitsURL = try values.decode(String.self, forKey: .gitCommitsURL)
        self.gitRefsURL = try values.decode(String.self, forKey: .gitRefsURL)
        self.gitTagsURL = try values.decode(String.self, forKey: .gitTagsURL)
        self.gitURL = try values.decode(String.self, forKey: .gitURL)
        self.issueCommentURL = try values.decode(String.self, forKey: .issueCommentURL)
        self.issueEventsURL = try values.decode(String.self, forKey: .issueEventsURL)
        self.issuesURL = try values.decode(String.self, forKey: .issuesURL)
        self.keysURL = try values.decode(String.self, forKey: .keysURL)
        self.labelsURL = try values.decode(String.self, forKey: .labelsURL)
        self.languagesURL = try values.decode(URL.self, forKey: .languagesURL)
        self.mergesURL = try values.decode(URL.self, forKey: .mergesURL)
        self.milestonesURL = try values.decode(String.self, forKey: .milestonesURL)
        self.notificationsURL = try values.decode(String.self, forKey: .notificationsURL)
        self.pullsURL = try values.decode(String.self, forKey: .pullsURL)
        self.releasesURL = try values.decode(String.self, forKey: .releasesURL)
        self.sshURL = try values.decode(String.self, forKey: .sshURL)
        self.stargazersURL = try values.decode(URL.self, forKey: .stargazersURL)
        self.statusesURL = try values.decode(String.self, forKey: .statusesURL)
        self.subscribersURL = try values.decode(URL.self, forKey: .subscribersURL)
        self.subscriptionURL = try values.decode(URL.self, forKey: .subscriptionURL)
        self.tagsURL = try values.decode(URL.self, forKey: .tagsURL)
        self.teamsURL = try values.decode(URL.self, forKey: .teamsURL)
        self.treesURL = try values.decode(String.self, forKey: .treesURL)
        self.cloneURL = try values.decode(String.self, forKey: .cloneURL)
        self.mirrorURL = try values.decodeIfPresent(URL.self, forKey: .mirrorURL)
        self.hooksURL = try values.decode(URL.self, forKey: .hooksURL)
        self.svnURL = try values.decode(URL.self, forKey: .svnURL)
        self.homepage = try values.decodeIfPresent(URL.self, forKey: .homepage)
        self.language = try values.decodeIfPresent(String.self, forKey: .language)
        self.forksCount = try values.decode(Int.self, forKey: .forksCount)
        self.stargazersCount = try values.decode(Int.self, forKey: .stargazersCount)
        self.watchersCount = try values.decode(Int.self, forKey: .watchersCount)
        self.size = try values.decode(Int.self, forKey: .size)
        self.defaultBranch = try values.decode(String.self, forKey: .defaultBranch)
        self.openIssuesCount = try values.decode(Int.self, forKey: .openIssuesCount)
        self.isTemplate = try values.decodeIfPresent(Bool.self, forKey: .isTemplate)
        self.topics = try values.decodeIfPresent([String].self, forKey: .topics)
        self.hasIssues = try values.decode(Bool.self, forKey: .hasIssues)
        self.hasProjects = try values.decode(Bool.self, forKey: .hasProjects)
        self.hasWiki = try values.decode(Bool.self, forKey: .hasWiki)
        self.hasPages = try values.decode(Bool.self, forKey: .hasPages)
        self.hasDownloads = try values.decode(Bool.self, forKey: .hasDownloads)
        self.isArchived = try values.decode(Bool.self, forKey: .isArchived)
        self.isDisabled = try values.decode(Bool.self, forKey: .isDisabled)
        self.visibility = try values.decodeIfPresent(String.self, forKey: .visibility)
        self.pushedAt = try values.decode(Date.self, forKey: .pushedAt)
        self.createdAt = try values.decode(Date.self, forKey: .createdAt)
        self.updatedAt = try values.decode(Date.self, forKey: .updatedAt)
        self.permissions = try values.decodeIfPresent(Permissions.self, forKey: .permissions)
        self.allowRebaseMerge = try values.decodeIfPresent(Bool.self, forKey: .allowRebaseMerge)
        self.templateRepository = try values.decodeIfPresent(Repository.self, forKey: .templateRepository)
        self.tempCloneToken = try values.decodeIfPresent(String.self, forKey: .tempCloneToken)
        self.allowSquashMerge = try values.decodeIfPresent(Bool.self, forKey: .allowSquashMerge)
        self.allowAutoMerge = try values.decodeIfPresent(Bool.self, forKey: .allowAutoMerge)
        self.deleteBranchOnMerge = try values.decodeIfPresent(Bool.self, forKey: .deleteBranchOnMerge)
        self.allowMergeCommit = try values.decodeIfPresent(Bool.self, forKey: .allowMergeCommit)
        self.allowForking = try values.decodeIfPresent(Bool.self, forKey: .allowForking)
        self.subscribersCount = try values.decode(Int.self, forKey: .subscribersCount)
        self.networkCount = try values.decode(Int.self, forKey: .networkCount)
        self.license = try values.decodeIfPresent(LicenseSimple.self, forKey: .license)
        self.organization = try values.decodeIfPresent(SimpleUser.self, forKey: .organization)
        self.parent = try values.decodeIfPresent(Repository.self, forKey: .parent)
        self.source = try values.decodeIfPresent(Repository.self, forKey: .source)
        self.forks = try values.decode(Int.self, forKey: .forks)
        self.masterBranch = try values.decodeIfPresent(String.self, forKey: .masterBranch)
        self.openIssues = try values.decode(Int.self, forKey: .openIssues)
        self.watchers = try values.decode(Int.self, forKey: .watchers)
        self.isAnonymousAccessEnabled = try values.decodeIfPresent(Bool.self, forKey: .isAnonymousAccessEnabled) ?? true
        self.codeOfConduct = try values.decodeIfPresent(CodeOfConductSimple.self, forKey: .codeOfConduct)
        self.securityAndAnalysis = try values.decodeIfPresent(SecurityAndAnalysis.self, forKey: .securityAndAnalysis)
    }
}
