// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
public struct Issue: Codable {
    public var id: Int
    public var nodeID: String
    /// URL for the issue
    ///
    /// Example: "https://api.github.com/repositories/42/issues/1"
    public var url: URL
    public var repositoryURL: URL
    public var labelsURL: String
    public var commentsURL: URL
    public var eventsURL: URL
    public var htmlURL: URL
    /// Number uniquely identifying the issue within its repository
    ///
    /// Example: 42
    public var number: Int
    /// State of the issue; either 'open' or 'closed'
    ///
    /// Example: "open"
    public var state: String
    /// Title of the issue
    ///
    /// Example: "Widget creation fails in Safari on OS X 10.8"
    public var title: String
    /// Contents of the issue
    ///
    /// Example: "It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?"
    public var body: String?
    /// Simple User
    public var user: SimpleUser?
    /// Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
    ///
    /// Example: ["bug", "registration"]
    public var labels: [Label]
    /// Simple User
    public var assignee: SimpleUser?
    public var assignees: [SimpleUser]?
    /// A collection of related issues and pull requests.
    public var milestone: Milestone?
    public var isLocked: Bool
    public var activeLockReason: String?
    public var comments: Int
    public var pullRequest: PullRequest?
    public var closedAt: Date?
    public var createdAt: Date
    public var updatedAt: Date
    public var isDraft: Bool?
    /// Simple User
    public var closedBy: SimpleUser?
    public var bodyHTML: String?
    public var bodyText: String?
    public var timelineURL: URL?
    /// A git repository
    public var repository: Repository?
    /// GitHub app
    ///
    /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
    public var performedViaGithubApp: Integration?
    /// Author_association
    ///
    /// How the author is associated with the repository.
    ///
    /// Example: "OWNER"
    public var authorAssociation: AuthorAssociation
    /// Reaction Rollup
    public var reactions: ReactionRollup?

    public enum Label: Codable {
        case string(String)
        case object(Object)

        public struct Object: Codable {
            public var id: Int?
            public var nodeID: String?
            public var url: URL?
            public var name: String?
            public var description: String?
            public var color: String?
            public var isDefault: Bool?

            public init(id: Int? = nil, nodeID: String? = nil, url: URL? = nil, name: String? = nil, description: String? = nil, color: String? = nil, isDefault: Bool? = nil) {
                self.id = id
                self.nodeID = nodeID
                self.url = url
                self.name = name
                self.description = description
                self.color = color
                self.isDefault = isDefault
            }

            private enum CodingKeys: String, CodingKey {
                case id
                case nodeID = "node_id"
                case url
                case name
                case description
                case color
                case isDefault = "default"
            }
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(String.self) {
                self = .string(value)
            } else if let value = try? container.decode(Object.self) {
                self = .object(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .string(let value): try container.encode(value)
            case .object(let value): try container.encode(value)
            }
        }
    }

    public struct PullRequest: Codable {
        public var mergedAt: Date?
        public var diffURL: URL?
        public var htmlURL: URL?
        public var patchURL: URL?
        public var url: URL?

        public init(mergedAt: Date? = nil, diffURL: URL? = nil, htmlURL: URL? = nil, patchURL: URL? = nil, url: URL? = nil) {
            self.mergedAt = mergedAt
            self.diffURL = diffURL
            self.htmlURL = htmlURL
            self.patchURL = patchURL
            self.url = url
        }

        private enum CodingKeys: String, CodingKey {
            case mergedAt = "merged_at"
            case diffURL = "diff_url"
            case htmlURL = "html_url"
            case patchURL = "patch_url"
            case url
        }
    }

    public init(id: Int, nodeID: String, url: URL, repositoryURL: URL, labelsURL: String, commentsURL: URL, eventsURL: URL, htmlURL: URL, number: Int, state: String, title: String, body: String? = nil, user: SimpleUser? = nil, labels: [Label], assignee: SimpleUser? = nil, assignees: [SimpleUser]? = nil, milestone: Milestone? = nil, isLocked: Bool, activeLockReason: String? = nil, comments: Int, pullRequest: PullRequest? = nil, closedAt: Date? = nil, createdAt: Date, updatedAt: Date, isDraft: Bool? = nil, closedBy: SimpleUser? = nil, bodyHTML: String? = nil, bodyText: String? = nil, timelineURL: URL? = nil, repository: Repository? = nil, performedViaGithubApp: Integration? = nil, authorAssociation: AuthorAssociation, reactions: ReactionRollup? = nil) {
        self.id = id
        self.nodeID = nodeID
        self.url = url
        self.repositoryURL = repositoryURL
        self.labelsURL = labelsURL
        self.commentsURL = commentsURL
        self.eventsURL = eventsURL
        self.htmlURL = htmlURL
        self.number = number
        self.state = state
        self.title = title
        self.body = body
        self.user = user
        self.labels = labels
        self.assignee = assignee
        self.assignees = assignees
        self.milestone = milestone
        self.isLocked = isLocked
        self.activeLockReason = activeLockReason
        self.comments = comments
        self.pullRequest = pullRequest
        self.closedAt = closedAt
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.isDraft = isDraft
        self.closedBy = closedBy
        self.bodyHTML = bodyHTML
        self.bodyText = bodyText
        self.timelineURL = timelineURL
        self.repository = repository
        self.performedViaGithubApp = performedViaGithubApp
        self.authorAssociation = authorAssociation
        self.reactions = reactions
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case nodeID = "node_id"
        case url
        case repositoryURL = "repository_url"
        case labelsURL = "labels_url"
        case commentsURL = "comments_url"
        case eventsURL = "events_url"
        case htmlURL = "html_url"
        case number
        case state
        case title
        case body
        case user
        case labels
        case assignee
        case assignees
        case milestone
        case isLocked = "locked"
        case activeLockReason = "active_lock_reason"
        case comments
        case pullRequest = "pull_request"
        case closedAt = "closed_at"
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case isDraft = "draft"
        case closedBy = "closed_by"
        case bodyHTML = "body_html"
        case bodyText = "body_text"
        case timelineURL = "timeline_url"
        case repository
        case performedViaGithubApp = "performed_via_github_app"
        case authorAssociation = "author_association"
        case reactions
    }
}
