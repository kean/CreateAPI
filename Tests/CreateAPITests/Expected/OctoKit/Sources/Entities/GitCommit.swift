// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Low-level Git commit operations within a repository
public struct GitCommit: Codable {
    /// SHA for the commit
    ///
    /// Example: "7638417db6d59f3c431d3e1f261cc637155684cd"
    public var sha: String
    public var nodeID: String
    public var url: URL
    /// Identifying information for the git-user
    public var author: Author
    /// Identifying information for the git-user
    public var committer: Committer
    /// Message describing the purpose of the commit
    ///
    /// Example: "Fix #42"
    public var message: String
    public var tree: Tree
    public var parents: [Parent]
    public var verification: Verification
    public var htmlURL: URL

    /// Identifying information for the git-user
    public struct Author: Codable {
        /// Timestamp of the commit
        ///
        /// Example: "2014-08-09T08:02:04+12:00"
        public var date: Date
        /// Git email address of the user
        ///
        /// Example: "monalisa.octocat@example.com"
        public var email: String
        /// Name of the git user
        ///
        /// Example: "Monalisa Octocat"
        public var name: String

        public init(date: Date, email: String, name: String) {
            self.date = date
            self.email = email
            self.name = name
        }
    }

    /// Identifying information for the git-user
    public struct Committer: Codable {
        /// Timestamp of the commit
        ///
        /// Example: "2014-08-09T08:02:04+12:00"
        public var date: Date
        /// Git email address of the user
        ///
        /// Example: "monalisa.octocat@example.com"
        public var email: String
        /// Name of the git user
        ///
        /// Example: "Monalisa Octocat"
        public var name: String

        public init(date: Date, email: String, name: String) {
            self.date = date
            self.email = email
            self.name = name
        }
    }

    public struct Tree: Codable {
        /// SHA for the commit
        ///
        /// Example: "7638417db6d59f3c431d3e1f261cc637155684cd"
        public var sha: String
        public var url: URL

        public init(sha: String, url: URL) {
            self.sha = sha
            self.url = url
        }
    }

    public struct Parent: Codable {
        /// SHA for the commit
        ///
        /// Example: "7638417db6d59f3c431d3e1f261cc637155684cd"
        public var sha: String
        public var url: URL
        public var htmlURL: URL

        public init(sha: String, url: URL, htmlURL: URL) {
            self.sha = sha
            self.url = url
            self.htmlURL = htmlURL
        }

        private enum CodingKeys: String, CodingKey {
            case sha
            case url
            case htmlURL = "html_url"
        }
    }

    public struct Verification: Codable {
        public var isVerified: Bool
        public var reason: String
        public var signature: String?
        public var payload: String?

        public init(isVerified: Bool, reason: String, signature: String? = nil, payload: String? = nil) {
            self.isVerified = isVerified
            self.reason = reason
            self.signature = signature
            self.payload = payload
        }

        private enum CodingKeys: String, CodingKey {
            case isVerified = "verified"
            case reason
            case signature
            case payload
        }
    }

    public init(sha: String, nodeID: String, url: URL, author: Author, committer: Committer, message: String, tree: Tree, parents: [Parent], verification: Verification, htmlURL: URL) {
        self.sha = sha
        self.nodeID = nodeID
        self.url = url
        self.author = author
        self.committer = committer
        self.message = message
        self.tree = tree
        self.parents = parents
        self.verification = verification
        self.htmlURL = htmlURL
    }

    private enum CodingKeys: String, CodingKey {
        case sha
        case nodeID = "node_id"
        case url
        case author
        case committer
        case message
        case tree
        case parents
        case verification
        case htmlURL = "html_url"
    }
}
