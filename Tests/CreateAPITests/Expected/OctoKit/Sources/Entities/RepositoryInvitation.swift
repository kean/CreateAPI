// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Repository invitations let you manage who you collaborate with.
public struct RepositoryInvitation: Codable {
    /// Unique identifier of the repository invitation.
    ///
    /// Example: 42
    public var id: Int
    /// Minimal Repository
    public var repository: MinimalRepository
    /// Simple User
    public var invitee: SimpleUser?
    /// Simple User
    public var inviter: SimpleUser?
    /// The permission associated with the invitation.
    ///
    /// Example: "read"
    public var permissions: Permissions
    /// Example: "2016-06-13T14:52:50-05:00"
    public var createdAt: Date
    /// Whether or not the invitation has expired
    public var isExpired: Bool?
    /// URL for the repository invitation
    ///
    /// Example: "https://api.github.com/user/repository-invitations/1"
    public var url: String
    /// Example: "https://github.com/octocat/Hello-World/invitations"
    public var htmlURL: String
    public var nodeID: String

    /// The permission associated with the invitation.
    ///
    /// Example: "read"
    public enum Permissions: String, Codable, CaseIterable {
        case read
        case write
        case admin
        case triage
        case maintain
    }

    public init(id: Int, repository: MinimalRepository, invitee: SimpleUser? = nil, inviter: SimpleUser? = nil, permissions: Permissions, createdAt: Date, isExpired: Bool? = nil, url: String, htmlURL: String, nodeID: String) {
        self.id = id
        self.repository = repository
        self.invitee = invitee
        self.inviter = inviter
        self.permissions = permissions
        self.createdAt = createdAt
        self.isExpired = isExpired
        self.url = url
        self.htmlURL = htmlURL
        self.nodeID = nodeID
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case repository
        case invitee
        case inviter
        case permissions
        case createdAt = "created_at"
        case isExpired = "expired"
        case url
        case htmlURL = "html_url"
        case nodeID = "node_id"
    }
}
