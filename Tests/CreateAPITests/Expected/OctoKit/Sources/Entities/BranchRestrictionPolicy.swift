// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct BranchRestrictionPolicy: Codable {
    public var url: URL
    public var usersURL: URL
    public var teamsURL: URL
    public var appsURL: URL
    public var users: [User]
    public var teams: [Team]
    public var apps: [App]

    public struct User: Codable {
        public var login: String?
        public var id: Int?
        public var nodeID: String?
        public var avatarURL: String?
        public var gravatarID: String?
        public var url: String?
        public var htmlURL: String?
        public var followersURL: String?
        public var followingURL: String?
        public var gistsURL: String?
        public var starredURL: String?
        public var subscriptionsURL: String?
        public var organizationsURL: String?
        public var reposURL: String?
        public var eventsURL: String?
        public var receivedEventsURL: String?
        public var type: String?
        public var isSiteAdmin: Bool?

        public init(login: String? = nil, id: Int? = nil, nodeID: String? = nil, avatarURL: String? = nil, gravatarID: String? = nil, url: String? = nil, htmlURL: String? = nil, followersURL: String? = nil, followingURL: String? = nil, gistsURL: String? = nil, starredURL: String? = nil, subscriptionsURL: String? = nil, organizationsURL: String? = nil, reposURL: String? = nil, eventsURL: String? = nil, receivedEventsURL: String? = nil, type: String? = nil, isSiteAdmin: Bool? = nil) {
            self.login = login
            self.id = id
            self.nodeID = nodeID
            self.avatarURL = avatarURL
            self.gravatarID = gravatarID
            self.url = url
            self.htmlURL = htmlURL
            self.followersURL = followersURL
            self.followingURL = followingURL
            self.gistsURL = gistsURL
            self.starredURL = starredURL
            self.subscriptionsURL = subscriptionsURL
            self.organizationsURL = organizationsURL
            self.reposURL = reposURL
            self.eventsURL = eventsURL
            self.receivedEventsURL = receivedEventsURL
            self.type = type
            self.isSiteAdmin = isSiteAdmin
        }

        private enum CodingKeys: String, CodingKey {
            case login
            case id
            case nodeID = "node_id"
            case avatarURL = "avatar_url"
            case gravatarID = "gravatar_id"
            case url
            case htmlURL = "html_url"
            case followersURL = "followers_url"
            case followingURL = "following_url"
            case gistsURL = "gists_url"
            case starredURL = "starred_url"
            case subscriptionsURL = "subscriptions_url"
            case organizationsURL = "organizations_url"
            case reposURL = "repos_url"
            case eventsURL = "events_url"
            case receivedEventsURL = "received_events_url"
            case type
            case isSiteAdmin = "site_admin"
        }
    }

    public struct Team: Codable {
        public var id: Int?
        public var nodeID: String?
        public var url: String?
        public var htmlURL: String?
        public var name: String?
        public var slug: String?
        public var description: String?
        public var privacy: String?
        public var permission: String?
        public var membersURL: String?
        public var repositoriesURL: String?
        public var parent: String?

        public init(id: Int? = nil, nodeID: String? = nil, url: String? = nil, htmlURL: String? = nil, name: String? = nil, slug: String? = nil, description: String? = nil, privacy: String? = nil, permission: String? = nil, membersURL: String? = nil, repositoriesURL: String? = nil, parent: String? = nil) {
            self.id = id
            self.nodeID = nodeID
            self.url = url
            self.htmlURL = htmlURL
            self.name = name
            self.slug = slug
            self.description = description
            self.privacy = privacy
            self.permission = permission
            self.membersURL = membersURL
            self.repositoriesURL = repositoriesURL
            self.parent = parent
        }

        private enum CodingKeys: String, CodingKey {
            case id
            case nodeID = "node_id"
            case url
            case htmlURL = "html_url"
            case name
            case slug
            case description
            case privacy
            case permission
            case membersURL = "members_url"
            case repositoriesURL = "repositories_url"
            case parent
        }
    }

    public struct App: Codable {
        public var id: Int?
        public var slug: String?
        public var nodeID: String?
        public var owner: Owner?
        public var name: String?
        public var description: String?
        public var externalURL: String?
        public var htmlURL: String?
        public var createdAt: String?
        public var updatedAt: String?
        public var permissions: Permissions?
        public var events: [String]?

        public struct Owner: Codable {
            public var login: String?
            public var id: Int?
            public var nodeID: String?
            public var url: String?
            public var reposURL: String?
            public var eventsURL: String?
            public var hooksURL: String?
            public var issuesURL: String?
            public var membersURL: String?
            public var publicMembersURL: String?
            public var avatarURL: String?
            public var description: String?
            /// Example: ""
            public var gravatarID: String?
            /// Example: "https://github.com/testorg-ea8ec76d71c3af4b"
            public var htmlURL: String?
            /// Example: "https://api.github.com/users/testorg-ea8ec76d71c3af4b/followers"
            public var followersURL: String?
            /// Example: "https://api.github.com/users/testorg-ea8ec76d71c3af4b/following{/other_user}"
            public var followingURL: String?
            /// Example: "https://api.github.com/users/testorg-ea8ec76d71c3af4b/gists{/gist_id}"
            public var gistsURL: String?
            /// Example: "https://api.github.com/users/testorg-ea8ec76d71c3af4b/starred{/owner}{/repo}"
            public var starredURL: String?
            /// Example: "https://api.github.com/users/testorg-ea8ec76d71c3af4b/subscriptions"
            public var subscriptionsURL: String?
            /// Example: "https://api.github.com/users/testorg-ea8ec76d71c3af4b/orgs"
            public var organizationsURL: String?
            /// Example: "https://api.github.com/users/testorg-ea8ec76d71c3af4b/received_events"
            public var receivedEventsURL: String?
            /// Example: "Organization"
            public var type: String?
            /// Example: false
            public var isSiteAdmin: Bool?

            public init(login: String? = nil, id: Int? = nil, nodeID: String? = nil, url: String? = nil, reposURL: String? = nil, eventsURL: String? = nil, hooksURL: String? = nil, issuesURL: String? = nil, membersURL: String? = nil, publicMembersURL: String? = nil, avatarURL: String? = nil, description: String? = nil, gravatarID: String? = nil, htmlURL: String? = nil, followersURL: String? = nil, followingURL: String? = nil, gistsURL: String? = nil, starredURL: String? = nil, subscriptionsURL: String? = nil, organizationsURL: String? = nil, receivedEventsURL: String? = nil, type: String? = nil, isSiteAdmin: Bool? = nil) {
                self.login = login
                self.id = id
                self.nodeID = nodeID
                self.url = url
                self.reposURL = reposURL
                self.eventsURL = eventsURL
                self.hooksURL = hooksURL
                self.issuesURL = issuesURL
                self.membersURL = membersURL
                self.publicMembersURL = publicMembersURL
                self.avatarURL = avatarURL
                self.description = description
                self.gravatarID = gravatarID
                self.htmlURL = htmlURL
                self.followersURL = followersURL
                self.followingURL = followingURL
                self.gistsURL = gistsURL
                self.starredURL = starredURL
                self.subscriptionsURL = subscriptionsURL
                self.organizationsURL = organizationsURL
                self.receivedEventsURL = receivedEventsURL
                self.type = type
                self.isSiteAdmin = isSiteAdmin
            }

            private enum CodingKeys: String, CodingKey {
                case login
                case id
                case nodeID = "node_id"
                case url
                case reposURL = "repos_url"
                case eventsURL = "events_url"
                case hooksURL = "hooks_url"
                case issuesURL = "issues_url"
                case membersURL = "members_url"
                case publicMembersURL = "public_members_url"
                case avatarURL = "avatar_url"
                case description
                case gravatarID = "gravatar_id"
                case htmlURL = "html_url"
                case followersURL = "followers_url"
                case followingURL = "following_url"
                case gistsURL = "gists_url"
                case starredURL = "starred_url"
                case subscriptionsURL = "subscriptions_url"
                case organizationsURL = "organizations_url"
                case receivedEventsURL = "received_events_url"
                case type
                case isSiteAdmin = "site_admin"
            }
        }

        public struct Permissions: Codable {
            public var metadata: String?
            public var contents: String?
            public var issues: String?
            public var singleFile: String?

            public init(metadata: String? = nil, contents: String? = nil, issues: String? = nil, singleFile: String? = nil) {
                self.metadata = metadata
                self.contents = contents
                self.issues = issues
                self.singleFile = singleFile
            }

            private enum CodingKeys: String, CodingKey {
                case metadata
                case contents
                case issues
                case singleFile = "single_file"
            }
        }

        public init(id: Int? = nil, slug: String? = nil, nodeID: String? = nil, owner: Owner? = nil, name: String? = nil, description: String? = nil, externalURL: String? = nil, htmlURL: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, permissions: Permissions? = nil, events: [String]? = nil) {
            self.id = id
            self.slug = slug
            self.nodeID = nodeID
            self.owner = owner
            self.name = name
            self.description = description
            self.externalURL = externalURL
            self.htmlURL = htmlURL
            self.createdAt = createdAt
            self.updatedAt = updatedAt
            self.permissions = permissions
            self.events = events
        }

        private enum CodingKeys: String, CodingKey {
            case id
            case slug
            case nodeID = "node_id"
            case owner
            case name
            case description
            case externalURL = "external_url"
            case htmlURL = "html_url"
            case createdAt = "created_at"
            case updatedAt = "updated_at"
            case permissions
            case events
        }
    }

    public init(url: URL, usersURL: URL, teamsURL: URL, appsURL: URL, users: [User], teams: [Team], apps: [App]) {
        self.url = url
        self.usersURL = usersURL
        self.teamsURL = teamsURL
        self.appsURL = appsURL
        self.users = users
        self.teams = teams
        self.apps = apps
    }

    private enum CodingKeys: String, CodingKey {
        case url
        case usersURL = "users_url"
        case teamsURL = "teams_url"
        case appsURL = "apps_url"
        case users
        case teams
        case apps
    }
}
