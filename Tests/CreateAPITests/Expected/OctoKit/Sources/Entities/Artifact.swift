// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// An artifact
public struct Artifact: Codable {
    public var id: Int
    /// Example: "MDEwOkNoZWNrU3VpdGU1"
    public var nodeID: String
    /// The name of the artifact.
    ///
    /// Example: "AdventureWorks.Framework"
    public var name: String
    /// The size in bytes of the artifact.
    ///
    /// Example: 12345
    public var sizeInBytes: Int
    /// Example: "https://api.github.com/repos/github/hello-world/actions/artifacts/5"
    public var url: String
    /// Example: "https://api.github.com/repos/github/hello-world/actions/artifacts/5/zip"
    public var archiveDownloadURL: String
    /// Whether or not the artifact has expired.
    public var isExpired: Bool
    public var createdAt: Date?
    public var expiresAt: Date?
    public var updatedAt: Date?

    public init(id: Int, nodeID: String, name: String, sizeInBytes: Int, url: String, archiveDownloadURL: String, isExpired: Bool, createdAt: Date? = nil, expiresAt: Date? = nil, updatedAt: Date? = nil) {
        self.id = id
        self.nodeID = nodeID
        self.name = name
        self.sizeInBytes = sizeInBytes
        self.url = url
        self.archiveDownloadURL = archiveDownloadURL
        self.isExpired = isExpired
        self.createdAt = createdAt
        self.expiresAt = expiresAt
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case nodeID = "node_id"
        case name
        case sizeInBytes = "size_in_bytes"
        case url
        case archiveDownloadURL = "archive_download_url"
        case isExpired = "expired"
        case createdAt = "created_at"
        case expiresAt = "expires_at"
        case updatedAt = "updated_at"
    }
}
