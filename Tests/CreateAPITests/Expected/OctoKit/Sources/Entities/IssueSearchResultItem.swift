// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct IssueSearchResultItem: Codable {
    public var url: URL
    public var repositoryURL: URL
    public var labelsURL: String
    public var commentsURL: URL
    public var eventsURL: URL
    public var htmlURL: URL
    public var id: Int
    public var nodeID: String
    public var number: Int
    public var title: String
    public var isLocked: Bool
    public var activeLockReason: String?
    public var assignees: [SimpleUser]?
    /// Simple User
    public var user: SimpleUser?
    public var labels: [Label]
    public var state: String
    /// Simple User
    public var assignee: SimpleUser?
    /// A collection of related issues and pull requests.
    public var milestone: Milestone?
    public var comments: Int
    public var createdAt: Date
    public var updatedAt: Date
    public var closedAt: Date?
    /// Search Result Text Matches
    public var textMatches: [SearchResultTextMatch]?
    public var pullRequest: PullRequest?
    public var body: String?
    public var score: Double
    /// Author_association
    ///
    /// How the author is associated with the repository.
    ///
    /// Example: "OWNER"
    public var authorAssociation: AuthorAssociation
    public var isDraft: Bool?
    /// A git repository
    public var repository: Repository?
    public var bodyHTML: String?
    public var bodyText: String?
    public var timelineURL: URL?
    /// GitHub app
    ///
    /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
    public var performedViaGithubApp: Integration?
    /// Reaction Rollup
    public var reactions: ReactionRollup?

    public struct Label: Codable {
        public var id: Int?
        public var nodeID: String?
        public var url: String?
        public var name: String?
        public var color: String?
        public var isDefault: Bool?
        public var description: String?

        public init(id: Int? = nil, nodeID: String? = nil, url: String? = nil, name: String? = nil, color: String? = nil, isDefault: Bool? = nil, description: String? = nil) {
            self.id = id
            self.nodeID = nodeID
            self.url = url
            self.name = name
            self.color = color
            self.isDefault = isDefault
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case id
            case nodeID = "node_id"
            case url
            case name
            case color
            case isDefault = "default"
            case description
        }
    }

    public struct PullRequest: Codable {
        public var mergedAt: Date?
        public var diffURL: URL?
        public var htmlURL: URL?
        public var patchURL: URL?
        public var url: URL?

        public init(mergedAt: Date? = nil, diffURL: URL? = nil, htmlURL: URL? = nil, patchURL: URL? = nil, url: URL? = nil) {
            self.mergedAt = mergedAt
            self.diffURL = diffURL
            self.htmlURL = htmlURL
            self.patchURL = patchURL
            self.url = url
        }

        private enum CodingKeys: String, CodingKey {
            case mergedAt = "merged_at"
            case diffURL = "diff_url"
            case htmlURL = "html_url"
            case patchURL = "patch_url"
            case url
        }
    }

    public init(url: URL, repositoryURL: URL, labelsURL: String, commentsURL: URL, eventsURL: URL, htmlURL: URL, id: Int, nodeID: String, number: Int, title: String, isLocked: Bool, activeLockReason: String? = nil, assignees: [SimpleUser]? = nil, user: SimpleUser? = nil, labels: [Label], state: String, assignee: SimpleUser? = nil, milestone: Milestone? = nil, comments: Int, createdAt: Date, updatedAt: Date, closedAt: Date? = nil, textMatches: [SearchResultTextMatch]? = nil, pullRequest: PullRequest? = nil, body: String? = nil, score: Double, authorAssociation: AuthorAssociation, isDraft: Bool? = nil, repository: Repository? = nil, bodyHTML: String? = nil, bodyText: String? = nil, timelineURL: URL? = nil, performedViaGithubApp: Integration? = nil, reactions: ReactionRollup? = nil) {
        self.url = url
        self.repositoryURL = repositoryURL
        self.labelsURL = labelsURL
        self.commentsURL = commentsURL
        self.eventsURL = eventsURL
        self.htmlURL = htmlURL
        self.id = id
        self.nodeID = nodeID
        self.number = number
        self.title = title
        self.isLocked = isLocked
        self.activeLockReason = activeLockReason
        self.assignees = assignees
        self.user = user
        self.labels = labels
        self.state = state
        self.assignee = assignee
        self.milestone = milestone
        self.comments = comments
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.closedAt = closedAt
        self.textMatches = textMatches
        self.pullRequest = pullRequest
        self.body = body
        self.score = score
        self.authorAssociation = authorAssociation
        self.isDraft = isDraft
        self.repository = repository
        self.bodyHTML = bodyHTML
        self.bodyText = bodyText
        self.timelineURL = timelineURL
        self.performedViaGithubApp = performedViaGithubApp
        self.reactions = reactions
    }

    private enum CodingKeys: String, CodingKey {
        case url
        case repositoryURL = "repository_url"
        case labelsURL = "labels_url"
        case commentsURL = "comments_url"
        case eventsURL = "events_url"
        case htmlURL = "html_url"
        case id
        case nodeID = "node_id"
        case number
        case title
        case isLocked = "locked"
        case activeLockReason = "active_lock_reason"
        case assignees
        case user
        case labels
        case state
        case assignee
        case milestone
        case comments
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case closedAt = "closed_at"
        case textMatches = "text_matches"
        case pullRequest = "pull_request"
        case body
        case score
        case authorAssociation = "author_association"
        case isDraft = "draft"
        case repository
        case bodyHTML = "body_html"
        case bodyText = "body_text"
        case timelineURL = "timeline_url"
        case performedViaGithubApp = "performed_via_github_app"
        case reactions
    }
}
