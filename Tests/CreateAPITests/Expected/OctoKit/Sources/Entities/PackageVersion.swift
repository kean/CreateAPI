// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// A version of a software package
public struct PackageVersion: Codable {
    /// Unique identifier of the package version.
    public var id: Int
    /// The name of the package version.
    ///
    /// Example: "latest"
    public var name: String
    /// Example: "https://api.github.com/orgs/github/packages/container/super-linter/versions/786068"
    public var url: String
    /// Example: "https://github.com/orgs/github/packages/container/package/super-linter"
    public var packageHTMLURL: String
    /// Example: "https://github.com/orgs/github/packages/container/super-linter/786068"
    public var htmlURL: String?
    /// Example: "MIT"
    public var license: String?
    public var description: String?
    /// Example: "2011-04-10T20:09:31Z"
    public var createdAt: Date
    /// Example: "2014-03-03T18:58:10Z"
    public var updatedAt: Date
    /// Example: "2014-03-03T18:58:10Z"
    public var deletedAt: Date?
    /// Package Version Metadata
    public var metadata: Metadata?

    /// Package Version Metadata
    public struct Metadata: Codable {
        /// Example: "docker"
        public var packageType: PackageType
        /// Container Metadata
        public var container: Container?
        /// Docker Metadata
        public var docker: Docker?

        /// Example: "docker"
        public enum PackageType: String, Codable, CaseIterable {
            case npm
            case maven
            case rubygems
            case docker
            case nuget
            case container
        }

        /// Container Metadata
        public struct Container: Codable {
            public var tags: [String]

            public init(tags: [String]) {
                self.tags = tags
            }
        }

        /// Docker Metadata
        public struct Docker: Codable {
            public var tag: [String]?
            public var tags: AnyJSON

            public init(tag: [String]? = nil, tags: AnyJSON) {
                self.tag = tag
                self.tags = tags
            }
        }

        public init(packageType: PackageType, container: Container? = nil, docker: Docker? = nil) {
            self.packageType = packageType
            self.container = container
            self.docker = docker
        }

        private enum CodingKeys: String, CodingKey {
            case packageType = "package_type"
            case container
            case docker
        }
    }

    public init(id: Int, name: String, url: String, packageHTMLURL: String, htmlURL: String? = nil, license: String? = nil, description: String? = nil, createdAt: Date, updatedAt: Date, deletedAt: Date? = nil, metadata: Metadata? = nil) {
        self.id = id
        self.name = name
        self.url = url
        self.packageHTMLURL = packageHTMLURL
        self.htmlURL = htmlURL
        self.license = license
        self.description = description
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.deletedAt = deletedAt
        self.metadata = metadata
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case name
        case url
        case packageHTMLURL = "package_html_url"
        case htmlURL = "html_url"
        case license
        case description
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case deletedAt = "deleted_at"
        case metadata
    }
}
