// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// A release.
public struct Release: Codable {
    public var url: URL
    public var htmlURL: URL
    public var assetsURL: URL
    public var uploadURL: String
    public var tarballURL: URL?
    public var zipballURL: URL?
    public var id: Int
    public var nodeID: String
    /// The name of the tag.
    ///
    /// Example: "v1.0.0"
    public var tagName: String
    /// Specifies the commitish value that determines where the Git tag is created from.
    ///
    /// Example: "master"
    public var targetCommitish: String
    public var name: String?
    public var body: String?
    /// True to create a draft (unpublished) release, false to create a published one.
    ///
    /// Example: false
    public var isDraft: Bool
    /// Whether to identify the release as a prerelease or a full release.
    ///
    /// Example: false
    public var isPrerelease: Bool
    public var createdAt: Date
    public var publishedAt: Date?
    /// Simple User
    public var author: SimpleUser
    public var assets: [ReleaseAsset]
    public var bodyHTML: String?
    public var bodyText: String?
    public var mentionsCount: Int?
    /// The URL of the release discussion.
    public var discussionURL: URL?
    /// Reaction Rollup
    public var reactions: ReactionRollup?

    public init(url: URL, htmlURL: URL, assetsURL: URL, uploadURL: String, tarballURL: URL? = nil, zipballURL: URL? = nil, id: Int, nodeID: String, tagName: String, targetCommitish: String, name: String? = nil, body: String? = nil, isDraft: Bool, isPrerelease: Bool, createdAt: Date, publishedAt: Date? = nil, author: SimpleUser, assets: [ReleaseAsset], bodyHTML: String? = nil, bodyText: String? = nil, mentionsCount: Int? = nil, discussionURL: URL? = nil, reactions: ReactionRollup? = nil) {
        self.url = url
        self.htmlURL = htmlURL
        self.assetsURL = assetsURL
        self.uploadURL = uploadURL
        self.tarballURL = tarballURL
        self.zipballURL = zipballURL
        self.id = id
        self.nodeID = nodeID
        self.tagName = tagName
        self.targetCommitish = targetCommitish
        self.name = name
        self.body = body
        self.isDraft = isDraft
        self.isPrerelease = isPrerelease
        self.createdAt = createdAt
        self.publishedAt = publishedAt
        self.author = author
        self.assets = assets
        self.bodyHTML = bodyHTML
        self.bodyText = bodyText
        self.mentionsCount = mentionsCount
        self.discussionURL = discussionURL
        self.reactions = reactions
    }

    private enum CodingKeys: String, CodingKey {
        case url
        case htmlURL = "html_url"
        case assetsURL = "assets_url"
        case uploadURL = "upload_url"
        case tarballURL = "tarball_url"
        case zipballURL = "zipball_url"
        case id
        case nodeID = "node_id"
        case tagName = "tag_name"
        case targetCommitish = "target_commitish"
        case name
        case body
        case isDraft = "draft"
        case isPrerelease = "prerelease"
        case createdAt = "created_at"
        case publishedAt = "published_at"
        case author
        case assets
        case bodyHTML = "body_html"
        case bodyText = "body_text"
        case mentionsCount = "mentions_count"
        case discussionURL = "discussion_url"
        case reactions
    }
}
