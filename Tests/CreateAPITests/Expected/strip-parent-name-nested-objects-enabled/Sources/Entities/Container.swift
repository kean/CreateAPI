// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct Container: Codable {
    public var content: Content

    public enum Content: Codable {
        case a(ContainerA)
        case b(ContainerB)
        case c(ContainerC)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(ContainerA.self) {
                self = .a(value)
            } else if let value = try? container.decode(ContainerB.self) {
                self = .b(value)
            } else if let value = try? container.decode(ContainerC.self) {
                self = .c(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .a(let value): try container.encode(value)
            case .b(let value): try container.encode(value)
            case .c(let value): try container.encode(value)
            }
        }
    }

    public init(content: Content) {
        self.content = content
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.content = try values.decode(Content.self, forKey: "content")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(content, forKey: "content")
    }
}
