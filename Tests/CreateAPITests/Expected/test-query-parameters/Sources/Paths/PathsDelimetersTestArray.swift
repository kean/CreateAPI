// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.Delimeters {
    public var testArray: TestArray {
        TestArray(path: path + "/test-array")
    }

    public struct TestArray {
        /// Path: `/delimeters/test-array`
        public let path: String

        /// Space Delimited Explode False
        public func get(type: [String]) -> Request<Void> {
            Request(method: "GET", url: path, query: makeGetQuery(type))
        }

        private func makeGetQuery(_ type: [String]) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(type, forKey: "type", explode: false, delimiter: " ")
            return encoder.items
        }

        /// Pipe Delimited Explode False
        public func post(type: [String]? = nil) -> Request<Void> {
            Request(method: "POST", url: path, query: makePostQuery(type))
        }

        private func makePostQuery(_ type: [String]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(type, forKey: "type", explode: false, delimiter: "|")
            return encoder.items
        }

        /// Space Delimited Explode True
        public func put(type: [String]) -> Request<Void> {
            Request(method: "PUT", url: path, query: makePutQuery(type))
        }

        private func makePutQuery(_ type: [String]) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(type, forKey: "type", delimiter: " ")
            return encoder.items
        }

        /// Pipe Delimited Explode True
        public func patch(type: [String]? = nil) -> Request<Void> {
            Request(method: "PATCH", url: path, query: makePatchQuery(type))
        }

        private func makePatchQuery(_ type: [String]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(type, forKey: "type", delimiter: "|")
            return encoder.items
        }
    }
}
