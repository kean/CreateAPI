// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Repos.WithOwner.WithRepo {
    public var pages: Pages {
        Pages(path: path + "/pages")
    }

    public struct Pages {
        /// Path: `/repos/{owner}/{repo}/pages`
        public let path: String

        /// Get a GitHub Pages site
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#get-a-github-pages-site)
        public var get: Request<OctoKit.Page> {
            Request(method: "GET", url: path, id: "repos/get-pages")
        }

        /// Create a GitHub Pages site
        ///
        /// Configures a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages)."
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#create-a-github-pages-site)
        public func post(source: PostRequest.Source) -> Request<OctoKit.Page> {
            Request(method: "POST", url: path, body: PostRequest(source: source), id: "repos/create-pages-site")
        }

        /// The source branch and directory used to publish your Pages site.
        public struct PostRequest: Encodable {
            /// The source branch and directory used to publish your Pages site.
            public var source: Source

            /// The source branch and directory used to publish your Pages site.
            public struct Source: Encodable {
                /// The repository branch used to publish your site's source files.
                public var branch: String
                /// The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. Default: `/`
                public var path: Path?

                /// The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. Default: `/`
                public enum Path: String, Codable, CaseIterable {
                    case slash = "/"
                    case docs = "/docs"
                }

                public init(branch: String, path: Path? = nil) {
                    self.branch = branch
                    self.path = path
                }

                public func encode(to encoder: Encoder) throws {
                    var values = encoder.container(keyedBy: StringCodingKey.self)
                    try values.encode(branch, forKey: "branch")
                    try values.encodeIfPresent(path, forKey: "path")
                }
            }

            public init(source: Source) {
                self.source = source
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encode(source, forKey: "source")
            }
        }

        /// Update information about a GitHub Pages site
        ///
        /// Updates information for a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages).
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#update-information-about-a-github-pages-site)
        public func put(_ body: PutRequest) -> Request<Void> {
            Request(method: "PUT", url: path, body: body, id: "repos/update-information-about-pages-site")
        }

        public struct PutRequest: Encodable {
            /// Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://help.github.com/articles/using-a-custom-domain-with-github-pages/)."
            public var cname: String?
            /// Specify whether HTTPS should be enforced for the repository.
            public var isHTTPSEnforced: Bool?
            /// Configures access controls for the GitHub Pages site. If public is set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site. This includes anyone in your Enterprise if the repository is set to `internal` visibility. This feature is only available to repositories in an organization on an Enterprise plan.
            public var isPublic: Bool?
            public var source: Source?

            public struct Source: Encodable {
                /// Update the source for the repository. Must include the branch name, and may optionally specify the subdirectory `/docs`. Possible values are `"gh-pages"`, `"master"`, and `"master /docs"`.
                public var a: A?
                /// Update the source for the repository. Must include the branch name and path.
                public var b: B?

                /// Update the source for the repository. Must include the branch name, and may optionally specify the subdirectory `/docs`. Possible values are `"gh-pages"`, `"master"`, and `"master /docs"`.
                public enum A: String, Codable, CaseIterable {
                    case ghPages = "gh-pages"
                    case master
                    case masterDocs = "master /docs"
                }

                /// Update the source for the repository. Must include the branch name and path.
                public struct B: Encodable {
                    /// The repository branch used to publish your site's source files.
                    public var branch: String
                    /// The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`.
                    public var path: Path

                    /// The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`.
                    public enum Path: String, Codable, CaseIterable {
                        case slash = "/"
                        case docs = "/docs"
                    }

                    public init(branch: String, path: Path) {
                        self.branch = branch
                        self.path = path
                    }

                    public func encode(to encoder: Encoder) throws {
                        var values = encoder.container(keyedBy: StringCodingKey.self)
                        try values.encode(branch, forKey: "branch")
                        try values.encode(path, forKey: "path")
                    }
                }

                public init(a: A? = nil, b: B? = nil) {
                    self.a = a
                    self.b = b
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = a { try container.encode(value) }
                    if let value = b { try container.encode(value) }
                }
            }

            public init(cname: String? = nil, isHTTPSEnforced: Bool? = nil, isPublic: Bool? = nil, source: Source? = nil) {
                self.cname = cname
                self.isHTTPSEnforced = isHTTPSEnforced
                self.isPublic = isPublic
                self.source = source
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(cname, forKey: "cname")
                try values.encodeIfPresent(isHTTPSEnforced, forKey: "https_enforced")
                try values.encodeIfPresent(isPublic, forKey: "public")
                try values.encodeIfPresent(source, forKey: "source")
            }
        }

        /// Delete a GitHub Pages site
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/repos#delete-a-github-pages-site)
        public var delete: Request<Void> {
            Request(method: "DELETE", url: path, id: "repos/delete-pages-site")
        }
    }
}
