// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Orgs.WithOrg.Teams.WithTeamSlug.TeamSync {
    public var groupMappings: GroupMappings {
        GroupMappings(path: path + "/group-mappings")
    }

    public struct GroupMappings {
        /// Path: `/orgs/{org}/teams/{team_slug}/team-sync/group-mappings`
        public let path: String

        /// List IdP groups for a team
        ///
        /// Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// List IdP groups connected to a team on GitHub.
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/team-sync/group-mappings`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#list-idp-groups-for-a-team)
        public var get: Request<OctoKit.GroupMapping> {
            Request(method: "GET", url: path, id: "teams/list-idp-groups-in-org")
        }

        /// Create or update IdP group connections
        ///
        /// Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        /// 
        /// Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty `groups` array will remove all connections for a team.
        /// 
        /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/team-sync/group-mappings`.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/teams#create-or-update-idp-group-connections)
        public func patch(groups: [PatchRequest.Group]? = nil) -> Request<OctoKit.GroupMapping> {
            Request(method: "PATCH", url: path, body: PatchRequest(groups: groups), id: "teams/create-or-update-idp-group-connections-in-org")
        }

        public struct PatchRequest: Encodable {
            /// The IdP groups you want to connect to a GitHub team. When updating, the new `groups` object will replace the original one. You must include any existing groups that you don't want to remove.
            public var groups: [Group]?

            public struct Group: Encodable {
                /// ID of the IdP group.
                public var groupID: String
                /// Name of the IdP group.
                public var groupName: String
                /// Description of the IdP group.
                public var groupDescription: String

                public init(groupID: String, groupName: String, groupDescription: String) {
                    self.groupID = groupID
                    self.groupName = groupName
                    self.groupDescription = groupDescription
                }

                public func encode(to encoder: Encoder) throws {
                    var values = encoder.container(keyedBy: StringCodingKey.self)
                    try values.encode(groupID, forKey: "group_id")
                    try values.encode(groupName, forKey: "group_name")
                    try values.encode(groupDescription, forKey: "group_description")
                }
            }

            public init(groups: [Group]? = nil) {
                self.groups = groups
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(groups, forKey: "groups")
            }
        }
    }
}
