// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Scim.V2.Enterprises.WithEnterprise {
    public var groups: Groups {
        Groups(path: path + "/Groups")
    }

    public struct Groups {
        /// Path: `/scim/v2/enterprises/{enterprise}/Groups`
        public let path: String

        /// List provisioned SCIM groups for an enterprise
        ///
        /// **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#list-provisioned-scim-groups-for-an-enterprise)
        public func get(parameters: GetParameters? = nil) -> Request<OctoKit.ScimGroupListEnterprise> {
            Request(method: "GET", url: path, query: parameters?.asQuery, id: "enterprise-admin/list-provisioned-groups-enterprise")
        }

        public struct GetParameters {
            public var startIndex: Int?
            public var count: Int?
            public var filter: String?
            public var excludedAttributes: String?

            public init(startIndex: Int? = nil, count: Int? = nil, filter: String? = nil, excludedAttributes: String? = nil) {
                self.startIndex = startIndex
                self.count = count
                self.filter = filter
                self.excludedAttributes = excludedAttributes
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(startIndex, forKey: "startIndex")
                encoder.encode(count, forKey: "count")
                encoder.encode(filter, forKey: "filter")
                encoder.encode(excludedAttributes, forKey: "excludedAttributes")
                return encoder.items
            }
        }

        /// Provision a SCIM enterprise group and invite users
        ///
        /// **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
        /// 
        /// Provision an enterprise group, and invite users to the group. This sends invitation emails to the email address of the invited users to join the GitHub organization that the SCIM group corresponds to.
        ///
        /// [API method documentation](https://docs.github.com/rest/reference/enterprise-admin#provision-a-scim-enterprise-group-and-invite-users)
        public func post(_ body: PostRequest) -> Request<OctoKit.ScimEnterpriseGroup> {
            Request(method: "POST", url: path, body: body, id: "enterprise-admin/provision-and-invite-enterprise-group")
        }

        public struct PostRequest: Encodable {
            /// The SCIM schema URIs.
            public var schemas: [String]
            /// The name of the SCIM group. This must match the GitHub organization that the group maps to.
            public var displayName: String
            public var members: [Member]?

            public struct Member: Encodable {
                /// The SCIM user ID for a user.
                public var value: String

                public init(value: String) {
                    self.value = value
                }

                public func encode(to encoder: Encoder) throws {
                    var values = encoder.container(keyedBy: StringCodingKey.self)
                    try values.encode(value, forKey: "value")
                }
            }

            public init(schemas: [String], displayName: String, members: [Member]? = nil) {
                self.schemas = schemas
                self.displayName = displayName
                self.members = members
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encode(schemas, forKey: "schemas")
                try values.encode(displayName, forKey: "displayName")
                try values.encodeIfPresent(members, forKey: "members")
            }
        }
    }
}
