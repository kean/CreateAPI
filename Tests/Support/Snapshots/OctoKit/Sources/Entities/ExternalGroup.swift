// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// Information about an external group's usage and its members
public struct ExternalGroup: Codable {
    /// The internal ID of the group
    public var groupID: Int
    /// The display name for the group
    ///
    /// Example: "group-azuread-test"
    public var groupName: String
    /// The date when the group was last updated_at
    ///
    /// Example: "2021-01-03 22:27:15:000 -700"
    public var updatedAt: String?
    /// An array of teams linked to this group
    ///
    /// Example:
    ///
    /// [
    ///   {
    ///     "team_id" : 1,
    ///     "team_name" : "team-test"
    ///   },
    ///   {
    ///     "team_id" : 2,
    ///     "team_name" : "team-test2"
    ///   }
    /// ]
    public var teams: [Team]
    /// An array of external members linked to this group
    ///
    /// Example:
    ///
    /// [
    ///   {
    ///     "member_email" : "mona_lisa@github.com",
    ///     "member_id" : 1,
    ///     "member_login" : "mona-lisa_eocsaxrs",
    ///     "member_name" : "Mona Lisa"
    ///   },
    ///   {
    ///     "member_email" : "octo_lisa@github.com",
    ///     "member_id" : 2,
    ///     "member_login" : "octo-lisa_eocsaxrs",
    ///     "member_name" : "Octo Lisa"
    ///   }
    /// ]
    public var members: [Member]

    public struct Team: Codable {
        /// The id for a team
        public var teamID: Int
        /// The name of the team
        ///
        /// Example: "team-test"
        public var teamName: String

        public init(teamID: Int, teamName: String) {
            self.teamID = teamID
            self.teamName = teamName
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.teamID = try values.decode(Int.self, forKey: "team_id")
            self.teamName = try values.decode(String.self, forKey: "team_name")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(teamID, forKey: "team_id")
            try values.encode(teamName, forKey: "team_name")
        }
    }

    public struct Member: Codable {
        /// The internal user ID of the identity
        public var memberID: Int
        /// The handle/login for the user
        ///
        /// Example: "mona-lisa_eocsaxrs"
        public var memberLogin: String
        /// The user display name/profile name
        ///
        /// Example: "Mona Lisa"
        public var memberName: String
        /// An email attached to a user
        ///
        /// Example: "mona_lisa@github.com"
        public var memberEmail: String

        public init(memberID: Int, memberLogin: String, memberName: String, memberEmail: String) {
            self.memberID = memberID
            self.memberLogin = memberLogin
            self.memberName = memberName
            self.memberEmail = memberEmail
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.memberID = try values.decode(Int.self, forKey: "member_id")
            self.memberLogin = try values.decode(String.self, forKey: "member_login")
            self.memberName = try values.decode(String.self, forKey: "member_name")
            self.memberEmail = try values.decode(String.self, forKey: "member_email")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(memberID, forKey: "member_id")
            try values.encode(memberLogin, forKey: "member_login")
            try values.encode(memberName, forKey: "member_name")
            try values.encode(memberEmail, forKey: "member_email")
        }
    }

    public init(groupID: Int, groupName: String, updatedAt: String? = nil, teams: [Team], members: [Member]) {
        self.groupID = groupID
        self.groupName = groupName
        self.updatedAt = updatedAt
        self.teams = teams
        self.members = members
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.groupID = try values.decode(Int.self, forKey: "group_id")
        self.groupName = try values.decode(String.self, forKey: "group_name")
        self.updatedAt = try values.decodeIfPresent(String.self, forKey: "updated_at")
        self.teams = try values.decode([Team].self, forKey: "teams")
        self.members = try values.decode([Member].self, forKey: "members")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(groupID, forKey: "group_id")
        try values.encode(groupName, forKey: "group_name")
        try values.encodeIfPresent(updatedAt, forKey: "updated_at")
        try values.encode(teams, forKey: "teams")
        try values.encode(members, forKey: "members")
    }
}
