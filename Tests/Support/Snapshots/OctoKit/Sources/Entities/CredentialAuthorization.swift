// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct CredentialAuthorization: Codable {
    /// User login that owns the underlying credential.
    ///
    /// Example: "monalisa"
    public var login: String
    /// Unique identifier for the credential.
    public var credentialID: Int
    /// Human-readable description of the credential type.
    ///
    /// Example: "SSH Key"
    public var credentialType: String
    /// Last eight characters of the credential. Only included in responses with credential_type of personal access token.
    ///
    /// Example: "12345678"
    public var tokenLastEight: String?
    /// Date when the credential was authorized for use.
    ///
    /// Example: "2011-01-26T19:06:43Z"
    public var credentialAuthorizedAt: Date
    /// List of oauth scopes the token has been granted.
    ///
    /// Example: ["user", "repo"]
    public var scopes: [String]?
    /// Unique string to distinguish the credential. Only included in responses with credential_type of SSH Key.
    ///
    /// Example: "jklmnop12345678"
    public var fingerprint: String?
    /// Date when the credential was last accessed. May be null if it was never accessed
    ///
    /// Example: "2011-01-26T19:06:43Z"
    public var credentialAccessedAt: Date?
    /// Example: 12345678
    public var authorizedCredentialID: Int?
    /// The title given to the ssh key. This will only be present when the credential is an ssh key.
    ///
    /// Example: "my ssh key"
    public var authorizedCredentialTitle: String?
    /// The note given to the token. This will only be present when the credential is a token.
    ///
    /// Example: "my token"
    public var authorizedCredentialNote: String?
    /// The expiry for the token. This will only be present when the credential is a token.
    public var authorizedCredentialExpiresAt: Date?

    public init(login: String, credentialID: Int, credentialType: String, tokenLastEight: String? = nil, credentialAuthorizedAt: Date, scopes: [String]? = nil, fingerprint: String? = nil, credentialAccessedAt: Date? = nil, authorizedCredentialID: Int? = nil, authorizedCredentialTitle: String? = nil, authorizedCredentialNote: String? = nil, authorizedCredentialExpiresAt: Date? = nil) {
        self.login = login
        self.credentialID = credentialID
        self.credentialType = credentialType
        self.tokenLastEight = tokenLastEight
        self.credentialAuthorizedAt = credentialAuthorizedAt
        self.scopes = scopes
        self.fingerprint = fingerprint
        self.credentialAccessedAt = credentialAccessedAt
        self.authorizedCredentialID = authorizedCredentialID
        self.authorizedCredentialTitle = authorizedCredentialTitle
        self.authorizedCredentialNote = authorizedCredentialNote
        self.authorizedCredentialExpiresAt = authorizedCredentialExpiresAt
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.login = try values.decode(String.self, forKey: "login")
        self.credentialID = try values.decode(Int.self, forKey: "credential_id")
        self.credentialType = try values.decode(String.self, forKey: "credential_type")
        self.tokenLastEight = try values.decodeIfPresent(String.self, forKey: "token_last_eight")
        self.credentialAuthorizedAt = try values.decode(Date.self, forKey: "credential_authorized_at")
        self.scopes = try values.decodeIfPresent([String].self, forKey: "scopes")
        self.fingerprint = try values.decodeIfPresent(String.self, forKey: "fingerprint")
        self.credentialAccessedAt = try values.decodeIfPresent(Date.self, forKey: "credential_accessed_at")
        self.authorizedCredentialID = try values.decodeIfPresent(Int.self, forKey: "authorized_credential_id")
        self.authorizedCredentialTitle = try values.decodeIfPresent(String.self, forKey: "authorized_credential_title")
        self.authorizedCredentialNote = try values.decodeIfPresent(String.self, forKey: "authorized_credential_note")
        self.authorizedCredentialExpiresAt = try values.decodeIfPresent(Date.self, forKey: "authorized_credential_expires_at")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(login, forKey: "login")
        try values.encode(credentialID, forKey: "credential_id")
        try values.encode(credentialType, forKey: "credential_type")
        try values.encodeIfPresent(tokenLastEight, forKey: "token_last_eight")
        try values.encode(credentialAuthorizedAt, forKey: "credential_authorized_at")
        try values.encodeIfPresent(scopes, forKey: "scopes")
        try values.encodeIfPresent(fingerprint, forKey: "fingerprint")
        try values.encodeIfPresent(credentialAccessedAt, forKey: "credential_accessed_at")
        try values.encodeIfPresent(authorizedCredentialID, forKey: "authorized_credential_id")
        try values.encodeIfPresent(authorizedCredentialTitle, forKey: "authorized_credential_title")
        try values.encodeIfPresent(authorizedCredentialNote, forKey: "authorized_credential_note")
        try values.encodeIfPresent(authorizedCredentialExpiresAt, forKey: "authorized_credential_expires_at")
    }
}
