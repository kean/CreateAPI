// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

/// SCIM /Users
///
/// SCIM /Users provisioning endpoints
public struct ScimUser: Codable {
    /// SCIM schema used.
    public var schemas: [String]
    /// Unique identifier of an external identity
    ///
    /// Example: "1b78eada-9baa-11e6-9eb6-a431576d590e"
    public var id: String
    /// The ID of the User.
    ///
    /// Example: "a7b0f98395"
    public var externalID: String?
    /// Configured by the admin. Could be an email, login, or username
    ///
    /// Example: "someone@example.com"
    public var userName: String?
    /// The name of the user, suitable for display to end-users
    ///
    /// Example: "Jon Doe"
    public var displayName: String?
    /// Example:
    ///
    /// {
    ///   "familyName" : "User",
    ///   "givenName" : "Jane"
    /// }
    public var name: Name
    /// User emails
    ///
    /// Example:
    ///
    /// [
    ///   {
    ///     "primary" : true,
    ///     "value" : "someone@example.com"
    ///   },
    ///   {
    ///     "primary" : false,
    ///     "value" : "another@example.com"
    ///   }
    /// ]
    public var emails: [Email]
    /// The active status of the User.
    ///
    /// Example: true
    public var isActive: Bool
    public var meta: Meta
    /// The ID of the organization.
    public var organizationID: Int?
    /// Set of operations to be performed
    ///
    /// Example:
    ///
    /// [
    ///   {
    ///     "op" : "replace",
    ///     "value" : {
    ///       "active" : false
    ///     }
    ///   }
    /// ]
    public var operations: [Operation]?
    /// Associated groups
    public var groups: [Group]?

    /// Example:
    ///
    /// {
    ///   "familyName" : "User",
    ///   "givenName" : "Jane"
    /// }
    public struct Name: Codable {
        public var givenName: String?
        public var familyName: String?
        public var formatted: String?

        public init(givenName: String? = nil, familyName: String? = nil, formatted: String? = nil) {
            self.givenName = givenName
            self.familyName = familyName
            self.formatted = formatted
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.givenName = try values.decodeIfPresent(String.self, forKey: "givenName")
            self.familyName = try values.decodeIfPresent(String.self, forKey: "familyName")
            self.formatted = try values.decodeIfPresent(String.self, forKey: "formatted")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(givenName, forKey: "givenName")
            try values.encodeIfPresent(familyName, forKey: "familyName")
            try values.encodeIfPresent(formatted, forKey: "formatted")
        }
    }

    public struct Email: Codable {
        public var value: String
        public var isPrimary: Bool?

        public init(value: String, isPrimary: Bool? = nil) {
            self.value = value
            self.isPrimary = isPrimary
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.value = try values.decode(String.self, forKey: "value")
            self.isPrimary = try values.decodeIfPresent(Bool.self, forKey: "primary")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(value, forKey: "value")
            try values.encodeIfPresent(isPrimary, forKey: "primary")
        }
    }

    public struct Meta: Codable {
        /// Example: "User"
        public var resourceType: String?
        /// Example: "2019-01-24T22:45:36.000Z"
        public var created: Date?
        /// Example: "2019-01-24T22:45:36.000Z"
        public var lastModified: Date?
        /// Example: "https://api.github.com/scim/v2/organizations/myorg-123abc55141bfd8f/Users/c42772b5-2029-11e9-8543-9264a97dec8d"
        public var location: URL?

        public init(resourceType: String? = nil, created: Date? = nil, lastModified: Date? = nil, location: URL? = nil) {
            self.resourceType = resourceType
            self.created = created
            self.lastModified = lastModified
            self.location = location
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.resourceType = try values.decodeIfPresent(String.self, forKey: "resourceType")
            self.created = try values.decodeIfPresent(Date.self, forKey: "created")
            self.lastModified = try values.decodeIfPresent(Date.self, forKey: "lastModified")
            self.location = try values.decodeIfPresent(URL.self, forKey: "location")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(resourceType, forKey: "resourceType")
            try values.encodeIfPresent(created, forKey: "created")
            try values.encodeIfPresent(lastModified, forKey: "lastModified")
            try values.encodeIfPresent(location, forKey: "location")
        }
    }

    public struct Operation: Codable {
        public var op: Op
        public var path: String?
        public var value: Value?

        public enum Op: String, Codable, CaseIterable {
            case add
            case remove
            case replace
        }

        public enum Value: Codable {
            case string(String)
            case object([String: AnyJSON])
            case anyJSONs([AnyJSON])

            public init(from decoder: Decoder) throws {
                let container = try decoder.singleValueContainer()
                if let value = try? container.decode(String.self) {
                    self = .string(value)
                } else if let value = try? container.decode([String: AnyJSON].self) {
                    self = .object(value)
                } else if let value = try? container.decode([AnyJSON].self) {
                    self = .anyJSONs(value)
                } else {
                    throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
                }
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                switch self {
                case .string(let value): try container.encode(value)
                case .object(let value): try container.encode(value)
                case .anyJSONs(let value): try container.encode(value)
                }
            }
        }

        public init(op: Op, path: String? = nil, value: Value? = nil) {
            self.op = op
            self.path = path
            self.value = value
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.op = try values.decode(Op.self, forKey: "op")
            self.path = try values.decodeIfPresent(String.self, forKey: "path")
            self.value = try values.decodeIfPresent(Value.self, forKey: "value")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(op, forKey: "op")
            try values.encodeIfPresent(path, forKey: "path")
            try values.encodeIfPresent(value, forKey: "value")
        }
    }

    public struct Group: Codable {
        public var value: String?
        public var display: String?

        public init(value: String? = nil, display: String? = nil) {
            self.value = value
            self.display = display
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.value = try values.decodeIfPresent(String.self, forKey: "value")
            self.display = try values.decodeIfPresent(String.self, forKey: "display")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(value, forKey: "value")
            try values.encodeIfPresent(display, forKey: "display")
        }
    }

    public init(schemas: [String], id: String, externalID: String? = nil, userName: String? = nil, displayName: String? = nil, name: Name, emails: [Email], isActive: Bool, meta: Meta, organizationID: Int? = nil, operations: [Operation]? = nil, groups: [Group]? = nil) {
        self.schemas = schemas
        self.id = id
        self.externalID = externalID
        self.userName = userName
        self.displayName = displayName
        self.name = name
        self.emails = emails
        self.isActive = isActive
        self.meta = meta
        self.organizationID = organizationID
        self.operations = operations
        self.groups = groups
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.schemas = try values.decode([String].self, forKey: "schemas")
        self.id = try values.decode(String.self, forKey: "id")
        self.externalID = try values.decodeIfPresent(String.self, forKey: "externalId")
        self.userName = try values.decodeIfPresent(String.self, forKey: "userName")
        self.displayName = try values.decodeIfPresent(String.self, forKey: "displayName")
        self.name = try values.decode(Name.self, forKey: "name")
        self.emails = try values.decode([Email].self, forKey: "emails")
        self.isActive = try values.decode(Bool.self, forKey: "active")
        self.meta = try values.decode(Meta.self, forKey: "meta")
        self.organizationID = try values.decodeIfPresent(Int.self, forKey: "organization_id")
        self.operations = try values.decodeIfPresent([Operation].self, forKey: "operations")
        self.groups = try values.decodeIfPresent([Group].self, forKey: "groups")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(schemas, forKey: "schemas")
        try values.encode(id, forKey: "id")
        try values.encodeIfPresent(externalID, forKey: "externalId")
        try values.encodeIfPresent(userName, forKey: "userName")
        try values.encodeIfPresent(displayName, forKey: "displayName")
        try values.encode(name, forKey: "name")
        try values.encode(emails, forKey: "emails")
        try values.encode(isActive, forKey: "active")
        try values.encode(meta, forKey: "meta")
        try values.encodeIfPresent(organizationID, forKey: "organization_id")
        try values.encodeIfPresent(operations, forKey: "operations")
        try values.encodeIfPresent(groups, forKey: "groups")
    }
}
