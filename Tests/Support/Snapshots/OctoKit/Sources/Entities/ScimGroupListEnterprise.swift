// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct ScimGroupListEnterprise: Codable {
    public var schemas: [String]
    public var totalResults: Double
    public var itemsPerPage: Double
    public var startIndex: Double
    public var resources: [Resource]

    public struct Resource: Codable {
        public var schemas: [String]
        public var id: String
        public var externalID: String?
        public var displayName: String?
        public var members: [Member]?
        public var meta: Meta?

        public struct Member: Codable {
            public var value: String?
            public var ref: String?
            public var display: String?

            public init(value: String? = nil, ref: String? = nil, display: String? = nil) {
                self.value = value
                self.ref = ref
                self.display = display
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.value = try values.decodeIfPresent(String.self, forKey: "value")
                self.ref = try values.decodeIfPresent(String.self, forKey: "$ref")
                self.display = try values.decodeIfPresent(String.self, forKey: "display")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(value, forKey: "value")
                try values.encodeIfPresent(ref, forKey: "$ref")
                try values.encodeIfPresent(display, forKey: "display")
            }
        }

        public struct Meta: Codable {
            public var resourceType: String?
            public var created: String?
            public var lastModified: String?
            public var location: String?

            public init(resourceType: String? = nil, created: String? = nil, lastModified: String? = nil, location: String? = nil) {
                self.resourceType = resourceType
                self.created = created
                self.lastModified = lastModified
                self.location = location
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.resourceType = try values.decodeIfPresent(String.self, forKey: "resourceType")
                self.created = try values.decodeIfPresent(String.self, forKey: "created")
                self.lastModified = try values.decodeIfPresent(String.self, forKey: "lastModified")
                self.location = try values.decodeIfPresent(String.self, forKey: "location")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(resourceType, forKey: "resourceType")
                try values.encodeIfPresent(created, forKey: "created")
                try values.encodeIfPresent(lastModified, forKey: "lastModified")
                try values.encodeIfPresent(location, forKey: "location")
            }
        }

        public init(schemas: [String], id: String, externalID: String? = nil, displayName: String? = nil, members: [Member]? = nil, meta: Meta? = nil) {
            self.schemas = schemas
            self.id = id
            self.externalID = externalID
            self.displayName = displayName
            self.members = members
            self.meta = meta
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.schemas = try values.decode([String].self, forKey: "schemas")
            self.id = try values.decode(String.self, forKey: "id")
            self.externalID = try values.decodeIfPresent(String.self, forKey: "externalId")
            self.displayName = try values.decodeIfPresent(String.self, forKey: "displayName")
            self.members = try values.decodeIfPresent([Member].self, forKey: "members")
            self.meta = try values.decodeIfPresent(Meta.self, forKey: "meta")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(schemas, forKey: "schemas")
            try values.encode(id, forKey: "id")
            try values.encodeIfPresent(externalID, forKey: "externalId")
            try values.encodeIfPresent(displayName, forKey: "displayName")
            try values.encodeIfPresent(members, forKey: "members")
            try values.encodeIfPresent(meta, forKey: "meta")
        }
    }

    public init(schemas: [String], totalResults: Double, itemsPerPage: Double, startIndex: Double, resources: [Resource]) {
        self.schemas = schemas
        self.totalResults = totalResults
        self.itemsPerPage = itemsPerPage
        self.startIndex = startIndex
        self.resources = resources
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.schemas = try values.decode([String].self, forKey: "schemas")
        self.totalResults = try values.decode(Double.self, forKey: "totalResults")
        self.itemsPerPage = try values.decode(Double.self, forKey: "itemsPerPage")
        self.startIndex = try values.decode(Double.self, forKey: "startIndex")
        self.resources = try values.decode([Resource].self, forKey: "Resources")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(schemas, forKey: "schemas")
        try values.encode(totalResults, forKey: "totalResults")
        try values.encode(itemsPerPage, forKey: "itemsPerPage")
        try values.encode(startIndex, forKey: "startIndex")
        try values.encode(resources, forKey: "Resources")
    }
}
