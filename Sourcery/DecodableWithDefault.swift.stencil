{% for type in types.all|annotated:"decodableWithDefault" %}
extension {{ type.name }}: Decodable {
    enum KnownKeys: String {
        {% for variable in type.variables|stored %}
        case {{ variable.name }}
        {% endfor %}
    }

    public init(from decoder: Decoder) throws {
        let container = try StringCodingContainer<KnownKeys>(decoder: decoder)
        {% for variable in type.variables|stored %}

        {{ variable.name }} = try container.decode({{ variable.typeName }}.self,
            forKey: .{{ variable.name }},
            defaultValue: {{ variable.defaultValue }}
        )
        {% endfor %}

        container.recordPotentialIssues(deprecations: [
        {% for variable in type.variables|stored %}
        {% if variable.annotations.deprecated %}
            (.{{ variable.name }}, "{{ variable.annotations.message }}"),
        {% endif %}
        {% endfor %}
        ])
    }
}

{% endfor %}
